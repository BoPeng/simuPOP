#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass manual
\begin_preamble
\usepackage{underscore}
\renewcommand{\py@ptsize}{12pt}

\setreleaseinfo{Release 0.6.9 (\mbox{$$Rev: 75 $$})}
\authoraddress{
{\bf Department of Statistics, Rice University}\\
{\bf Email: }{\textsf bpeng@rice.edu}\\
{\bf URL: }{\textsf http://simupop.sourceforge.net} \\
{\bf Mailing List: }{\textsf simupop-list@lists.sourceforge.net}
}
\author{Bo Peng}
\date{December 2004\\
\hfill{}\\
Last modified \\
\today }

\ifhtml
\chapter*{Front Matter\label{front}}
\fi
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\float_placement H
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\use_natbib 1
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

simuPOP Developer's Guide
\layout Standard


\begin_inset Minipage
position 1
inner_position 0
height "0pt"
width "100col%"
collapsed true

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
hspace{1cm}
\layout Standard

\backslash 
vspace{5in}
\layout Standard
{
\backslash 
large
\backslash 
textsf Acknowledgements: }
\layout Standard

\backslash 
vspace{.2cm}
\layout Standard

\backslash 
hspace{.3cm} Dr. Marek Kimmel
\layout Standard

\backslash 
hspace{.3cm} Dr. Fran
\backslash 
c cious Balloux
\layout Standard

\backslash 
hspace{.3cm} Dr. William Amos
\layout Standard

\backslash 
hspace{.3cm} SWIG user community
\layout Standard

\backslash 
hspace{.3cm} Python user community 
\layout Standard

\backslash 
hspace{.3cm} Keck Center for Computational and Structural Biology
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{.7in} 
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
copyright{} 
\end_inset 

 2004-2005 Bo Peng 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{.3cm} 
\backslash 
hrule 
\backslash 
vspace{0.1cm} 
\end_inset 

Permission is granted to make and distribute verbatim copies of this manual
 provided the copyright notice and this permission notice are preserved
 on all copies.
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that the
 sections entitled Copying and GNU General Public License are included exactly
 as in the original, and provided that the entire resulting derived work
 is distributed under the terms of a permission notice identical to this
 one.
 Permission is granted to copy and distribute translations of this manual
 into another language, under the above conditions for modified versions,
 except that this permission notice may be stated in a translation approved
 by the Free Software Foundation.
\end_inset 


\layout Abstract

simuPOP is a forward-time population genetics simulation environment.
 Unlike coalescent-based programs, simuPOP evolves populations forward in
 time, subject to arbitrary number of genetic and environmental forces such
 as mutation, recombination, migration and population/subpopulation size
 changes.
 Statistics of populations can be calculated and visualized dynamically
 which makes simuPOP an ideal tool to demonstrate population genetics models;
 generate datasets under various evolutionary settings, and more importantly,
 study complex evolutionary processes and evaluate gene mapping methods.
\layout Abstract

The core of simuPOP is a scripting language (Python) that provides a large
 number of building blocks (populations, mating schemes, various genetic
 forces in the form of operators, simulators and gene mapping methods) to
 construct a simulation.
 This provides a R/Splus or Matlab-like environment where users can interactivel
y create, manipulate and evolve populations, monitor and visualize population
 statistics and apply gene mapping methods.
 The full power of simuPOP and Python (even R) can be utilized to simulate
 arbitrarily complex evolutionary scenarios.
\layout Abstract

simuPOP is written in C++ and is provided as Python libraries.
 Besides a front-end providing an interactive shell and a scripting language,
 Python is used extensively to pass dynamic parameters, calculate complex
 statistics and write operators.
 Because of the openness of simuPOP and Python, users can make use of a
 wide variety of tools (Splus/R, Python/SciPy, MatPlotLib etc.) to perform
 tasks like statistical analysis, gene mapping and visualization.
 Depend on machine configuration, simuPOP can simulate large (think in millions)
 populations at reasonable speed.
\layout Abstract

Binary libraries of simuPOP are provided for linux, windows, solaris and
 mac systems.
 Source code and development documentations are also available for easy
 porting to other platforms.
 Both source code and binaries can be distributed free-of-charge under GPL
 license.
 All resources, including a pdf version of this manual and a discussion
 forum can be found at the simuPOP homepage 
\family typewriter 
http://simupop.sourceforge.net 
\family default 
.
\layout Abstract


\series bold 
How to cite simuPOP: 
\begin_deeper 
\layout Quote

Bo Peng and Marek Kimmel (2005) simuPOP: a forward-time population genetics
 simulation environment.

\emph on 
 bioinformatics
\emph default 
, 
\series bold 
21
\series default 
(18): 3686-3687
\end_deeper 
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter

Introduction
\layout Section

Design
\layout Chapter

Individuals
\layout Standard

To strike an balance between memory consumption, flexibility and performance,
 many techniques have been used.
\layout Section

Meta information
\layout Standard

Meta information can contain any additional information that will be attached
 to an individual.
 There are two typical usages here 
\layout Itemize

Info: migrator etc uses this information to store destine subpopulation
 id.
 Afterwards, sort may be used....
\layout Itemize

Tag: usually a pair of int to store parental information.
\layout Standard

The usual way to attach some info to individuals are as follows
\layout Itemize

metaId = pop.requestLongMeta(): this function will create a long meta field
 for all individual
\layout Itemize

ind.setLongMeta(metaID, value): set meta.
\layout Itemize

ind.getLongMeta(metaID): get meta value.
\layout Standard

Memory arrangement consumption:
\layout Itemize

each individual will have a pointer to its own meta structure.
 By default, meta is empty and pointer is NULL, this will occupy 4 bytes
 (for pointer.)
\layout Chapter

Extending simuPOP
\layout Standard

simuPOP can be extended easily using Python programming language.
 Because almost all data are exposed to the python interface, your ability
 of extending simuPOP is unlimited.
 However, because Python is slower than C++ and the exchange of data between
 internal C++ data structure and python interface may be costly, it is not
 recommended to write frequently used operators in python.
 Appropriate pure python operators are visualizers, statistics calculator,
 file outputers etc.
\layout Standard

To write smuPOP extension, you will have to know more data structure and
 member functions of population.
 Note that for efficiency and implementation reasons, many of the following
 functions do not provide keyword parameters.
\layout Section

Genotypic structure
\layout Standard

The genotypes of an individual are organized as a single array.
 For example, if you have an diploid individual with two chromosomes, having
 2 and 3 loci respectively.
 The genotypes should be in the order of
\layout LyX-Code

0-0-0, 1-0-0, 0-1-0, 1-1-0, 2-1-0,0-0-1, 1-0-1, 0-1-1, 1-1-1,2-1-1
\layout Standard

where X-X-X are locus-chromosome-ploidy indices.
 An important consequence of this arrangement is that 'locus location' +
 'total number of loci' is the location of the locus on the other set of
 chromosomes.
 
\layout Standard

Several functions are provided to retrieve genotypic info:
\layout Itemize


\family typewriter 
ploidy
\begin_inset LatexCommand \index{function!ploidy}

\end_inset 

()
\layout Itemize


\family typewriter 
numChrom
\begin_inset LatexCommand \index{function!numChrom}

\end_inset 

()
\layout Itemize


\family typewriter 
numLoci
\begin_inset LatexCommand \index{function!numLoci}

\end_inset 

(chrom)
\family default 
, number of loci on chromosome chrom
\layout Itemize


\family typewriter 
totNumLoci
\begin_inset LatexCommand \index{function!totNumLoci}

\end_inset 

()
\layout Itemize


\family typewriter 
genoSize
\begin_inset LatexCommand \index{function!genoSize}

\end_inset 

()
\family default 
, size of genotype.
 Equals to
\family typewriter 
 totNumLoci()*ploidy()
\layout Itemize


\family typewriter 
alleleName
\begin_inset LatexCommand \index{function!alleleName}

\end_inset 

()
\family default 
, if not specified by 
\family typewriter 
alleleNames 
\family default 
parameter when creating a population, return allele number
\layout Itemize


\family typewriter 
locusPos
\begin_inset LatexCommand \index{function!locusPos}

\end_inset 

(loc)
\family default 
, locus position on chromosome (Distance to the beginning of chromosome)
\layout Itemize


\family typewriter 
arrlociPos
\begin_inset LatexCommand \index{function!arrLociPos}

\end_inset 

()
\family default 
, return an
\family typewriter 
 carray
\family default 
 of the loci distance.
\layout Standard

The last function is very interesting.
 It actually return the reference of the internal loci distance array.
 If you change the value of the returned array, the internal loci distance
 will be changed! All functions with this property will be named 
\family typewriter 
arrFunc()
\family default 
.
\layout Standard

The following example shows how to change locus distance through this function.
\layout Standard


\begin_inset Include \verbatiminput{log/extgenostru.log}
preview false

\end_inset 


\layout Section

Accessing genotype and other info
\layout Standard

Genotype of an individual can be retrieved through the following functions
\layout Itemize


\family typewriter 
ind.allele
\begin_inset LatexCommand \index{function!allele}

\end_inset 

(index, p=0)
\layout Itemize


\family typewriter 
ind.setAllele
\begin_inset LatexCommand \index{function!setAllele}

\end_inset 

(value, index, p=0)
\layout Itemize


\family typewriter 
ind.arrGenotype
\begin_inset LatexCommand \index{function!arrAlleles}

\end_inset 

(p=0, ch=0)
\layout Standard


\family typewriter 
p 
\family default 
means ploidy.
 I.e., the index of copies of chromosomes.
 
\family typewriter 
ch 
\family default 
means chromosome.
 For example
\layout LyX-Code

pop.individual(1).arrGenotype(1, 2)
\layout Standard

returns an array of alleles on the third chromosome of the second copy of
 chromosomes, of the second individual in the population 
\family typewriter 
pop
\family default 
.
 
\layout Standard


\begin_inset Include \verbatiminput{log/extgenotype.log}
preview false

\end_inset 


\layout Standard

Sex, affected status can be accessed through 
\family typewriter 
sex, setSex, affected, setAffected 
\family default 
functions.
\begin_inset Include \verbatiminput{log/extother.log}
preview false

\end_inset 


\layout Section

Writing Pure Python Operator 
\layout Standard

Now we know how to access information for individuals in a population, but
 how can we use them in reality? Namely, how can you write an pure Python
 operator?
\layout Standard

Pure python operators are functions that return an ordinary operator, most
 likely a 
\family typewriter 
pyEval/pyExec
\family default 
.
 When defined properly, they look and act just like a usual operator.
 For example, the following function defines a 
\family typewriter 
tab
\family default 
 operator:
\layout Standard


\begin_inset Include \verbatiminput{log/tab.log}
preview false

\end_inset 


\layout Standard

It will actually return an operator
\layout LyX-Code

output(r"
\backslash 
t", rep=REP_LAST, begin=500)
\layout Standard

Anyway, most of the pure python operators uses 
\family typewriter 
pyEval
\family default 
 to access a population.
 Here is what you will generally do:
\layout Itemize

Write a function that act on a population.
 This function should be able to be called like 
\family typewriter 
func(simu.population(0)) .
 
\layout Itemize

Wrap this function as an operator.
 
\layout Standard

For example, function 
\family typewriter 
saveInFstatFormat(pop, output, outputExpr, dict) 
\family default 
saves a population in FSTAT format.
 Its defnition is (first 15 lines)
\layout Standard


\begin_inset Include \verbatiminput{log/saveInFstatFormat.log}
preview false

\end_inset 


\layout Standard

Note that
\layout Itemize

You can use this function independently like
\layout LyX-Code

saveInFstatFormat(simu.population(1),'a.txt')
\layout Itemize


\family typewriter 
pop.vars() 
\family default 
is used to evaluate 
\family typewriter 
outputExpr
\family default 
 
\layout Standard

Then you can wrap this function by an operator, actually a function that
 returns a 
\family typewriter 
pyEval 
\family default 
operator:
\layout Standard


\begin_inset Include \verbatiminput{log/saveFstat.log}
preview false

\end_inset 


\layout Standard

This function takes all parameters of an ordinary operator:
\layout LyX-Code

saveFstat(at=[-1], outputExpr=r
\begin_inset Quotes erd
\end_inset 

'a'+str(rep)+'.txt'
\begin_inset Quotes erd
\end_inset 

)
\layout Standard

and generate a 
\family typewriter 
pyEval 
\family default 
operator (use above example)
\layout LyX-Code

pyEval(exposePop=1, at=[-1], 
\layout LyX-Code

  stmts=r"""saveInFSTATFormat(pop,
\layout LyX-Code

    output='''''', outputExpr=r''' 'a'+str(rep)+'.txt' """ 
\layout LyX-Code

  )
\layout Standard

In this example,
\layout Itemize


\family typewriter 
pyEval
\family default 
 works in the local namespace of each replicate.
 To access that replicate of population, you should use the magic paramter
 
\family typewriter 
exposePop 
\family default 
of 
\family typewriter 
pyEval
\family default 
.
 When set true, 
\family typewriter 
pyEval 
\family default 
will automatically set a variable 
\family typewriter 
pop 
\family default 
in the current local namespace before any statement is executed.
 This is why we can call 
\family typewriter 
saveInFSTATFormat(
\series bold 
pop
\series default 
...)
\layout Itemize


\family typewriter 
'''a'''
\family default 
 quotes are used to avoid conflict with quotes in 
\family typewriter 
outputExpr
\family default 
 etc.
 
\layout Standard

This seems to be complicated but 
\emph on 
all
\emph default 
 pure python operators follow this pattern.
 All you need to do is actually write a function that act on one population
 (plus some copy-paste afterwards).
 
\layout Section

Ultimate extension: working in C++
\layout Standard

It is sometimes desired to write simuPOP extension in C++.
 For example,
\layout Itemize

when a pure Python operator is too slow.
\layout Itemize

when you would like to change individual structure
\layout Itemize

If some aspect of simuPOP is too limited (like the number of maximum alleles)
\layout Standard

It is not at all difficult to write simuPOP extension in C++, once you know
 how simuPOP is organized.
 The general procedure is
\layout Itemize

install the latest version of SWIG (>1,3,24), download simuPOP source 
\layout Itemize

build from source and see if your programming environment works well
\layout Itemize

to add an operator, make changes in appropriate 
\family typewriter 
.h 
\family default 
file and add an entry in 
\family typewriter 
simuPOP.i (simuPOP_common.i)
\layout Itemize

to change individual, create or derive an individual type and instantiate
 templates in 
\family typewriter 
simuPOP.i 
\family default 
using your own individual type.
 
\layout Standard

The source code is reasonably well commented with full doxygen based documentati
on.
 Please post to the simuPOP forum if you encounter any problem while writing
 operators in C++.
\layout Standard


\begin_inset LatexCommand \printindex{}

\end_inset 


\the_end
