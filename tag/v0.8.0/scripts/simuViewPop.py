#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# load and view a population, including population statistics
#
# Bo Peng (bpeng@rice.edu)
#
# $LastChangedDate: 2005-10-14 15:59:31 -0500 (Fri, 14 Oct 2005) $
# $Rev: 67 $
# 
# Usage:
#     python viewPop.py    [popFileName]
#
#
# URL Code generated by wxGlade 0.4cvs on Sun Oct 16 13:53:08 2005

import sys, os, getopt, exceptions

try:
    import wx, sys, os, wx.grid, wx.py.filling as filling
except:
    useWxPython = False
else:
    useWxPython = True

from simuPOP import *
from simuUtil import *

class VariableRootFilling(wx.SplitterWindow):
    """Filling based on wxSplitterWindow."""

    name = 'Filling'
    revision = filling.__revision__

    def __init__(self, parent, id=-1, pos=wx.DefaultPosition,
        size=wx.DefaultSize, style=wx.SP_3D,
        name='Filling Window', rootObject=None,
        rootLabel=None, rootIsNamespace=False, static=False):
        """Create a Filling instance."""
        wx.SplitterWindow.__init__(self, parent, id, pos, size, style, name)
        if rootObject == None:
            self.tree = None
        else:
            self.tree = filling.FillingTree(parent=self, rootObject=rootObject,
                                rootLabel=rootLabel,
                                rootIsNamespace=rootIsNamespace,
                                static=static)
            self.text = filling.FillingText(parent=self, static=static)
            self.SplitVertically(self.tree, self.text, 130)
            self.SetMinimumPaneSize(1)
            # Override the filling so that descriptions go to FillingText.
            self.tree.setText = self.text.SetText
            # Display the root item.
    ##        self.tree.SelectItem(self.tree.root)
            self.tree.display()

    def setRoot(self, rootObject, rootLabel):
        ''' change the root of the tree '''
        self.tree = filling.FillingTree(parent=self, rootObject=rootObject,
                                rootLabel=rootLabel,
                                rootIsNamespace=False,
                                static=False)
        self.text = filling.FillingText(parent=self, static=False)
        self.SplitVertically(self.tree, self.text, 130)
        self.SetMinimumPaneSize(1)
        # Override the filling so that descriptions go to FillingText.
        self.tree.setText = self.text.SetText
        # Display the root item.
    ##        self.tree.SelectItem(self.tree.root)
        self.tree.display()


                
class popStatDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: popStatDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.MINIMIZE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.nb_population = wx.Notebook(self, -1, style=0)
        self.panel_convert = wx.Panel(self.nb_population, -1)
        self.panel_stat = wx.ScrolledWindow(self.nb_population, -1, style=wx.TAB_TRAVERSAL)
        self.panel_genotype = wx.ScrolledWindow(self.nb_population, -1, style=wx.TAB_TRAVERSAL)
        self.sizer_loci_staticbox = wx.StaticBox(self.panel_genotype, -1, "Loci")
        self.sizer_subpop_staticbox = wx.StaticBox(self.panel_genotype, -1, "Subpopulation")
        self.sizer_indi_staticbox = wx.StaticBox(self.panel_genotype, -1, "Individuals")
        self.sizer_ancestral_staticbox = wx.StaticBox(self.panel_genotype, -1, "Ancestral")
        self.sizer_grid_label_staticbox = wx.StaticBox(self.panel_genotype, -1, "Genotype")
        self.sizer_clear_staticbox = wx.StaticBox(self.panel_stat, -1, "Clear vars")
        self.sizer_nums_staticbox = wx.StaticBox(self.panel_stat, -1, "Counts")
        self.sizer_num_alleles_staticbox = wx.StaticBox(self.panel_stat, -1, "Number of alleles")
        self.sizer_allelefreq_staticbox = wx.StaticBox(self.panel_stat, -1, "Affele freq")
        self.sizer_heterofreq_staticbox = wx.StaticBox(self.panel_stat, -1, "Hetero freq")
        self.sizer_exo_hetero_staticbox = wx.StaticBox(self.panel_stat, -1, "Exp. Hetero")
        self.sizer_homofreq_staticbox = wx.StaticBox(self.panel_stat, -1, "Homo freq")
        self.sizer_genofreq_staticbox = wx.StaticBox(self.panel_stat, -1, "Geno freq")
        self.sizer_haplofreq_staticbox = wx.StaticBox(self.panel_stat, -1, "Haplo freq")
        self.sizer_LD_staticbox = wx.StaticBox(self.panel_stat, -1, "LD")
        self.sizer_filling_staticbox = wx.StaticBox(self.panel_stat, -1, "Statistics")
        self.sizer_import_fstat_staticbox = wx.StaticBox(self.panel_convert, -1, "Import from Fstat format")
        self.sizer_fstat_staticbox = wx.StaticBox(self.panel_convert, -1, "Export to Fstat format")
        self.sizer_save_simupop_staticbox = wx.StaticBox(self.panel_convert, -1, "Save in Linkage format")
        self.sizer_linkage_staticbox = wx.StaticBox(self.panel_convert, -1, "Export to Linkage format")
        self.panel_general = wx.ScrolledWindow(self.nb_population, -1, style=wx.TAB_TRAVERSAL)
        self.txt_filename = wx.TextCtrl(self, -1, "/path/to/population")
        self.btn_LoadPop = wx.Button(self, -1, "Load")
        self.txt_popGeneralInfo = wx.TextCtrl(self.panel_general, -1, "There is no population to view. Please press \"Load\" button to browse and load a population.\n", style=wx.TE_MULTILINE|wx.HSCROLL|wx.TE_RICH)
        self.listbox_loci = wx.ListBox(self.panel_genotype, -1, choices=[], style=wx.LB_MULTIPLE|wx.LB_HSCROLL)
        self.listbox_subPop = wx.ListBox(self.panel_genotype, -1, choices=[], style=wx.LB_SINGLE|wx.LB_HSCROLL)
        self.lbl_from = wx.StaticText(self.panel_genotype, -1, "From:")
        self.txt_from = wx.TextCtrl(self.panel_genotype, -1, "0")
        self.lbl_to = wx.StaticText(self.panel_genotype, -1, "To:")
        self.txt_to = wx.TextCtrl(self.panel_genotype, -1, "0")
        self.listbox_ancestral = wx.ListBox(self.panel_genotype, -1, choices=[], style=wx.LB_SINGLE|wx.LB_HSCROLL)
        self.grid_genotype = wx.grid.Grid(self.panel_genotype, -1, size=(1, 1))
        self.cb_always_clear = wx.CheckBox(self.panel_stat, -1, "Always clear")
        self.btn_clear = wx.Button(self.panel_stat, -1, "Clear vars")
        self.cb_num_male = wx.CheckBox(self.panel_stat, -1, "num of male")
        self.cb_num_affected = wx.CheckBox(self.panel_stat, -1, "num of affected")
        self.listbox_num_allele = wx.ListBox(self.panel_stat, -1, choices=[], style=wx.LB_EXTENDED)
        self.listbox_allelefreq = wx.ListBox(self.panel_stat, -1, choices=[], style=wx.LB_EXTENDED)
        self.listbox_heterofreq = wx.ListBox(self.panel_stat, -1, choices=[], style=wx.LB_EXTENDED)
        self.listbox_exp_hetero = wx.ListBox(self.panel_stat, -1, choices=[], style=wx.LB_EXTENDED)
        self.listbox_homofreq = wx.ListBox(self.panel_stat, -1, choices=[], style=wx.LB_EXTENDED)
        self.listbox_genofreq = wx.ListBox(self.panel_stat, -1, choices=[], style=wx.LB_EXTENDED)
        self.txt_haplofreq = wx.TextCtrl(self.panel_stat, -1, "", style=wx.TE_MULTILINE)
        self.txt_LD = wx.TextCtrl(self.panel_stat, -1, "", style=wx.TE_MULTILINE)
        self.wnd_filling = VariableRootFilling(self.panel_stat, -1, rootObject=None)
        self.lbl_fstat_loci = wx.StaticText(self.panel_convert, -1, "Loci on each chromsoome")
        self.txt_fstat_chrom = wx.TextCtrl(self.panel_convert, -1, "assume one chromosome")
        self.btn_import_fstat = wx.Button(self.panel_convert, -1, "Import from fstat format")
        self.lbl_maxallele = wx.StaticText(self.panel_convert, -1, "Max allele number")
        self.txt_maxallele = wx.TextCtrl(self.panel_convert, -1, "auto")
        self.btn_export_fstat = wx.Button(self.panel_convert, -1, "Export to fstat format")
        self.rb_fileformat = wx.RadioBox(self.panel_convert, -1, "Save in format", choices=["Text (*.txt)", "Binary (*.bin)", "XML (*.xml)", "Automatic"], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
        self.btn_save_simuPOP = wx.Button(self.panel_convert, -1, "Save in simuPOP format")
        self.lal_pop_type = wx.StaticText(self.panel_convert, -1, "Population type")
        self.cb_poptype = wx.ComboBox(self.panel_convert, -1, choices=[], style=wx.CB_DROPDOWN|wx.CB_SIMPLE|wx.CB_READONLY)
        self.lbl_exclude = wx.StaticText(self.panel_convert, -1, "Exclude loci")
        self.txt_exclude = wx.TextCtrl(self.panel_convert, -1, "[]")
        self.lbl_recombination = wx.StaticText(self.panel_convert, -1, "Recombination rate")
        self.txt_recombination = wx.TextCtrl(self.panel_convert, -1, "0.00001")
        self.lbl_pre_linkage = wx.StaticText(self.panel_convert, -1, "Save in pre format")
        self.cb_pre_format = wx.CheckBox(self.panel_convert, -1, "Yes")
        self.lbl_penetrance = wx.StaticText(self.panel_convert, -1, "Penetrance ")
        self.txt_penetrtance = wx.TextCtrl(self.panel_convert, -1, "[0,0.25,0.5]")
        self.lbl_daf = wx.StaticText(self.panel_convert, -1, "Disease allele frequency")
        self.txt_daf = wx.TextCtrl(self.panel_convert, -1, "0.001")
        self.lbl_chrom = wx.StaticText(self.panel_convert, -1, "Chromosome")
        self.listbox_chrom = wx.ListBox(self.panel_convert, -1, choices=[], style=wx.LB_MULTIPLE)
        self.btn_export_linkage = wx.Button(self.panel_convert, -1, "Export o Linkage format")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnLoadPop, self.btn_LoadPop)
        self.Bind(wx.EVT_LISTBOX, self.OnGenotypeGridUpdate, self.listbox_loci)
        self.Bind(wx.EVT_LISTBOX, self.OnGenotypeGridUpdate, self.listbox_subPop)
        self.Bind(wx.EVT_TEXT, self.OnGenotypeGridUpdate, self.txt_from)
        self.Bind(wx.EVT_TEXT, self.OnGenotypeGridUpdate, self.txt_to)
        self.Bind(wx.EVT_LISTBOX, self.OnGenotypeGridUpdate, self.listbox_ancestral)
        self.Bind(wx.EVT_CHECKBOX, self.OnAlwaysClear, self.cb_always_clear)
        self.Bind(wx.EVT_BUTTON, self.OnClearVars, self.btn_clear)
        self.Bind(wx.EVT_CHECKBOX, self.OnStatNumMale, self.cb_num_male)
        self.Bind(wx.EVT_CHECKBOX, self.OnStatNumAffected, self.cb_num_affected)
        self.Bind(wx.EVT_LISTBOX, self.OnStatNumAllele, self.listbox_num_allele)
        self.Bind(wx.EVT_LISTBOX, self.OnStatAlleleFreq, self.listbox_allelefreq)
        self.Bind(wx.EVT_LISTBOX, self.OnStatHeteroFreq, self.listbox_heterofreq)
        self.Bind(wx.EVT_LISTBOX, self.OnStatExpHetero, self.listbox_exp_hetero)
        self.Bind(wx.EVT_LISTBOX, self.OnStatHomoFreq, self.listbox_homofreq)
        self.Bind(wx.EVT_LISTBOX, self.OnStatGenoFreq, self.listbox_genofreq)
        self.Bind(wx.EVT_TEXT, self.OnStatHaploFreq, self.txt_haplofreq)
        self.Bind(wx.EVT_TEXT, self.OnStatLD, self.txt_LD)
        self.Bind(wx.EVT_BUTTON, self.OnImportFstat, self.btn_import_fstat)
        self.Bind(wx.EVT_BUTTON, self.OnExportFstat, self.btn_export_fstat)
        self.Bind(wx.EVT_BUTTON, self.OnSaveSimuPOP, self.btn_save_simuPOP)
        self.Bind(wx.EVT_BUTTON, self.OnExportLinkage, self.btn_export_linkage)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnPageChange, self.nb_population)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.OnCloseDialog)
        self.pop = None 
        self.generalPageReady = False
        self.genoPageReady = False
        self.statPageReady = False
        self.convertPageReady = False

    def __set_properties(self):
        # begin wxGlade: popStatDialog.__set_properties
        self.SetTitle("View Population ")
        self.btn_LoadPop.SetToolTipString("Load a population")
        self.txt_popGeneralInfo.Enable(False)
        self.panel_general.SetScrollRate(10, 10)
        self.listbox_loci.SetMinSize((-1, 60))
        self.grid_genotype.CreateGrid(10, 3)
        self.grid_genotype.EnableEditing(0)
        self.grid_genotype.SetSelectionMode(wx.grid.Grid.wxGridSelectRows)
        self.panel_genotype.SetScrollRate(10, 10)
        self.listbox_num_allele.SetMinSize((-1,60))
        self.listbox_allelefreq.SetMinSize((-1,60))
        self.listbox_heterofreq.SetMinSize((-1,60))
        self.listbox_exp_hetero.SetMinSize((-1,60))
        self.listbox_homofreq.SetMinSize((-1,60))
        self.listbox_genofreq.SetMinSize((-1,60))
        self.txt_haplofreq.SetMinSize((-1,60))
        self.txt_LD.SetMinSize((-1,60))
        self.wnd_filling.SetMinSize((-1,300))
        self.panel_stat.SetScrollRate(10, 10)
        self.lbl_fstat_loci.SetToolTipString("Since fstat does not support multiple chromosome, you can specify number of loci on each chromosome in the form of [5,8]")
        self.lbl_maxallele.SetToolTipString("Max allele state in the population.")
        self.txt_maxallele.SetToolTipString("Auto means detect max allele from population automatically.")
        self.rb_fileformat.SetToolTipString("Save in simuPOP formats.")
        self.rb_fileformat.SetSelection(3)
        self.lal_pop_type.SetToolTipString("sibpair etc")
        self.cb_poptype.SetSelection(-1)
        self.lbl_exclude.SetToolTipString("Loci to be excluded from export. Usually DSL.")
        self.lbl_pre_linkage.SetToolTipString("The format to be fed to makeped.")
        self.cb_pre_format.SetValue(1)
        self.lbl_penetrance.SetToolTipString("Penetrance for genotype AA, Aa and aa (A is wild type)")
        self.lbl_chrom.SetToolTipString("Chromosome to save")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: popStatDialog.__do_layout
        sizer_all = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_convert = wx.FlexGridSizer(2, 2, 0, 0)
        sizer_linkage = wx.StaticBoxSizer(self.sizer_linkage_staticbox, wx.VERTICAL)
        grid_sizer_linkage_option = wx.FlexGridSizer(4, 4, 0, 0)
        sizer_save_simupop = wx.StaticBoxSizer(self.sizer_save_simupop_staticbox, wx.VERTICAL)
        sizer_fstat = wx.StaticBoxSizer(self.sizer_fstat_staticbox, wx.VERTICAL)
        sizer_fstat_sep = wx.BoxSizer(wx.HORIZONTAL)
        sizer_import_fstat = wx.StaticBoxSizer(self.sizer_import_fstat_staticbox, wx.VERTICAL)
        sizer_fstat_sep_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_stat_top = wx.BoxSizer(wx.VERTICAL)
        sizer_filling = wx.StaticBoxSizer(self.sizer_filling_staticbox, wx.HORIZONTAL)
        grid_sizer_stat = wx.GridSizer(2, 5, 0, 0)
        sizer_LD = wx.StaticBoxSizer(self.sizer_LD_staticbox, wx.HORIZONTAL)
        sizer_haplofreq = wx.StaticBoxSizer(self.sizer_haplofreq_staticbox, wx.HORIZONTAL)
        sizer_genofreq = wx.StaticBoxSizer(self.sizer_genofreq_staticbox, wx.HORIZONTAL)
        sizer_homofreq = wx.StaticBoxSizer(self.sizer_homofreq_staticbox, wx.HORIZONTAL)
        sizer_exo_hetero = wx.StaticBoxSizer(self.sizer_exo_hetero_staticbox, wx.HORIZONTAL)
        sizer_heterofreq = wx.StaticBoxSizer(self.sizer_heterofreq_staticbox, wx.HORIZONTAL)
        sizer_allelefreq = wx.StaticBoxSizer(self.sizer_allelefreq_staticbox, wx.HORIZONTAL)
        sizer_num_alleles = wx.StaticBoxSizer(self.sizer_num_alleles_staticbox, wx.HORIZONTAL)
        sizer_nums = wx.StaticBoxSizer(self.sizer_nums_staticbox, wx.VERTICAL)
        sizer_clear = wx.StaticBoxSizer(self.sizer_clear_staticbox, wx.VERTICAL)
        sizer_genoVerticle = wx.BoxSizer(wx.VERTICAL)
        sizer_grid_label = wx.StaticBoxSizer(self.sizer_grid_label_staticbox, wx.HORIZONTAL)
        sizer_genotype = wx.BoxSizer(wx.HORIZONTAL)
        sizer_ancestral = wx.StaticBoxSizer(self.sizer_ancestral_staticbox, wx.HORIZONTAL)
        sizer_indi = wx.StaticBoxSizer(self.sizer_indi_staticbox, wx.HORIZONTAL)
        grid_sizer_indi = wx.FlexGridSizer(2, 2, 0, 0)
        sizer_subpop = wx.StaticBoxSizer(self.sizer_subpop_staticbox, wx.HORIZONTAL)
        sizer_loci = wx.StaticBoxSizer(self.sizer_loci_staticbox, wx.HORIZONTAL)
        sizer_generalInfo = wx.BoxSizer(wx.VERTICAL)
        sizer_left_top = wx.BoxSizer(wx.HORIZONTAL)
        sizer_left_top.Add(self.txt_filename, 1, wx.RIGHT, 20)
        sizer_left_top.Add(self.btn_LoadPop, 0, wx.LEFT|wx.RIGHT|wx.ADJUST_MINSIZE, 5)
        sizer_all.Add(sizer_left_top, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 5)
        sizer_generalInfo.Add(self.txt_popGeneralInfo, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 2)
        self.panel_general.SetAutoLayout(True)
        self.panel_general.SetSizer(sizer_generalInfo)
        sizer_generalInfo.Fit(self.panel_general)
        sizer_generalInfo.SetSizeHints(self.panel_general)
        sizer_loci.Add(self.listbox_loci, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_genotype.Add(sizer_loci, 1, wx.ALL|wx.EXPAND, 5)
        sizer_subpop.Add(self.listbox_subPop, 1, wx.EXPAND, 0)
        sizer_genotype.Add(sizer_subpop, 1, wx.ALL|wx.EXPAND, 5)
        grid_sizer_indi.Add(self.lbl_from, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_indi.Add(self.txt_from, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_indi.Add(self.lbl_to, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_indi.Add(self.txt_to, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_indi.AddGrowableRow(0)
        grid_sizer_indi.AddGrowableRow(1)
        grid_sizer_indi.AddGrowableCol(1)
        sizer_indi.Add(grid_sizer_indi, 1, wx.ALL|wx.EXPAND, 0)
        sizer_genotype.Add(sizer_indi, 1, wx.ALL|wx.EXPAND, 5)
        sizer_ancestral.Add(self.listbox_ancestral, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_genotype.Add(sizer_ancestral, 1, wx.ALL|wx.EXPAND, 5)
        sizer_genoVerticle.Add(sizer_genotype, 0, wx.EXPAND, 0)
        sizer_grid_label.Add(self.grid_genotype, 1, wx.ALL|wx.EXPAND, 5)
        sizer_genoVerticle.Add(sizer_grid_label, 1, wx.EXPAND, 0)
        self.panel_genotype.SetAutoLayout(True)
        self.panel_genotype.SetSizer(sizer_genoVerticle)
        sizer_genoVerticle.Fit(self.panel_genotype)
        sizer_genoVerticle.SetSizeHints(self.panel_genotype)
        sizer_clear.Add(self.cb_always_clear, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        sizer_clear.Add(self.btn_clear, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_stat.Add(sizer_clear, 1, wx.EXPAND, 0)
        sizer_nums.Add(self.cb_num_male, 0, wx.ADJUST_MINSIZE, 0)
        sizer_nums.Add(self.cb_num_affected, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_stat.Add(sizer_nums, 1, wx.EXPAND, 0)
        sizer_num_alleles.Add(self.listbox_num_allele, 1, wx.ALL|wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_num_alleles, 1, wx.EXPAND, 0)
        sizer_allelefreq.Add(self.listbox_allelefreq, 1, wx.ALL|wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_allelefreq, 1, wx.EXPAND, 0)
        sizer_heterofreq.Add(self.listbox_heterofreq, 1, wx.ALL|wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_heterofreq, 1, wx.EXPAND, 0)
        sizer_exo_hetero.Add(self.listbox_exp_hetero, 1, wx.LEFT|wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_exo_hetero, 1, wx.EXPAND, 0)
        sizer_homofreq.Add(self.listbox_homofreq, 1, wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_homofreq, 1, wx.EXPAND, 0)
        sizer_genofreq.Add(self.listbox_genofreq, 1, wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_genofreq, 1, wx.EXPAND, 0)
        sizer_haplofreq.Add(self.txt_haplofreq, 1, wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_haplofreq, 1, wx.EXPAND, 0)
        sizer_LD.Add(self.txt_LD, 1, wx.EXPAND, 3)
        grid_sizer_stat.Add(sizer_LD, 1, wx.EXPAND, 0)
        sizer_stat_top.Add(grid_sizer_stat, 0, wx.EXPAND, 0)
        sizer_filling.Add(self.wnd_filling, 1, wx.EXPAND, 0)
        sizer_stat_top.Add(sizer_filling, 1, wx.EXPAND, 0)
        self.panel_stat.SetAutoLayout(True)
        self.panel_stat.SetSizer(sizer_stat_top)
        sizer_stat_top.Fit(self.panel_stat)
        sizer_stat_top.SetSizeHints(self.panel_stat)
        sizer_fstat_sep_copy.Add(self.lbl_fstat_loci, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 10)
        sizer_fstat_sep_copy.Add(self.txt_fstat_chrom, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        sizer_import_fstat.Add(sizer_fstat_sep_copy, 1, wx.EXPAND, 0)
        sizer_import_fstat.Add(self.btn_import_fstat, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 10)
        grid_sizer_convert.Add(sizer_import_fstat, 1, wx.EXPAND, 0)
        sizer_fstat_sep.Add(self.lbl_maxallele, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        sizer_fstat_sep.Add(self.txt_maxallele, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
        sizer_fstat.Add(sizer_fstat_sep, 1, wx.EXPAND, 0)
        sizer_fstat.Add(self.btn_export_fstat, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 10)
        grid_sizer_convert.Add(sizer_fstat, 1, wx.EXPAND, 0)
        sizer_save_simupop.Add(self.rb_fileformat, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        sizer_save_simupop.Add(self.btn_save_simuPOP, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 10)
        grid_sizer_convert.Add(sizer_save_simupop, 1, wx.EXPAND, 0)
        grid_sizer_linkage_option.Add(self.lal_pop_type, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.cb_poptype, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.lbl_exclude, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.txt_exclude, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_linkage_option.Add(self.lbl_recombination, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.txt_recombination, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.lbl_pre_linkage, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.cb_pre_format, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.lbl_penetrance, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.txt_penetrtance, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.lbl_daf, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.txt_daf, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.lbl_chrom, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.Add(self.listbox_chrom, 0, wx.ALIGN_BOTTOM|wx.ADJUST_MINSIZE, 5)
        grid_sizer_linkage_option.AddGrowableRow(0)
        grid_sizer_linkage_option.AddGrowableRow(1)
        grid_sizer_linkage_option.AddGrowableRow(2)
        grid_sizer_linkage_option.AddGrowableRow(3)
        grid_sizer_linkage_option.AddGrowableCol(0)
        grid_sizer_linkage_option.AddGrowableCol(1)
        grid_sizer_linkage_option.AddGrowableCol(2)
        grid_sizer_linkage_option.AddGrowableCol(3)
        sizer_linkage.Add(grid_sizer_linkage_option, 1, wx.EXPAND, 0)
        sizer_linkage.Add(self.btn_export_linkage, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 10)
        grid_sizer_convert.Add(sizer_linkage, 1, wx.EXPAND, 0)
        self.panel_convert.SetAutoLayout(True)
        self.panel_convert.SetSizer(grid_sizer_convert)
        grid_sizer_convert.Fit(self.panel_convert)
        grid_sizer_convert.SetSizeHints(self.panel_convert)
        grid_sizer_convert.AddGrowableRow(0)
        grid_sizer_convert.AddGrowableRow(1)
        grid_sizer_convert.AddGrowableCol(0)
        grid_sizer_convert.AddGrowableCol(1)
        self.nb_population.AddPage(self.panel_general, "General")
        self.nb_population.AddPage(self.panel_genotype, "Genotype")
        self.nb_population.AddPage(self.panel_stat, "Statistics")
        self.nb_population.AddPage(self.panel_convert, "Import/Export")
        sizer_all.Add(self.nb_population, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_all)
        sizer_all.Fit(self)
        sizer_all.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def LoadPop(self, popFileName):
        if popFileName != '':    # give filename
            # try to load population
            try:
                print "Loading population", popFileName
                self.pop = LoadPopulation(popFileName)
                self.popFileName = popFileName
                self.txt_filename.SetValue(popFileName)
            except:
                wx.MessageBox("Can not load file " + popFileName, "Load Population Failed", wx.OK)
                self.pop = None    
                self.popFileName = ''            
        self.setGeneralInfo()
        self.genoPageReady = False
        self.statPageReady = False
        self.convertPageReady = False
        # go to the first page, this will trigger page changing event
        self.nb_population.SetSelection(0)

    def SetPop(self, population):
        ''' set a population directly '''
        self.pop = population
        self.popFileName = 'In memory population'
        self.txt_filename.SetValue('In memory population')
        self.setGeneralInfo()
        self.genoPageReady = False
        self.statPageReady = False
        self.convertPageReady = False
        # go to the first page, this will trigger page changing event
        self.nb_population.SetSelection(0)
                
    def OnLoadPop(self, event): # wxGlade: popStatDialog.<event_handler>
        if os.path.isfile( self.txt_filename.GetValue().strip()):
            filename = self.txt_filename.GetValue().strip()
        else:
            filedlg = wx.FileDialog( self, message="Choose a population", defaultDir=os.getcwd(), 
                defaultFile="", wildcard="bin files (*.bin)|*.bin|txt files (*.txt)|*.txt|(xml files (*.xml)|*.xml", style=wx.OPEN | wx.CHANGE_DIR)
            if filedlg.ShowModal() == wx.ID_OK:
                filename = filedlg.GetPath()
            else: # cancel, do nothing
                return
        self.LoadPop(filename)
        
        
    def setGeneralInfo(self):
        if not self.pop:
            self.txt_popGeneralInfo.SetValue('Press "Load" button to load a population')
            return
        # set population info
        generalInfo = '''Ploidy number (name): %d (%s)
Population size: %d
Number of chromosome: %d
Number of loci on each chromosome: %s
Has sex chromosome: %s
Max allele state: %d
Number of subpopulations: %d 
Subpopulation sizes: %s
Number of ancestral population: %d
''' % (self.pop.ploidy(), self.pop.ploidyName(), \
            self.pop.popSize(), \
            self.pop.numChrom(), \
            ', '.join([str(self.pop.numLoci(i)) for i in range(self.pop.numChrom())] ), \
            str(self.pop.sexChrom()), \
            self.pop.maxAllele(), \
            self.pop.numSubPop(), \
            ', '.join([str(self.pop.subPopSize(i)) for i in range(self.pop.numSubPop())]), \
            self.pop.ancestralDepth() )
        generalInfo += "Locus positions on chromosome: \n"
        for ch in range(self.pop.numChrom()):
            generalInfo += "    " + ", ".join([str(self.pop.locusPos( self.pop.absLocusIndex(ch,a))) for a in range(self.pop.numLoci(ch))]) + "\n"            
        generalInfo += "Locus names: \n"
        for ch in range(self.pop.numChrom()):
            generalInfo += "    " + ", ".join([self.pop.locusName( self.pop.absLocusIndex(ch,a)) for a in range(self.pop.numLoci(ch))]) + "\n"        
        self.txt_popGeneralInfo.SetValue(generalInfo)
        self.generalPageReady = True
 
    class GridTable(wx.grid.PyGridTableBase):
        def __init__(self, pop, loci, inds):
            self.pop = pop
            self.cols = len(loci)*pop.ploidy()
            self.rows = inds[1]-inds[0]
            self.loci = loci
            self.numLoci = len(loci)
            self.indBegin = inds[0]
            self.odd = wx.grid.GridCellAttr()
            self.odd.SetBackgroundColour("light gray")
            self.even = wx.grid.GridCellAttr()
            self.even.SetBackgroundColour("light yellow")
            wx.grid.PyGridTableBase.__init__(self)

        def GetAttr(self, row, col, kind):
            attr = [self.odd, self.even][(col/self.numLoci)%2]
            attr.IncRef()
            return attr
            
        def GetRowLabelValue(self, row):
            return str(self.indBegin+row)

        def GetColLabelValue(self, col):
            p = col/self.numLoci
            idx = col - self.numLoci*p
            return self.pop.locusName(self.loci[idx]) + '/' + str(p)

        def GetNumberRows(self):
            return self.rows
            
        def GetNumberCols(self):
            return self.cols
            
        def IsEmptyCell(self, row, col):
            return False
            
        def GetValue(self, row, col):
            p = col/self.numLoci
            idx = col - self.numLoci*p
            return self.pop.individual(self.indBegin+row).allele(self.loci[idx],p)
            
        def SetValue(self, row, col, value):
            pass
    
    def setGenotypeInfo(self):
        if self.pop:
            self.listbox_loci.Set([self.pop.locusName(i) for i in range(self.pop.totNumLoci())])
            self.listbox_loci.SetSelection(0)
            self.listbox_subPop.Set(['all subpops']+["Subpop "+str(i) for i in range(self.pop.numSubPop())])
            self.listbox_subPop.SetSelection(0)
            self.txt_from.SetValue('0')
            self.txt_to.SetValue(str(min(self.pop.subPopSize(0)-1, 100)))
            self.listbox_ancestral.Set( ['current'] + \
                ['ancestral pop '+str(i) for i in range(1,self.pop.ancestralDepth()+1)])
            self.listbox_ancestral.SetSelection(0)
            self.OnGenotypeGridUpdate(None) 
        self.genoPageReady = True
    
    def OnGenotypeGridUpdate(self, event):
        # 0 means current, ....         
        if    self.listbox_ancestral.GetSelection() == -1:
            self.pop.useAncestralPop( 0 )
        else:
            self.pop.useAncestralPop( self.listbox_ancestral.GetSelection() )
        try:
            if self.listbox_subPop.GetSelection() == 0: # all
                low = min( int(self.txt_from.GetValue()), self.pop.popSize())
                high = min( int(self.txt_to.GetValue()), self.pop.popSize())
                low = max(0, low)
                high = max(0, high)
                if low > high:
                    low, high = high, low
            else: # one of the subpop
                sp = int(self.listbox_subPop.GetSelection()) - 1
                low = min( int(self.txt_from.GetValue()), self.pop.subPopSize(sp))
                high = min( int(self.txt_to.GetValue()), self.pop.subPopSize(sp))
                low = max(0, low)
                high = max(0, high)
                if low > high:
                    low, high = high, low
                low += self.pop.subPopBegin(sp) 
                high += self.pop.subPopBegin(sp)            
            self.gridTable = self.GridTable(self.pop, 
                self.listbox_loci.GetSelections(), 
                (low, high))
        except:
            pass
        else:
            # only update when everything is OK.
            self.grid_genotype.SetTable(self.gridTable, True)
            self.grid_genotype.ForceRefresh()
        
    def setStatisticsInfo(self):
        if self.pop:
            lociList = [self.pop.locusName(i) for i in range(self.pop.totNumLoci())]
            self.listbox_num_allele.Set(lociList)
            self.listbox_allelefreq.Set(lociList)
            self.listbox_heterofreq.Set(lociList)
            self.listbox_exp_hetero.Set(lociList)
            self.listbox_homofreq.Set(lociList)
            self.listbox_genofreq.Set(lociList)
            self.statPageReady = True
            self.alwaysClear = False
            self.wnd_filling.setRoot( rootObject = self.pop.vars(), rootLabel = "pop.vars()")
        self.statPageReady = True
         
    def setConvertPage(self):
        if self.pop is not None or self.pop.ancestralDepth() == 0: # no ancestral population
            self.btn_export_linkage.Disable()
        else:
            self.btn_export_linkage.Enable()
            self.cb_poptype.Append('sibpair', 0)
            self.listbox_chrom.Set(['chrom '+str(i) for i in range(self.pop.numChrom())])
            self.listbox_chrom.SetSelection(0)
        self.convertPageReady = True
        
        
    def OnCloseDialog(self, e):
        self.Destroy()
        
    def OnPageChange(self, event): # wxGlade: popStatDialog.<event_handler>
        sel = event.GetSelection()
        if sel == 0 and not self.generalPageReady:
            self.setGeneralInfo()
        elif sel == 1 and not self.genoPageReady:
            self.setGenotypeInfo()
        elif sel == 2 and not self.statPageReady:
            self.setStatisticsInfo()
        elif sel == 3 and not self.convertPageReady:
            self.setConvertPage()

    def OnSaveSimuPOP(self, event): # wxGlade: popStatDialog.<event_handler>
        filedlg = wx.FileDialog( self, message="Save a population", defaultDir=os.getcwd(), 
            defaultFile="output.bin", wildcard="bin files (*.bin)|*.bin|txt files (*.txt)|*.txt|(xml files (*.xml)|*.xml", 
            style=wx.SAVE | wx.CHANGE_DIR)
        if filedlg.ShowModal() == wx.ID_OK:
            filename = filedlg.GetPath()
            try:
                # first get file format
                if self.rb_fileformat.GetSelection() == 0:
                    if len(filename) < 4 or filename[-4:] != '.txt':
                        filename += ".txt"
                elif self.rb_fileformat.GetSelection() == 1:
                    if len(filename) < 4 or filename[-4:] != '.bin':
                        filename += ".bin"
                elif self.rb_fileformat.GetSelection() == 0:
                    if len(filename) < 4 or filename[-4:] != '.xml':
                        filename += ".xml"
                else: # auto
                    if len(filename) < 4 or filename[-4:] not in ['.txt', '.bin', '.xml']:
                        print "File extension is invalid. Please use .txt, .bin or .xml"
                        raise 
                # if everything is OK.
                SavePopulation(self.pop, filename)
            except e:
                print e.message()
                print "Can not save to file ", filename        
                     
    def OnImportFstat(self, event): # wxGlade: popStatDialog.<event_handler>
        filedlg = wx.FileDialog( self, message="Import a population", defaultDir=os.getcwd(), 
            defaultFile="", wildcard="dat files (*.dat)|*.dat", 
            style=wx.OPEN | wx.CHANGE_DIR)
        if filedlg.ShowModal() == wx.ID_OK:
            filename = filedlg.GetPath()
            try:
                loci = eval(self.txt_fstat_chrom.GetValue())                
                print "Using loci = ", loci
                if type(loci) != type([]):
                    raise
            except exceptions.Exception, e:    # the auto will be forced to 0
                # print e
                loci = []
            try:
                self.pop = LoadFstat(filename, loci=loci)
                self.popFileName = filename
                self.txt_filename.SetValue(filename)
            except exceptions.Exception, e:
                print e
                wx.MessageBox("Can not load file " + filename, "Import Population Failed", wx.OK)
            self.setGeneralInfo()
            self.genoPageReady = False
            self.statPageReady = False
            self.convertPageReady = False
            # go to the first page, this will trigger page changing event
            self.nb_population.SetSelection(0)

    def OnExportFstat(self, event): # wxGlade: popStatDialog.<event_handler>
        filedlg = wx.FileDialog( self, message="Export a population", defaultDir=os.getcwd(), 
            defaultFile="output.dat", wildcard="dat files (*.dat)", 
            style=wx.SAVE | wx.CHANGE_DIR)
        if filedlg.ShowModal() == wx.ID_OK:
            filename = filedlg.GetPath()
            try:
                ma = int(self.txt_maxallele.GetValue())                
            except:    # the auto will be forced to 0
                ma = 0
            try:
                SaveFstat(self.pop, filename, maxAllele = ma)
            except e:
                print e
                print "Can not export to Fstat file ", filename     

    def OnExportLinkage(self, event): # wxGlade: popStatDialog.<event_handler>
        filedlg = wx.FileDialog( self, message="Export a population", defaultDir=os.getcwd(), 
            defaultFile="output", wildcard="*", 
            style=wx.SAVE | wx.CHANGE_DIR)
        if filedlg.ShowModal() == wx.ID_OK:
            filename = filedlg.GetPath()
            try:
                SaveLinkage(self.pop, popType = self.cb_poptype.GetValue(), 
                    output=filename, recombination= float(self.txt_recombination.GetValue()),
                    penetrance = eval( self.txt_penetrtance.GetValue()), 
                    chrom = self.listbox_chrom.GetSelections(), 
                    exclude = eval( self.txt_exclude.GetValue()),
                    pre = self.cb_pre_format.IsChecked(),
                    daf = float( self.txt_daf.GetValue()))
            except exceptions.Exception, e:
                print e
                print "Can not save in linkage format"
        

    def OnStatNumMale(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, numOfMale=True)
        self.wnd_filling.tree.display()

    def OnStatNumAffected(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, numOfAffected=True)
        self.wnd_filling.tree.display()

    def OnStatNumAllele(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, numOfAlleles=self.listbox_num_allele.GetSelections() )
        self.wnd_filling.tree.display()

    def OnStatAlleleFreq(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, alleleFreq=self.listbox_allelefreq.GetSelections() )
        self.wnd_filling.tree.display()

    def OnStatHeteroFreq(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, heteroFreq=self.listbox_heterofreq.GetSelections() )
        self.wnd_filling.tree.display()

    def OnStatExpHetero(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, expHetero=self.listbox_exp_hetero.GetSelections() )
        self.wnd_filling.tree.display()

    def OnStatHomoFreq(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, homoFreq=self.listbox_homofreq.GetSelections() )
        self.wnd_filling.tree.display()

    def OnStatGenoFreq(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        Stat(self.pop, genoFreq=self.listbox_genofreq.GetSelections() )
        self.wnd_filling.tree.display()

    def OnStatHaploFreq(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        try:
            para = eval( '['+','.join(self.txt_haplofreq.GetValue().splitlines())+']')
        except:
            return
        else:
            if type(para) != type([]):
                return
        Stat(self.pop, haploFreq= eval( '['+','.join(self.txt_haplofreq.GetValue().splitlines())+']'))
        self.wnd_filling.tree.display()

    def OnStatLD(self, event): # wxGlade: popStatDialog.<event_handler>
        if self.alwaysClear:
            self.pop.dvars().clear()
        try:
            para = eval( '['+','.join(self.txt_LD.GetValue().splitlines())+']')
        except:
            return
        else:
            if type(para) != type([]):
                return
        Stat(self.pop, LD = para)
        self.wnd_filling.tree.display()

    def OnClearVars(self, event):
        if self.alwaysClear:
            self.pop.dvars().clear()
        self.pop.dvars().clear()
        self.wnd_filling.tree.display()

    def OnAlwaysClear(self, event):
        if event.IsChecked():
            self.alwaysClear = True
        else:
            self.alwaysClear = False
# end of class popStatDialog


class viewPopApp(wx.App):
    def __init__(self, population=None, popFileName='', *args, **kwds):
        self.popFileName = popFileName
        self.population = population
        wx.App.__init__(self, *args, **kwds)
        
    def OnInit(self):
        wx.InitAllImageHandlers()
        viewPopDlg = popStatDialog(None, -1, "")
        self.SetTopWindow(viewPopDlg)
        viewPopDlg.Show()
        if self.population is not None:
            viewPopDlg.SetPop(self.population)
        elif self.popFileName != '':
            viewPopDlg.LoadPop(self.popFileName)
        return 1

def viewPop(pop=None, filename=''):
    if useWxPython:
        app = viewPopApp(population = pop, popFileName=filename)
        app.MainLoop()
    else:
        if pop is not None:
            Dump(pop)
        elif filename != '':
            try:
                pop = LoadPopulation(filename)
                Dump(pop)
            except:
                print "File ", filename, " can not be loaded."
        else:
            print "WxPython is not available."

# end of class viewPopApp

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "n", ["noWxPython"])
    except getopt.GetoptError:
        # print help information and exit:
        print "simuViewPop [--noWxPython|-n] [filename]"
        sys.exit(1)
    for o, a in opts:
        if o in ("-n", "--noWxPython"):
            useWxPython = False
    if len(args) > 0:     # viewPop filename
        viewPop(filename=args[0])
    else:
        viewPop()
