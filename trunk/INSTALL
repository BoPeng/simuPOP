simuPOP installation guide
============================

Compiled libraries for Linux, windows XP, Solaris and MacOSX are provided.
In most cases, you will only need to download simuPOP and follow the usual
installation process of your platform. This file shows you how to install
simuPOP binaries and other recommended Python components; and how to build
simuPOP from source if 
  1. you need to compile the MPI (message passing interface) version of the
     modules, or
  2. you are using a unsupported OS (e.g. mac/intel), or
  3. you would like to compile simuPOP using intel C++ for 20% or more
     performance boost.


A complete simuPOP environment is consist of the following:

Required
---------

1. Python   simuPOP is provided as python modules so a working python is 
            required.
2. simuPOP  the simuPOP modules            


Optional
---------
1. R         R statistical computing environment, for plotting and 
             statistical analysis
2. RPy       Python module that provides link between R and Python
3. wxPython  simuPOP can use wxPython instead of Tkinter if wxPython
             is available. Some functions can also use wxPython. The most
             common one is ListVars()


Installing Python
==================

simuPOP works as a python library so a working version of python is 
required. Python is widely available on Linux/Mac systems but not for
windows. For windows system, you can use 

  - Official python  http://www.python.org, or
  - ActiveState python  http://www.activestate.com/Products/ActivePython/ 

To test if you have python installed, open a terminal (or command window) 
and type in the command

  > python


Installing simuPOP (binary)
============================

Download the latest simuPOP binary that matches your python distribution. 
For example, if you have enthough Python 2.3.3 installed, you should 
download simupop-x.x.x-py23-win32.exe. The installation procedure is
platform dependent and should be familiar to you. 


Windows/ .exe
--------------

Double click the downloaded .exe file, follow the instructions. SimuPOP
libraries will be installed to the Python site-packages directory. 

If there is error message like 'zlib1.dll' not found. Download official zlib
dll from www.zlib.org and put zlib1.dll to c:\python2x\Libs\site-packages,
or somewhere in $PATH.


Linux, MacOSX, Solaris / .tar.gz
---------------------------------

Unpack the file with

  > tar -zxf simuPOP-XXX.tar.gz 

then copy files to appripriate places or set PYTHONPATH.


Linux / .rpm
-------------

Install with command

  > rpm -ihv simuPOP-XXX.rpm



Installing R/RPy
================

windows users
-------------

Install R, and then Rpy using the windows installers. 

Linux users
------------

You first need to check if R is available as shared libraries (existence of libR.so).
if R or libR is not available, you should install it from rpm, or build R by yourself.
The procedure is:

  - download the latest R source code
  - unpack, for example,
    > tar zxf R-2.1.0.tar.gz
  - build R with --enable-R-shlib
    > cd R-2.1.0
    > ./configure --prefix=/usr --enable-R-shlib
    > make; make install

  NOTE: if you go not have administrative previlege, use can install R locally
  by using ./configure --prefix=/home/username/R ...

Then, you can build Rpy by  

  - download the latest Rpy source code
  - unpack, for example 
    > tar zxf rpy-0.4.1.tar.gz
  - build rpy
    > cd rpy-0.4.1
    > python setup.py install


Installing wxPython
====================

There are detailed instructions at wxPython homepage.



Build simuPOP from Source
==========================

simuPOP has a MPI version that can spread populations over a cluster and simulate
huge genome like what is used in genome-wide association studies. No binary is 
provided since there are many different implementations of MPI. You will have to 
compile by yourself if want to use simuPOP/MPI.

Another good reason to compile simuPOP by yourself is performance. For example, 
simuPOP built with intel C++ compiler (icc) usually runs 20% to 30% faster than 
g++ compiled ones. Since intel C++ for linux is free for non-commercial users, using
intel C++ is a good choice on linux systems.


NOTE:
  If you only need to compile simuPOP, you do not need to install
  SWIG. If you have modified simuPOP source code, you will have to 
  install SWIG to generate wrap files for your new code.


Preparation for all systems (except for win32)
----------------------------------------------

simuPOP makes heavy use of GSL (GNU Scientific Library) and Boost (>=1.33.1 
for 0.7.5 plus Boost.MPI for MPI modules). Part of GSL is embedded in simuPOP
but you will need to install boost by yourself. Please follow the building 
instruction closely and make boost library available (www.boost.org). It is 
important that you build boost libraries with -fPIC flag so that they can be
linked with simuPOP to generate shared libraries. The command line is likely
to be:

  > bjam -j4 --prefix=/usr "-sBUILD=debug release <cxxflags>-fPIC" "-sTOOLS=gcc" install

Under windows, you command line would be something like (using mingw)
 > bjam -j4 "-sBUILD=debug release <cxxflags>-fPIC" "-sTOOLS=mingw" \
     -sNO_COMPRESSION=0 -sNO_BZIP2=1 -sNO_ZLIB=0 -sZLIB_INCLUDE=c:/zlib/include \
	 -sZLIB_LIBPATH=c:/zlib/lib -sZLIB_BINARY=zdll install 
because compression is disabled by default under windows. Note that this bjam has
to be compiled using mingw/gcc, and if build/jam_src/build.sh reports errors,
run dos2unix on it.

As of Dec, 2006, I am using the cvs version of boost since Boost.MPI uses newest 
features of the serialization library only available in cvs. If you install
boost locally or to a non-standard location, you will need to use --include-dirs
and --library-dirs options of setup.py, for example,

  > python setup.py build_ext --include-dirs=/usr/local/include/boost_1-35 \
      --library-dirs=/usr/local/lib install

I did the following to build Boost.MPI,
  1. download Boost.MPI, it is not part of boost yet
  2. uncompress to the boost/cvs directory
  3. strange, need to 
    > setenv BOOST_BUILD_PATH /path/to/boost/tools/build/v1
  4. then, go to libs/parallel/build and run
    > ../../../bjam -j4 --prefix=/usr "-sBUILD=debug release <cxxflags>-fPIC" "-sTOOLSET=gcc" install
  5. copy the header files.
    > cp -r boost/parallel/ /usr/include/boost-1_35/boost/


This is for the re-compiled (with --enable-shared) LAM/MPI 7.0.6


 

Windows system using mingw (without cygwin)
-------------------------------------------

The problem with cygwin is that it has its own gcc, zlib and boost and it is tricky
to not use them. Using a system without cygwin, you can

  1. download mingw.exe, choose g++ and install, add c:/mingw/bin to $PATH
  
  2. download zlib, unpack to c:\zlib
  
  3. download boost, unpack to c:\boost\boost-1_33_1, you do not have to build
	it since I put several libs under win32 directory. You can also try to 
	build the libraries by yourself, but, trust me, it is not easy. (Google
	by posts to boost user list titled 'Linking to boost::iostreams, furstrated').

	If you boost or mingw have ever fixed the problems,  you should be able to
    > cd \boost\boost-1_33_1\tools\build\jam_src
	> build.bat
	copy bjam.exe to c:\boost\boost-1_33_1,
	> cd \boost\boost-1_33_1
	> bjam.exe -j4 "-sBUILD=debug release <cxxflags>-fPIC" "-sTOOLS=mingw" \
     -sNO_COMPRESSION=0 -sNO_BZIP2=1 -sNO_ZLIB=0 -sZLIB_INCLUDE=c:/zlib/include \
	 -sZLIB_LIBRARY=c:/zlib/lib -sZLIB_BINARY=zdll --prefix=c:/boost \
	 --with-iostreams --with-serialization install
	
  4. download python, install to c:\python24, add c:\python24 to $PATH
  
  5. download and unpack simuPOP source to c:\simuPOP

  6. if needed, download swig, unpack to c:\swigwin and add c:\swigwin to $PATH

  7. from the simuPOP directory, do
     > python setup.py build_ext --include-dirs=c:\boost\boost_1_33_1 \
		bdist_wininst
	setup.py looks in the win32 directory for boost and zlib libraries. If you 
	would like to link to your versions of them, remove this directory and add
	  --library-dirs
	option to point to your libraries.
	

NOTE: for python2.4, you can get error saying 
    import error: DSLL load failed: The specified procedure could not be found
  This is because of a compatibility problem of mingw32/msvcrt and msv/msvcrt71. 
  please see http://jove.prohosting.com/iwave/ipython/issues.html for details. 
  My fix is go to python24/Lib/distutils/cygwinccompiler.py, at line 139, change
    self.dll_libraries = [] 
  to
    self.dll_libraries = ['msvcrt', 'python' + ''.join(sys.winver.split('.'))]
  and comment out the following if/else block. This will force simuPOP to use 
  msvcrt, not msvcrt70 or msvcrt71 with msvc.

NOTE AGAIN: I have used a ugly trick in simuPOP_common.i to avoid this problem.
This might be the reason why simuPOP i/o does not work....
  

Windows using VC++ .NET 2003
----------------------------

  1. Find a copy of VC++ 2003 and install. This is the version used to 
     compile python and is the version VC uses.

  2. download boost 1.33.1 and unpack to c:\boost

  3. in vc command prompt windows,
    > python setup.py build_ext --include-dirs=c:\boost\boost_1_33_1 bdist_wininst

NOTE: this process is *not* easy for me since I spent *a lot* of time builing
boost libraries and put them under win32 directory.
  

Linux-Solaris-MacOSX System
-----------------------------


  1. download and unpack simuPOP source, goto simuPOP-XXX directory
 
  2. Run
     > python setup.py build

  3. create binary library distribution with 
      > python setup.py bdist --formats=rpm
    or
      > python setup.py bdist --formats=gztar
    or install simuPOP directly
      > python setup.py install
  
  You might need to use 
    > sudo python setup.py install
  to install. If you do not have root priviledge,
    > python setup.py install --home=/path/to/simuPOP
  and then set PYTHONPATH to where simuPOP locates.
  
  Note that you may need to use command like
    > python setup.py config --include-dirs=/usr/include/linux install
  if zlib.h is not in standard directories.



Linux using intel C++
---------------------

Because Python has to be compiled with the same compiler as simuPOP, you will
have to build python by yourself as well. I assume that you do not want to 
override system python, so here is what you need to do

  1. download intel C++ compiler (linux, non-commercial version) and install.
     icc can be installed locally. Note that for 64bit systems, the bin directory
     is intel/cce/xxx/bin, not intel/cc/xxx/bin. Make sure you source file
     intel/cce/xxx/bin/ccvars.xxx for the shell you use.
  2. download python source. Run, for example,
     > tar zxf Python-2.4.3.tgz
     > cd Python-2.4.3
     > setenv CC icc (for csh)
     > setenv CXX icpc (for csh)
     > ./configure --with-cxx=icpc --prefix=/home/username/Python24
     > make
     > make install
  3. build and install simuPOP
     > cd simuPOP
     > /home/username/Python24/bin/python setup.py install
     simuPOP modules will be put under /home/username/Python24/lib(or lib64)/site-packages,


Building the MPI version of simuPOP
-----------------------------------

NOTE: I have have access to LAM/MPI, openMPI and HP/MPI under linux system. The setup.py 
is created with this limitation. If setup.py does not work for your particular MPI 
implementation, please modify this script and send me a patch.

  1. do 'module load mpi' or whatever appropriate to make mpiCC available.
  2. run 'python setup.py build' as usual, with fingers crossed.

Potential Problem: HP/MPI
-------------------------
Using a version of HP/MPI, there is no libmpiCC.so and the version of libmpiCC.a is
not compiled with -fPIC flag. You will get a link error like: 

/usr/bin/ld: /opt/hpmpi/lib/linux_amd64/libmpiCC.a(mpicxx.o): relocation R_X86_64_32 against `__dso_handle' can not be used when making a shared object; recompile with -fPIC
/opt/hpmpi/lib/linux_amd64/libmpiCC.a: could not read symbols: Bad value
collect2: ld returned 1 exit status
error: command 'c++' failed with exit status 1

Solution:
---------
  1. go to /path/to/hpmpi/arch/lib and copy a directory named mpiCCsrc to your
     local directory. If you can not find this directory, send an email to your 
     system admin and ask for it. There should be Makefile, mpicxx.cc and 
     intercepts.cc under this directory.
  2. change the last line of Makefile to (add -fPIC)
        $(CXX) -fPIC -c $< -I$(MPI_ROOT)/include -DHPMP_BUILD_CXXBINDING
  3. run make and get a local version of libmpiCC.a
  4. copy libmpiCC.a to directory 'build' under the simuPOP directory, if this 
     directory does not exist, create one.
  5. run python setup.py as usual, since -Lbuild is before -L/path/to/hpmpi, 
     build/libmpiCC.a will be used instead of the system one.

Note: setup.py accepts parameters like --library-dirs=/home/username/mpiCC but 
-L/home/username/mpiCC is put after system -L options during linking. This is 
why we need to put libmpiCC.a into simuPOP/build.


Potential Problem: LAM/MPI
--------------------------
The same sympton as HP/MPI. liblammpi++.a is not compiled with -fPIC.


Solution:
---------
Since there is no shared libraries provided by default, you have to build LAM from 
scratch, or at least override some system libraries,
  1. Get LAM/MPI source. Redhat/RHEL4 does not provide the source code for its
     lam package. If you plan to override system LAM package, get the latest 
     version (7.1.2), otherwise, get a version that matches your system LAM version.
  2. run 
        $ ./configure --enable-shared --prefix=/usr
        $ make 
     from the top source directory.
  3. If you have root privilege, clear /usr/lib (and lib64)/libmpi* liblam*, run
        $ make install
     to override your existing LAM installation. Otherwise, copy
       share/mpi/.libs/libmpi.a
       share/mpi/.libs/liblam.a
       share/mpi/cxx/.libs/liblammpi++.a
     to simuPOP/build. These libraries will override system libraries. 
  4. run
        $ python setup.py install 
     as usual. For new installations, command ldconfig may be needed to
     setup path to LAM/MPI libraries.


Potential Problem: Other MPI
----------------------------
MPI module is not built, because mpiCC is not found, or 'mpiCC -show' or 
'mpiCC -showme' does not work.

Solution:
---------
setup.py runs 'mpiCC -show', and if failed, 'mpiCC -showme' to get the compiler flags of 
mpiCC. Check the correct syntax for your mpi distribution and modify setup.py.


Additional remarks
-------------------

  1. There is a scons based build system under src. This is recommended for 
     simuPOP development since 'python setup.py' compiles all modules sequentially.
     Using scons, you can use 'scons -j4 laop install' to recompile only the laop
     module using 4 threads. Note that the SConstruct file is tailored for my own
     developing environment and you may need to change some of the settings.


test simuPOP
------------

After installation, you can test simuPOP and other components by

  > Python
  .......
  >>> import simuPOP
  >>> import wx
  >>> import rpy
  >>> rpy.r.plot(1)
  >>> execfile('/usr/share/simuPOP/scripts/simuLDDecay.py')

Note that the path is platform dependent.



