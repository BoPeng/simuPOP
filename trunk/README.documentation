This README describes how the document of simuPOP is organized and
distributed. The whole ideas are that
    - Documents are organized around their definitions, e.g. in source code
	  for C++ functions and classes, in Python docstring for Python
	  modules.
	- Documents are extracted and converted to PDF and HTML formats.
	- Examples are generated dynamically to make it easy to change
	  examples, accomendate changes of simuPOP and check for errors.


Examples in the user's guide
-----------------------------

Examples in the user's guide are all in file doc/userGuide.py. They are
separated by directives such as

#begin_file log/standard.py

#end_file

To generate source code and their log files (output as if they are executed
in an interactive Python session), you can run

    > cd doc
    > ./runSampleScript.py userGuide.py

runSampleScript.py will execute userGuide.py as if the examples are
inputted from a Python interactive shell. The examples will be written to
files such as log/standard.py and the output will be written to files such
as log/standard.log. The log files, sometimes the the .py files, are
inserted into log/userGuide.lyx, and are converted to .PDF or .html format.
Pieces of code that are included between #begin_ignore and #end_ignore will
be will be executed but not saved to output files. If there is any error
in the code, runSampleScript will stop and display the errors, unless a
directive #expect_error is included between #begin_file and #end_file,
indicating that the example is designed to generate some error.

The output files (log/*.py, log/*.log and sometimes log/*.png) are included
in doc/userGuide.lyx to generate both PDF and HTML versions of the simuPOP
user's guide.



Documentation of core simuPOP classes and functions (C++ level)
---------------------------------------------------------------

In order to reduce the workload to maintain different versions of
documentation, all documents are in the source code, together with
corresponding function and class definitions. The documentation is written
in a format that is recognizable by 'doxygen', a document generator. For
example, instead of using /* this is a C++ comment. */, user documentation
is written as /** this is documentation. */. Special format directives such
as \e (emph) and \c (fixed font) are used. \e is used for parameter name
and \c is used for functions.

The C++ level documentation is converted to XML format using command

    > doxygen

The XML format of the documentation is read by a script and is written to
different formats. By executing

    > tools/doxy2swig

You will get the following files:

    1. src/simuPOP_doc.i
	   This is a SWIG interface file with Python docstring for all C++
	   level classes and functions. This file will be included by
	   src/simuPOP_common.i to generate docstrings, which could be assessed
	   by functions such as

	       >>> help(Population)
	
	2. doc/simuPOP_doc.tex
	   This is a latex file with many definitions such as
	   \loadPopulationRef. This file is included and used by
	   doc/refManual.lyx to generate PDF documentations.

	3. doc/build/*.ref
	   These are function and class references in reStructuredText format.
	   They are used by Sphinix to generate online HTML documentation.


Documentation of Python modules
-------------------------------

Functions and classes in simuPOP utility modules are written in
reStructuredText format. This format is more or less human readable and is
becoming the recommended format for Python modules.

Script doc/doxy2swig also scans Python modules and simuPOP interface file.
The results are converted to doc/simuPOP_doc.tex and doc/build/*.ref for
the generation of PDF and HTML documentations. Note that doc/doxy2swig
reads 'live' documents of simuPOP so you may need to run the whole process
twice to get the correct documentation becase of the chicken-egg problem
of documents.


Generation of PDF documents
----------------------------

The PDF documents are prepared by LaTeX using a document processor LyX. You
will have to install lyx from http://www.lyx.org to view these files
(doc/userGuide.lyx and doc/refManual.lyx). These lyx files includes files
doc/simuPOP_doc.tex and many files under doc/log, which has to be prepared
as instructed before. If everything is ready, you could simply generate PDF
version of the documents by running commands

    > cd doc
	> make pdf

which calls lyx to convert .lyx to .pdf files.


Generation of HTML documents
-----------------------------

simuPOP uses a converter to convert latex documents to reStructuredText and
use Sphinx (sphinx.pocoo.org) to convert reStructuredText to HTML. The
converter could be checked out from svn.python.org but you will have to
customize this conversion tool using a patch as follows:

    > cd doc
    > svn co -r 76658 \
        http://svn.python.org/projects/doctools/converter/converter converter
    > cd converter
    > patch -p0 < ../converter_patch.diff

Using Python 2.6, you could generate HTML documents using
    > make html

I have also added two other commands
    > make dist_svn
    > make dist_release  # for release

so that you can upload the subversion or release version of the HTML
documents to appropriate directories under http://simupop.sourceforge.net.
PDF versions of the documents should be checked in to the subversion
repository, and distributed with a simuPOP release.

NOTE: public key could be set up through sourceforge.net/account/services
so that you do not have to enter password each time. This service is
provided in the account service page of sourceforge.net (currently
https://sourceforge.net/account/services with a valid user account).


