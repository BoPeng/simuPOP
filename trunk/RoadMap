RoadMap of simuPOP

Towards simuPOP 1.0     - Roadmaps  Marked by Easy 1 --- difficult 9. Workload 1 - 9

* With high priority

Roadmap: test and documentation:
 *2/2 Use doctest module to test if test cases are generating the same output
  3/8 document each class whether or not they are suitable only for diploid population.
  3/7 sample script and precise description for each class, put it in online help
  4/9 comprehensive testing scripts
  3/8 check help contents in C++ source code. 
  5/2 online help is not complete. Need re-write or fix the processing scripts.
  1/4 Proofread simuPOP user's guide and reference manual

Roadmap: scripts:
  2/1 add a few population conversion, sampling scripts in scripts directory.
      For example, a script that can load some formats and save to others, and
      another script to sample from them.
  3/2 add mutation etc to simuLDDecay.py (use useRpy and print figure. Genrate html report...)
  5/6 add models from population genetics book
  7/7 write simuEasyPop
  2/1 (DONE) add things like listbox to tkGetParam function. Use wxPython when possible

Roadmap: simuPOP core
 *1/1 Sampling now copy populations and result in high RAM demand
  5/5 aged population
  8/8 overlapped generations and continuous time reproduction. (mating in aged populations.)
  3/2 sex-difference recombination rate.
  6/4 add other mating scheme. (Folowing easyPOP)
  6/7 study and improve support for non-diploid individuals.
  5/5 profile simuPOP and imporve efficiency (this is *always* needed for a simulation program like simuPOP)

Roadmap: simuUtil
  3/2 investigate the potential of python image module. See if it is easy to install and support
  2/1 change layout of simuRPy/varPlotter/image 
  1/1 (PARTLY DONE) add migration models functions like stepstone, 2d stepstone etc. (Return 
      a matrix with given rate and type. Update reference manual accordingly
  1/1 (DONE) add population size change function support like linear growth, exponential growth.
      Basically simple nested functions. Update reference manual accordingly
  1/1 add a set of popular penetrance functions. It may be better to let user write their own
      function though, since these functions are easy to write but hard to memorize and document.
  2/2 save linkage of any pedigree. This is very troublesome considering the potentially very 
      complicated pedigrees.
  2/2 save and load other popular formats. 
  1/1 (DONE) add wxPython version of listVars()

Roadmap: A real GUI other than the tk-based simple parameter dialog
  9/9 wxPython or Tkinter? wxPython may be better for this large GUI project
  5/5 GUI independent description for each class.
  8/4 Visualization of active gens of objects.... 
  7/4 Interactively change population, split, merge etc through menu
  7/4 Expression writer, debugger
  7/5 Start/stop for easy debugging
  8/4 outout and load simuPOP script
 
 
