#LyX 1.4.2svn created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass manual
\begin_preamble
\floatname{algorithm}{Example}

\renewcommand{\py@ptsize}{12pt}

\setreleaseinfo{Release 0.7.0 (\mbox{$$Rev$$})}
\authoraddress{
{\bf Department of Statistics, Rice University}\\
{\bf Email: }{\textsf bpeng@rice.edu}\\
{\bf URL: }{\textsf http://simupop.sourceforge.net} \\
{\bf Mailing List: }{\textsf simupop-list@lists.sourceforge.net}
}
\author{Bo Peng}
\date{December 2004\\
\hfill{}\\
Last modified \\
\today }

\ifhtml
\chapter*{Front Matter\label{front}}
\fi
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\float_placement h
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
simuPOP Reference Manual
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100col%"
special "none"
height "1pt"
height_special "totalheight"
status collapsed

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
hspace{1cm}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
vspace{5in}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

{
\backslash
large
\backslash
textsf Acknowledgements: }
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
vspace{.2cm}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Dr.
 Marek Kimmel
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Dr.
 Fran
\backslash
c cois Balloux
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Dr.
 William Amos
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} SWIG user community
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Python user community 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Keck Center for Computational and Structural Biology
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{.7in} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

 
\backslash
copyright{} 
\end_layout

\end_inset

 2004-2006 Bo Peng 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{.3cm} 
\backslash
hrule 
\backslash
vspace{0.1cm} 
\end_layout

\end_inset

Permission is granted to make and distribute verbatim copies of this manual
 provided the copyright notice and this permission notice are preserved
 on all copies.
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that the
 sections entitled Copying and GNU General Public License are included exactly
 as in the original, and provided that the entire resulting derived work
 is distributed under the terms of a permission notice identical to this
 one.
 Permission is granted to copy and distribute translations of this manual
 into another language, under the above conditions for modified versions,
 except that this permission notice may be stated in a translation approved
 by the Free Software Foundation.
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
simuPOP is a forward-time population genetics simulation environment.
 Unlike coalescent-based programs, simuPOP evolves populations forward in
 time, subject to arbitrary number of genetic and environmental forces such
 as mutation, recombination, migration and population/subpopulation size
 changes.
 Statistics of populations can be calculated and visualized dynamically
 which makes simuPOP an ideal tool to demonstrate population genetics models;
 generate datasets under various evolutionary settings, and more importantly,
 study complex evolutionary processes and evaluate gene mapping methods.
\end_layout

\begin_layout Abstract
The core of simuPOP is a scripting language (Python) that provides a large
 number of building blocks (populations, mating schemes, various genetic
 forces in the form of operators, simulators and gene mapping methods) to
 construct a simulation.
 This provides a R/Splus or Matlab-like environment where users can interactivel
y create, manipulate and evolve populations, monitor and visualize population
 statistics and apply gene mapping methods.
 The full power of simuPOP and Python (even R) can be utilized to simulate
 arbitrarily complex evolutionary scenarios.
\end_layout

\begin_layout Abstract
simuPOP is written in C++ and is provided as Python modules.
 Besides a front-end providing an interactive shell and a scripting language,
 Python is used extensively to pass dynamic parameters, calculate complex
 statistics and write operators.
 Because of the openness of simuPOP and Python, users can make use of a
 wide variety of tools (Splus/R, Python/SciPy, MatPlotLib etc.) to perform
 tasks like statistical analysis, gene mapping and visualization.
 Depend on machine configuration, simuPOP can simulate large (think in millions)
 populations at reasonable speed.
\end_layout

\begin_layout Abstract
This is a reference manual to all variables, functions, and operators.
 This should be read after you learned the structure of simuPOP and how
 to write a simuPOP script from the 
\emph on
simuPOP user's guide.
\end_layout

\begin_layout Abstract

\series bold
How to cite simuPOP: 
\end_layout

\begin_deeper
\begin_layout Quote
Bo Peng and Marek Kimmel (2005) simuPOP: a forward-time population genetics
 simulation environment.

\emph on
 bioinformatics
\emph default
, 
\series bold
21
\series default
(18): 3686-3687
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Chapter
Genotypic structure 
\begin_inset LatexCommand \index{genotypic structure}

\end_inset


\end_layout

\begin_layout Standard
Genotypic structure refers to 
\end_layout

\begin_layout Itemize
ploidy, the number of copies of basic number of chromosomes (c.f.
 
\family typewriter
ploidy
\begin_inset LatexCommand \index{GenoStruTrait!ploidy}

\end_inset

(), ploidyName
\begin_inset LatexCommand \index{GenoStruTrait!ploidyName}

\end_inset

() 
\family default
)
\end_layout

\begin_layout Itemize
number of chromosomes (c.f.

\family typewriter
 numChrom
\begin_inset LatexCommand \index{GenoStruTrait!numChrom}

\end_inset

() 
\family default
)
\end_layout

\begin_layout Itemize
existence of sex chromosome (c.f.
 
\family typewriter
sexChrom
\begin_inset LatexCommand \index{GenoStruTrait!sexChrom}

\end_inset

() 
\family default
)
\end_layout

\begin_layout Itemize
number of loci on each chromosome (c.f.
 
\family typewriter
numLoci
\begin_inset LatexCommand \index{GenoStruTrait!numLoci}

\end_inset

(ch), totNumLoci
\begin_inset LatexCommand \index{GenoStruTrait!totNumLoci}

\end_inset

() 
\family default
)
\end_layout

\begin_layout Itemize
locus location on chromosome (c.f.
 
\family typewriter
locusPos
\begin_inset LatexCommand \index{GenoStruTrait!locusPos}

\end_inset

(loc), arrlociPos
\begin_inset LatexCommand \index{GenoStruTrait!arrLociPos}

\end_inset

() 
\family default
)
\end_layout

\begin_layout Itemize
allele names, default to allele number (c.f.
 
\family typewriter
alleleName
\begin_inset LatexCommand \index{GenoStruTrait!alleleName}

\end_inset

(allele) 
\family default
)
\end_layout

\begin_layout Itemize
maximum allele state (c.f.
 
\family typewriter
maxAllele
\begin_inset LatexCommand \index{GenoStruTrait!maxAllele}

\end_inset

() 
\family default
)
\end_layout

\begin_layout Standard
Example 
\begin_inset LatexCommand \ref{alg:Genotype-structure-functions}

\end_inset

 creates a population and displays some of genotypic information.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{alg:Genotype-structure-functions}

\end_inset

Genotype structure functions
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/genoStru.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Individuals in the same population share the same genotypic structure.
 Consequently, 
\emph on
genotypic information can be retrieved from individual, population and simulator
\emph default
 (consists of populations with the same genotypic structure)
\emph on
 level
\emph default
.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
Calling genotype structure functions from individual or simulator
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/indGenoStru.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may have noticed that locus Indices start from 0.
 
\series bold
As a matter of fact, all arrays in simuPOP start at index 0
\series default
.
 To avoid confusion, I will refer the first locus as locus zero, second
 locus as locus one; first individual in a population as individual zero,
 and so on.
 The reason why zero-based indices are used is because C++ and Python, using
 which simuPOP is built, are both zero-based.
\end_layout

\begin_layout Standard
Another concern is how we should refer to loci on different chromosomes.
 The solution is that we almost always use
\emph on
 absolute index
\begin_inset LatexCommand \index{index!absolute}

\end_inset

 
\emph default
and seldom 
\emph on
use relative index
\begin_inset LatexCommand \index{index!relative}

\end_inset

.
 
\emph default
For example, if there are five and seven loci on the first two chromosomes,
 the absolute indices of loci will be (0,1,2,3,4), (5,6,7,8,9,10,11).
 It may feel confusing at first but this avoids the trouble of having to
 use two numbers (chrom, index) to refer to a locus.
 If relative index is needed, functions 
\family typewriter
chromLocusPair(absIndex)
\family default
 and 
\family typewriter
absLocusIndex(chrom,index)
\family default
 can be used.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
Conversion between absolute and relative indices
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/absIndex.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Genotype structure functions
\end_layout

\begin_layout Standard
A full list of genotypic structure related functions, please use 
\family typewriter
help(population)
\family default
 or 
\family typewriter
help(individual) 
\family default
or directly
\family typewriter
 help(GenoStruTrait).

\family default
 (You may notice that both 
\family typewriter
population 
\family default
and 
\family typewriter
individual 
\family default
classes are inherited from 
\family typewriter
GenoStruTrait
\family default
 class.
 )
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Genotypic structure related functions
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="19" columns="2">
<features islongtable="true">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\series bold
description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ploidy()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
number of copies of chromosomes
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ploidyName()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
haploid, diploid, triploid etc
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
numLoci(chrom)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
number of loci on a chromosome
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
sexChrom()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
whether or not the last chromosome is sex chromosome
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
totNumLoci()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
total number of loci on all chromosomes
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
genoSize()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
totNumLoci()*ploidy()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
locusPos(loc)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
the position of a locus
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
arrLociPos()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
return an (editable) array of loci positions
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
numChrom()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
number of chromosomes
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
chromBegin(chrom)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
index of the first locus on a chromosome
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
chromEnd(chrom)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
index of the last locus on a chromosome + 1 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
absLocusIndex(chrom, loc)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
absolute index of a locus on a chromosome
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
chromLocusPair(loc)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(chrom, loc) pair of an absolute index
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
alleleName(allele)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
name of an allele (if previously specified)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
alleleNames()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
array of names of alleles, the first one is for missing value
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
locusName(loc)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
name of a locus
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
maxAllele()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
maximum allele state for all loci
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
setMaxAllele(max)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
set maximum allele state for all loci
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Sex chromosome
\end_layout

\begin_layout Standard
If 
\family typewriter
sexChrom() 
\family default
is false, all chromosomes are assumed to be autosomes.
 You can also create population/individuals with a sex chromosome.
 Please note that we currently only model the XY chromosomes in diploid
 population.
 Consequently,
\end_layout

\begin_layout Itemize
Sex chromosome is always the last chromosome.
 
\end_layout

\begin_layout Itemize
Sex chromosome can only be specified for diploid population.
 (
\family typewriter
ploidy()
\family default
=2)
\end_layout

\begin_layout Itemize
Sex chromosomes (XY) may differ in length.
 You should specify the length of the longer one as the chromosome length.
 If there are more loci on X than Y, the rest of the Y chromosome is unused.
 Mutation, recombination may still occur at this unused part of chromosome
 to simplify implementation and usage.
 
\end_layout

\begin_layout Itemize
It is assumed that male has XY and female has XX chromosomes.
 The sex chromosomes of male individuals will be arranged in the order of
 XY.
 
\end_layout

\begin_layout Chapter
Population
\end_layout

\begin_layout Standard

\family typewriter
population
\begin_inset LatexCommand \index{population}

\end_inset


\family default
 objects are essential to simuPOP.
 They are composed of subpopulations each with certain number of individuals,
 all have the same genotypic structure.
 A population can store arbitrary number of ancestral populations to facilitate
 pedigree analysis.
\end_layout

\begin_layout Section
Population overview
\end_layout

\begin_layout Standard
simuPOP uses one-level population structure.
 That is to say, there is no sub-subpopulation or families in subpopulations.
 Mating is within subpopulations only.
 Exchange of genetic information across subpopulations can only be done
 through migration.
 Population and subpopulation sizes can be changed, as a result of mating
 or migration.
 More specifically
\end_layout

\begin_layout Itemize
Migration can change subpopulation size; create or remove subpopulations.
 Since migration can not generate new individuals, total population size
 will not be changed.
\end_layout

\begin_layout Itemize
Mating can fill any population/subpopulation structure with offsprings.
 Both population and subpopulation sizes can be changed.
 Since mating is within subpopulation, you can not create new subpopulation
 through mating.
\end_layout

\begin_layout Itemize
A special operator 
\family typewriter
pySubset 
\family default
can shrink population size.
 It removes individuals according to their 
\family typewriter
info() 
\family default
status.
 (Will explain later.) This can be used to model sudden population decrease
 due to natural disaster.
 
\end_layout

\begin_layout Itemize
Subpopulations can be split or merged.
\end_layout

\begin_layout Standard
Note that migration will most likely change subpopulation size.
 To keep subpopulation sizes constant, you can set subpopulation sizes during
 mating so that the next generation will have desired subpopulation sizes.
\end_layout

\begin_layout Standard
Every population has its own variable space, or 
\emph on
local namespaces
\begin_inset LatexCommand \index{local namespace}

\end_inset

 
\emph default
in simuPOP term.
 This namespace is a Python dictionary that is attached to each population
 and can be exposed to the users through 
\family typewriter
vars()
\family default
 or 
\family typewriter
dvars()
\family default
 function.
 Many functions and operators work in these namespaces and store their results
 in them.
 For example, function 
\family typewriter
Stat
\family default
 set variables like 
\family typewriter
alleleFreq[loc] 
\family default
and you can access them like 
\family typewriter
pop.dvars().alleleFreq[loc][allele]
\family default
.
 
\end_layout

\begin_layout Standard
Population has a large number of member functions, ranging from reviewing
 simple property to generating new population from the current one.
 However, you do not have to know all the member functions to use a population.
 As a matter of fact, you will only use a small portion of these functions
 unless you need to write pure python functions/operators that involves
 complicated manipulation of populations.
\end_layout

\begin_layout Section
Population related functions
\end_layout

\begin_layout Standard
The following table lists all population related functions.
 Functions that are prefixed by 
\family typewriter
`p.' 
\family default
are member functions.
 That is to say, they should be called in the form of 
\family typewriter
pop.function()
\family default
 where pop is a population object created by functions like 
\family typewriter
population(...) 
\family default
or
\family typewriter
 LoadPopulation(...).
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Population related functions 
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="54" columns="3">
<features islongtable="true" firstHeadBottomDL="true" headBottomDL="true">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0" special="|p{2in}|">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0" special="p{4in}|">
<row topline="true" bottomline="true" endhead="true" endfirsthead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ref
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Creating-a-population}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
population
\begin_inset LatexCommand \index{population!population}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Create a population.
 Note that this is techniquely the
\family typewriter
 __init__ 
\family default
function of the population object.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Creating-a-population}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.clone
\begin_inset LatexCommand \index{population!clone}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Deep copy of a population.
 (In python, 
\family typewriter
pop1 = pop
\family default
 will only create a reference to 
\family typewriter
pop.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.numSubPop
\begin_inset LatexCommand \index{population!numSubPop}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of subpopulations in a population
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.subPopSize
\begin_inset LatexCommand \index{population!subPopSize}

\end_inset

(sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Size of a subpopulation
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.subPopSizes
\begin_inset LatexCommand \index{population!subPopSizes}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return an array of subpopulation sizes
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.popSize
\begin_inset LatexCommand \index{population!popSize}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Total population size
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.absIndIndex
\begin_inset LatexCommand \index{population!absIndIndex}

\end_inset

(ind, sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the absolute index of an individual in a subpopulation
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.subPopIndPair
\begin_inset LatexCommand \index{population!subPopIndPair}

\end_inset

(ind)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the (sp,idx) pair from an absolute index of an individual
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.subPopBegin
\begin_inset LatexCommand \index{population!subPopBegin}

\end_inset

(sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Index of the first individual of a subpopulation
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Structure}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.subPopEnd
\begin_inset LatexCommand \index{population!subPopEnd}

\end_inset

(sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Index of the last individual of a subpopulation + 1
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Individuals}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.individual
\begin_inset LatexCommand \index{population!individual}

\end_inset

(ind)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return an individual
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Individuals}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.individual
\begin_inset LatexCommand \index{population!individual}

\end_inset

(ind, sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return an individual from a subpopulation
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.arrGenotype
\begin_inset LatexCommand \index{population!arrGenotype}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return an editable array of all genotype of the population.
 You need to know how these genotype are organized to safely read/write
 genotype directly.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.arrGenotype
\begin_inset LatexCommand \index{population!arrGenotype}

\end_inset

(sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return an editable array of all genotype of a subpopulation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.exposeInfo
\begin_inset LatexCommand \index{population!exposeInfo}

\end_inset

( name='info')
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Expose (not editable) the info field of all individuals
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.exposeAffectedness
\begin_inset LatexCommand \index{population!exposeAffectedness}

\end_inset

( name='affected')
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Expose (not editable) the effectedness field of all individuals
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.setIndInfo
\begin_inset LatexCommand \index{population!setIndInfo}

\end_inset

(info)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set info field of all individuals using an array of size
\family typewriter
 popSize()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.setIndInfoWithSubPopID
\begin_inset LatexCommand \index{population!setIndInfoWithSubPopID}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Fill info field of all individuals using their respective subpopulation
 ID.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.setSubPopByIndInfo
\begin_inset LatexCommand \index{population!setSubPopByIndInfo}

\end_inset

( info=[])
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rearrange individual and set subpopulation structure, using the info value
 of each individual as subpopulation ID.
 Individuals with negative info value will be removed.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.splitSubPop
\begin_inset LatexCommand \index{population!splitSubPop}

\end_inset

( which, sizes, subPopID=[])
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Split a subpopulation into subpopulations of gives sizes.
 (The sum of sizes should equal the size of 
\family typewriter
which
\family default
 subpopulation.) Subpopulation IDs can be specified.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.setSubPopStru
\begin_inset LatexCommand \index{population!setSubPopStru}

\end_inset

(newSubPopSizes, allowPopSizeChange=False)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set subpopulation structure.
 Population size may be changed but all genotype may be lost.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.splitSubPopByProportion
\begin_inset LatexCommand \index{population!splitSubPopByProportion}

\end_inset

( which, proportions, subPopID=[])
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Split a subpopulation info subpopulations of given proportions.
 (The sum of proportions should add up to one).
 Subpopulation IDs can be specifed.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.removeEmptySubPops
\begin_inset LatexCommand \index{population!removeEmptySubPops}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove empty subpopulations by adjusting subpopulation IDs.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.removeSubPops
\begin_inset LatexCommand \index{population!removeSubPops}

\end_inset

( subPops=[], shiftSubPopID=True, removeEmptySubPops=False)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove some subpopulations (and all individuals within).
 If 
\family typewriter
shiftSubPopID
\family default
 is false, subPopID will be keep intact.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.removeIndividuals
\begin_inset LatexCommand \index{population!removeIndividuals}

\end_inset

( inds, subPop=-1)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove individuals.
 If a valid subPop is given, remove individuals from this subpopulation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.mergeSubPops
\begin_inset LatexCommand \index{population!mergeSubPops}

\end_inset

( subPops, removeEmptySubPops=False)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Merge subpopulations, using the first subpopulation ID.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.reorderSubPops
\begin_inset LatexCommand \index{population!reorderSubPops}

\end_inset

( order, rank, removeEmptySubPops=False)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reorder subpopulations by order or by rank.
 FIXME: details.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.newPopByIndInfo
\begin_inset LatexCommand \index{population!newPopByIndInfo}

\end_inset

( keepAncestralPops=True, removeEmptySubPops=False)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
FIXME: details.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.removeLoci
\begin_inset LatexCommand \index{population!removeLoci}

\end_inset

( remove=[], keep=[])
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Remove some loci from the current population.
 One of remove or keep can be specified.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.newPopWithPartialLoci
\begin_inset LatexCommand \index{population!newPopWithPartialLoci}

\end_inset

( remove=[], keep=[])
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Copy current population to a new one and remove its loci.
 (Current population untouched)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Direct-populaiton-manipulation}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.pushAndDiscard
\begin_inset LatexCommand \index{population!pushAndDiscard}

\end_inset

(pop)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(Almost) Internal use only.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Ancestral-populations}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.ancestralDepth
\begin_inset LatexCommand \index{population!ancestralDepth}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ancestral depth of current population.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Ancestral-populations}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.setAncestralDepth
\begin_inset LatexCommand \index{population!setAncestralDepth}

\end_inset

(depth)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set ancestral depth.
 0 for none, -1 for unlimited.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Ancestral-populations}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.ancestralPop
\begin_inset LatexCommand \index{population!ancestralPop}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Current ancestral population selected.
 (0 for latest generation)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Ancestral-populations}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.useAncestralPop
\begin_inset LatexCommand \index{population!useAncestralPop}

\end_inset

(idx)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Use an ancestral population.
 0 for latest generation.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.equalTo
\begin_inset LatexCommand \index{population!equalTo}

\end_inset

(pop)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compare two populations.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Save-and-Load}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.savePopulation
\begin_inset LatexCommand \index{population!savePopulation}

\end_inset

( filename, format='auto', compress=True)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Save a population.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
SavePopulation( pop, filename, format='auto', compress=True)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Save a population.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
SavePopulations(pops, filename, format='auto')
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Save an array of populations to a file.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Save-and-Load}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.loadPopulation
\begin_inset LatexCommand \index{population!loadPopulation}

\end_inset

( filename)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Load a population and replace the current one.
 (Use 
\family typewriter
LoadPopulation
\family default
 instead)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Save-and-Load}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
LoadPopulation( filename)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Load a population and return it.
 Format can be 'bin', 'xml', 'text' or 'auto'.
 If auto is specified, file format is determined by file extension '.bin',
 '.xml' or '.txt'.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
LoadPopulations( filename)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Load an array of populations from a single file.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.rep
\begin_inset LatexCommand \index{population!rep}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Current replicate in a simulator
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.grp
\begin_inset LatexCommand \index{population!grp}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Current group ID in a simulator
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.gen
\begin_inset LatexCommand \index{population!gen}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Current generation during evolution.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.vars
\begin_inset LatexCommand \index{population!vars}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return a dictionary of attached Python namespace.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.vars
\begin_inset LatexCommand \index{population!vars}

\end_inset

(sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the namespace for a subpopulation
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.dvars
\begin_inset LatexCommand \index{population!dvars}

\end_inset

()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the dictionary 
\family typewriter
vars()
\family default
 with keys mapped to attributes.
 I.e., you can access 
\family typewriter
pop.vars()['LD']
\family default
 as 
\family typewriter
pop.dvars().LD.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.dvars
\begin_inset LatexCommand \index{population!dvars}

\end_inset

(sp)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the attribute version of 
\family typewriter
vars(sp)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.hasVar
\begin_inset LatexCommand \index{population!hasVar}

\end_inset

( name)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Whether or not a variable exists in the local namespace
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
ListVars( var, level=-1, subpop=True, useWxPython=True)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
List a dictionary returned by functions like 
\family typewriter
pop.dvars() or pop.vars(sp),
\family default
 up to certain level (default to all).
 You may use name parameter if you know the variable name, and set subPop=False
 if you are only interested in the overall population.
 wxPython will be automatically used if avaiable, unless you set 
\family typewriter
useWxPython=False.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.evaluate
\begin_inset LatexCommand \index{population!evaluate}

\end_inset

(expr, stmts='')
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Evaluate an expression and return its result.
 Optionally run statement first.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
p.execute
\begin_inset LatexCommand \index{population!execute}

\end_inset

(stmts)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Evaluate a statement (can be multi-line string).
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset LatexCommand \label{sub:Creating-a-population}

\end_inset

Creating a population
\end_layout

\begin_layout Standard
A population can be created through
\end_layout

\begin_layout Itemize
call 
\family typewriter
population 
\family default
function to create an instance of population from 
\family typewriter
population 
\family default
class.
\end_layout

\begin_layout Itemize
call 
\family typewriter
LoadPopulation
\family default
, 
\family typewriter
LoadFstat
\family default
 etc to load a population from a saved file.
 
\end_layout

\begin_layout Itemize
generated as a subset of an existing population by operators like 
\family typewriter
randomSample, caseControlSample 
\family default
or equivalent functions 
\family typewriter
RandomSample, CaseControlSample
\family default
.
 
\end_layout

\begin_layout Itemize
Obtained from an existing simulator through
\family typewriter
 simulator::getPopulation()
\end_layout

\begin_layout Standard
Help contents of all functions of population class can be displayed by 
\family typewriter
help
\begin_inset LatexCommand \index{help}

\end_inset

(population)
\family default
.
 Help on a memeber function can be viewed by 
\family typewriter
help(population.func)
\family default
.
 In Python, constructor is named 
\family typewriter
__init__
\family default
 and you can use class name to create an instance of the class.
 Therefore, to display parameters of 
\family typewriter
population
\begin_inset LatexCommand \index{population}

\end_inset


\family default
 function, you need to run 
\end_layout

\begin_layout LyX-Code

\family typewriter
help(population.__init__)
\end_layout

\begin_layout Standard
Some notes about the parameters:
\end_layout

\begin_layout Itemize

\family typewriter
size, subPop: 
\family default
size can be ignored if subPop is specified.
 If both parameters are provided, 
\family typewriter
subPop 
\family default
should add up to 
\family typewriter
size
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
loci:
\family default
 number of loci on each chromosome.
 The length of parameter 
\family typewriter
loci 
\family default
determines number of chromosomes.
 The last chromosome can be sex chromosome.
 In this case, please specify the maximum number of loci on X and Y.
 I.e., if there are 3 loci on Y chromosme and 5 on X chromosome, use 5.
 
\end_layout

\begin_layout Itemize

\family typewriter
sexChrom: 
\family default
true or false.
 Diploid population only.
 If true, the last homologous chromosomes will be treated as sex chromosomes.
 (XY for male and XX for female.) If X and Y have different number of loci,
 you should use the longer one as loci number of the last (sex) chromosome.
\end_layout

\begin_layout Itemize

\family typewriter
lociPos:
\family default
 a 1-d or 2-d array specifying positions of loci on each chromosome.
 For example, you can use 
\family typewriter
lociPos=[1,2,3]
\family default
 when
\family typewriter
 loci=[3]
\family default
 or
\family typewriter
 lociPos=[[1,2],[1.5,3,5]]
\family default
 for 
\family typewriter
loci=[2,3]
\family default
.
 simuPOP does not assume a unit for these locations, although they are usually
 intepreted as base pairs or centiMorgans, depending on types of simulation
 being performed.
 Currently, loci location is used only for specifying recombination intensity.
 The actual recombination rate is intensity times loci distance between
 adjacent loci.
\end_layout

\begin_layout Itemize

\family typewriter
ancestralDepth: 
\family default
number of most recent ancestral generations to keep during evolution.
 Default to 0.
 You can set it to a positive number
\family typewriter
 m 
\family default
to keep the latest 
\family typewriter
m
\family default
 generations in the population, or -1 to keep all ancestral populations.
 Note that keeping track of all ancestral populations may quickly exhaust
 your computer RAM.
 If you really need to do that, use 
\family typewriter
savePopulation
\family default
 operator to save each generation to a file is a much better choice.
 
\end_layout

\begin_layout Itemize

\family typewriter
alleleNames:
\family default
 Names of the alleles.
 They are used only for output.
\end_layout

\begin_layout Itemize

\family typewriter
maxAllele
\family default
: maximum allele state for the whole population.
 This will set a cap for all loci.
 For individual locus, you can specify 
\family typewriter
maxAllele
\family default
 in mutation models, which can be smaller than global 
\family typewriter
maxAllele 
\family default
but not larger.
 Note that this number is thee number of allele states minus 1 since allele
 number starts from 0.
\end_layout

\begin_layout Standard
Example 
\begin_inset LatexCommand \ref{alg:population-init}

\end_inset

 shows a few examples of using the population function to create populations.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{alg:population-init}

\end_inset

Use of population function
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/popInit.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Copying a population
\end_layout

\begin_layout Standard
Like many other python operations,
\end_layout

\begin_layout LyX-Code
pop = population(...)
\end_layout

\begin_layout LyX-Code
pop1 = pop
\end_layout

\begin_layout Standard
will create a reference 
\family typewriter
pop1
\family default
 to population 
\family typewriter
pop
\family default
.
 Modifying 
\family typewriter
pop1
\family default
 will modify 
\family typewriter
pop
\family default
 as well.
 If you would like to have an independent copy, use
\end_layout

\begin_layout LyX-Code
pop1 = pop.clone()
\end_layout

\begin_layout Standard
This scenario also apply to simulator (see later sections), if 
\family typewriter
simu
\family default
 is a simulator with several replicates,
\end_layout

\begin_layout LyX-Code
pop = simu.population(idx)
\end_layout

\begin_layout Standard
will get a reference to one of the replicates.
 You can, although not recomended, modify simulator through this 
\family typewriter
pop
\family default
 reference.
 If you would like to get a real copy, use
\end_layout

\begin_layout LyX-Code
pop = simu.getPopulation(idx)
\end_layout

\begin_layout Section
Interaction with Operators and Functions
\end_layout

\begin_layout Standard
Operators are objects that can be applied to populations.
 They have special attributes like at which generations to be active, at
 what stage of a evolutionary life cycle to be applied.
 Usually, an operator is created and passed as a parameter to a simulator.
 When 
\family typewriter
simulator::evolve 
\family default
(or
\family typewriter
 step, apply
\family default
) is called, the simulator will call the 
\family typewriter
apply() 
\family default
function of these operators at appropriate times.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{alg:popAndOp}

\end_inset

Population and operators
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/popAndOperator.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For example, operators 
\family typewriter
initByFreq, stat 
\family default
and two copies of 
\family typewriter
kamMutator
\family default
 are created in example 
\begin_inset LatexCommand \ref{alg:popAndOp}

\end_inset

.
 During evolution, 
\family typewriter
simu
\family default
 will apply 
\family typewriter
initByFreq
\family default
 once to each replicate of the simulator; apply the first 
\family typewriter
kamMutator
\family default
 to the first replicate and the second 
\family typewriter
kamMutator 
\family default
to the second replicate at every generation; apply 
\family typewriter
stat 
\family default
to count allele frequency and calculate 
\begin_inset Formula $F_{st}$
\end_inset

 every 10 generations.
 More details about operators will be described later.
\end_layout

\begin_layout Standard
You can ignore the specialties of an opertor and call its 
\family typewriter
apply() 
\family default
function directly.
 For example, you can initialize a population outside a simulator by 
\end_layout

\begin_layout LyX-Code
initByFreq( [0.3, .2, .5] ).apply(pop)
\end_layout

\begin_layout Standard
or dump the content of a population by
\end_layout

\begin_layout LyX-Code
dumper().apply(pop)
\end_layout

\begin_layout Standard
This style of calling is used so often that it deserves some simplification.
 Equivalent functions are defined for most of the operators.
 For example, function 
\family typewriter
InitByFreq 
\family default
is defined for operator 
\family typewriter
initByFreq 
\family default
as follows
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
Function InitByFreq
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/InitByFreq.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Note that 
\end_layout

\begin_layout Enumerate
The following two calling sequences have different consequences:
\end_layout

\begin_deeper
\begin_layout LyX-Code
pop = population(10)
\end_layout

\begin_layout LyX-Code
simu = simulator(pop, randomMating(), rep=3)
\end_layout

\begin_layout LyX-Code
simu.evolve( preOps = [initByFreq([.8,.2]) ] )
\end_layout

\begin_layout Standard
initialize three replicates of the population independently, (
\family typewriter
initByFreq
\family default
 object is applied to three populations.) but
\end_layout

\begin_layout LyX-Code
pop = population(10)
\end_layout

\begin_layout LyX-Code
InitByFreq(pop, [.8, .2])
\end_layout

\begin_layout LyX-Code
simu = simulator(pop, randomMating(), rep=3)
\end_layout

\begin_layout Standard
initialize a population once and create a simulator with three copies of
 the initialized population.
 
\end_layout

\end_deeper
\begin_layout Enumerate
If you are going to call such a function many times, it is more efficient
 to do
\end_layout

\begin_deeper
\begin_layout LyX-Code
init = initByFreq([.8,.2])
\end_layout

\begin_layout LyX-Code
for i in range(0,1000):
\end_layout

\begin_layout LyX-Code
  init.apply(pop[i])
\end_layout

\begin_layout Standard
than 
\end_layout

\begin_layout LyX-Code
for i in range(0,1000):
\end_layout

\begin_layout LyX-Code
  InitByFreq(pop[i], [.8,.2])
\end_layout

\begin_layout Standard
The difference is that the second method creates and destroys an 
\family typewriter
initByFreq
\family default
 object each time it calls the function.
\end_layout

\end_deeper
\begin_layout Standard
Because 
\family typewriter
initByFreq 
\family default
and 
\family typewriter
dumper
\family default
 will be frequently used in this manual, I will briefly describe them here.
 
\end_layout

\begin_layout Itemize

\family typewriter
initByFreq
\begin_inset LatexCommand \index{initByFreq}

\end_inset


\family default
 takes an array of probabilities (must add up to one).
 When applying to a population, each allele will be assigned 
\family typewriter
0,1,2,3,...

\family default
 etc according to the provided probabilities.
 
\family typewriter
InitByFreq
\begin_inset LatexCommand \index{function!InitByFreq}

\end_inset

(pop,...)
\family default
 is its function form.
\end_layout

\begin_layout Itemize

\family typewriter
dumper
\begin_inset LatexCommand \index{dumper}

\end_inset


\family default
 will simply display the population.
 The output format for each individual is: individual index, tag, sex, affected
 status, alleles on copy 
\family typewriter
1,2,...

\family default
 of all chromosomes, separated by 
\family typewriter
|
\family default
.
 Its function form is named 
\family typewriter
Dump
\begin_inset LatexCommand \index{function!Dump}

\end_inset

(pop).
\end_layout

\begin_layout Standard
Example 
\begin_inset LatexCommand \ref{alg:Operator-dumper-and-initByFreq}

\end_inset

 demonstrates the use of these two operators:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{alg:Operator-dumper-and-initByFreq}

\end_inset

Operator dumper and initByFreq
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/dumpPop.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand \label{sub:Population-Structure}

\end_inset

Population Structure
\end_layout

\begin_layout Standard
subpopulation structure can be accessed through the following member functions:
 
\end_layout

\begin_layout Itemize

\family typewriter
pop.popSize
\begin_inset LatexCommand \index{population!popSize}

\end_inset

()
\end_layout

\begin_layout Itemize

\family typewriter
pop.numSubPop
\begin_inset LatexCommand \index{population!numSubPop}

\end_inset

()
\end_layout

\begin_layout Itemize

\family typewriter
pop.subPopSize
\begin_inset LatexCommand \index{population!subPopSize}

\end_inset

(sp)
\end_layout

\begin_layout Itemize

\family typewriter
pop.subPopBegin
\begin_inset LatexCommand \index{population!dubPopBegin}

\end_inset

(sp)
\end_layout

\begin_layout Itemize

\family typewriter
pop.subPopEnd
\begin_inset LatexCommand \index{population!subPopEnd}

\end_inset

(sp)
\end_layout

\begin_layout Itemize

\family typewriter
pop.subPopIndPair
\begin_inset LatexCommand \index{population!subPopIndPair}

\end_inset

()
\end_layout

\begin_layout Itemize

\family typewriter
pop.absIndIndex
\begin_inset LatexCommand \index{population!absIndIndex}

\end_inset

().
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
population structure functions
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/popStru.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are another set of functions that deal with population/subpopulation
 size changes.
 In these functions, the 
\family typewriter
info
\family default
 field of each individual plays an important role.
 This field represents an individual's (new) subpopulation ID most of the
 times.
 For example, function 
\family typewriter
rearrangeByIndInfo
\begin_inset LatexCommand \index{population!rearrangeByIndInfo}

\end_inset

() 
\family default
rearrange individuals in the order of their info values.
 Similar functions are
\family typewriter
 
\end_layout

\begin_layout Itemize

\family typewriter
pop.setIndInfo
\begin_inset LatexCommand \index{population!setIndInfo}

\end_inset

(info), 
\family default
set individual info using a vector of size of the population
\end_layout

\begin_layout Itemize

\family typewriter
pop.setIndInfoWithSubPopID
\begin_inset LatexCommand \index{population!setIndInfoWithSubPopID}

\end_inset

()
\family default
, use subpopulation id to set individual info
\end_layout

\begin_layout Itemize

\family typewriter
pop.setSubPopByIndInfo
\begin_inset LatexCommand \index{population!setSubPopByIndInfo}

\end_inset

()
\family default
, rearrange individual and set subpopulation structure according individual
 info values
\end_layout

\begin_layout Itemize

\family typewriter
pop.removeEmptySubPops
\begin_inset LatexCommand \index{population!removeEmptySubPops}

\end_inset

()
\family default
, remove empty subpopulations.

\family typewriter
 
\end_layout

\begin_layout Itemize

\family typewriter
pop.removeSubPops
\begin_inset LatexCommand \index{population!removeSubPops}

\end_inset

(subPops), 
\family default
remove subpopulation
\end_layout

\begin_layout Itemize

\family typewriter
pop.reorderSubPops
\begin_inset LatexCommand \index{population!reorderSubPops}

\end_inset

(order, rank, removeEmptySubPops=False)
\family default
, 
\end_layout

\begin_layout Itemize

\family typewriter
pop.newPopByIndInfo
\begin_inset LatexCommand \index{population!newPopByIndInfo}

\end_inset

(keepAncestralPops=True, info=[]), 
\end_layout

\begin_layout Itemize

\family typewriter
pop.removeLoci
\begin_inset LatexCommand \index{population!removeLoci}

\end_inset

(remove=[], keep=[]),
\family default
 remove some loci from the population
\end_layout

\begin_layout Itemize

\family typewriter
pop.newPopWithPartialLoci
\begin_inset LatexCommand \index{population!newPopWithPartialLoci}

\end_inset

(remove=[], keep=[]), 
\family default
return a new reduced population
\end_layout

\begin_layout Itemize

\family typewriter
pop.splitSubPop
\begin_inset LatexCommand \index{population!splitSubPop}

\end_inset

(which, subPopSizes, subPopID), 
\family default
split subpopulation 
\family typewriter
which
\family default
 according to subPopSizes
\end_layout

\begin_layout Itemize

\family typewriter
pop.spliSubPopByProportion
\begin_inset LatexCommand \index{population!spliSubPopByProportion}

\end_inset

(which, proportions, subPopID), 
\family default
use proportion
\end_layout

\begin_layout Itemize

\family typewriter
pop.mergeSubPop
\begin_inset LatexCommand \index{population!mergeSubPop}

\end_inset

(subPops).
 
\family default
merge subpopulations
\end_layout

\begin_layout Standard
These functions may look useful and appealing but you will almost never
 use them directly.
 All these operations will be performed by various operators, in a more
 user-friendly way.
 Only when you begin to write your own operators will you have to read about
 the details of these functions.
 
\end_layout

\begin_layout Standard
Example 
\begin_inset LatexCommand \ref{alg:population-structure-functions}

\end_inset

 demonostrate the use of functions 
\family typewriter
setIndInfo, setSubPopByInfInfo 
\family default
and 
\family typewriter
removeLoci.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{alg:population-structure-functions}

\end_inset

population structure functions
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/popStruManip.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand \label{sub:Individuals}

\end_inset

Individuals
\end_layout

\begin_layout Standard
You can access individuals of a population through 
\family typewriter
individual
\begin_inset LatexCommand \index{population!individual}

\end_inset

()
\family default
 function.
 There are two forms of this function, one with and one without parameter
 
\family typewriter
subPop,
\end_layout

\begin_layout Itemize

\family typewriter
individual(ind) 
\family default
returns the
\family typewriter
 ind
\family default
'th individual (absolute index) of the whole population
\end_layout

\begin_layout Itemize

\family typewriter
individual(ind, subPop) 
\family default
returns the 
\family typewriter
ind
\family default
'th (relative index) individual in the 
\family typewriter
subPop
\family default
'th subpopulation.
\end_layout

\begin_layout Standard
The returned 
\family typewriter
individual 
\family default
object also has its own member functions.
 You can retrieve genotypic information of an individual through the same
 set of functions.
 You can also get/set genotype of an individual.
 Note that you can not create an individual object directly.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
Individual member functions
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/ind.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again, you will very seldom have to use these functions directly unless
 when you write pure python operators.
 
\end_layout

\begin_layout Standard
The following table lists all individual related functions.
 They are all member functions so they have to be access through an individual
 object in the form of 
\family typewriter
ind.function().
 
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Individual related functions 
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="24" columns="2">
<features islongtable="true">
<column alignment="left" valignment="top" leftline="true" width="0" special="|p{2in}|">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0" special="p{4.5in}|">
<row topline="true" bottomline="true" endhead="true" endfirsthead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.arrGenotype()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return an editable array of the genotype of an individual.
 The layout of this array is explained in section 
\begin_inset LatexCommand \ref{sec:Accessing-genotype-and}

\end_inset

.
 Although this function is not as easy to use as other allele-access functions,
 it is the fastest one since you can read/write genotype directly after
 you get the handle of all genotype through this function.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.arrGenotype(p)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return only the 
\family typewriter
p
\family default
-th copy of the chromosome.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.arrGenotype(p, ch)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return only the 
\family typewriter
ch
\family default
-th chromosome of the 
\family typewriter
p
\family default
-th copy.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.allele(idx)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the allele at locus 
\family typewriter
idx 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.allele(idx, p)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the allele at locus 
\family typewriter
idx
\family default
 of the 
\family typewriter
p
\family default
-th copy of the chromosomes,
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.allele(idx, p, ch)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the allele at locus 
\family typewriter
idx 
\family default
of the
\family typewriter
 ch
\family default
-th chromosome of the 
\family typewriter
p
\family default
-th chromosome set
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.alleleChar(idx)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the name of allele 
\family typewriter
allele(idx)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.alleleChar(idx, p)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the name of allele 
\family typewriter
allele(idx, p)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.alleleChar(idx, p, ch)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the name of allele 
\family typewriter
allele(idx, p, ch)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setAllele(allele, idx)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the allele at locus 
\family typewriter
idx 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setAllele(allele, idx, p)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the allele at locus 
\family typewriter
idx
\family default
 of the 
\family typewriter
p
\family default
-th copy of the chromosomes,
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setAllele(allele, idx, p, ch)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the allele at locus 
\family typewriter
idx 
\family default
of the
\family typewriter
 ch
\family default
-th chromosome of the 
\family typewriter
p
\family default
-th chromosome set
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.tag()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the tag of an individual.
 SimuPOP does not gurantee the type of tag.
 Currently, the tag is a pair of int that is usually used to record the
 parents of the individual.
 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setTag(tag)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the tag.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.sex()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the sex of an individual,
\series bold
 1 for Male and 2 for Female
\series default
.
 However, this is not guranteed so please use 
\family typewriter
sexChar()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.sexChar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the sex of an individual
\series bold
 M/F
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setSex(sex)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the sex.
 You should use 
\family typewriter
setSex(Male)
\family default
 or 
\family typewriter
setSex(Female) 
\family default
instead of 1 and 2.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.affected()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Whether or not an individual is affected
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.unaffected()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Not 
\family typewriter
affected()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.affectedChar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return '
\family typewriter
A
\family default
' or '
\family typewriter
U
\family default
' for affectedness status.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setAffected(aff)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set affectedness status.
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.info()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return the info field of an individual
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
i.setInfo()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set the info field of an individual
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
\begin_inset LatexCommand \label{sub:Population-Variables}

\end_inset

Population Variables
\end_layout

\begin_layout Standard
Populations are associated with python variables.
 These variables are usually set by various operators.
 For example, 
\family typewriter
stat
\begin_inset LatexCommand \index{operator!stat}

\end_inset


\family default
 operator calculates many population statistics and store results in population
 namespace.
 Example 
\begin_inset LatexCommand \ref{sub:Population-Variables}

\end_inset

 demonstrates how 
\family typewriter
stat 
\family default
set variables 
\family typewriter
popSize
\family default
, 
\family typewriter
alleleFreq
\family default
 etc.
 
\end_layout

\begin_layout Standard
You can refer to these variables using 
\family typewriter
population::vars
\begin_inset LatexCommand \index{population!vars}

\end_inset

() 
\family default
or 
\family typewriter
population::
\begin_inset LatexCommand \index{population!population}

\end_inset

dvars() 
\family default
function.
 The returned value of 
\family typewriter
vars() 
\family default
and 
\family typewriter
dvars()
\family default
 reflects the same dictionary.
 However, 
\family typewriter
dvars()
\family default
 uses a little Python magic so that you can use attribute syntax to access
 dictionary keys.
 Since 
\family typewriter
a.allaleFreq[0]
\family default
 is a lot easier to read than 
\family typewriter
a['alleleFre'][0]
\family default
, 
\family typewriter
dvars()
\family default
 is always preferred to 
\family typewriter
vars()
\family default
.
 A function 
\family typewriter
ListVars 
\family default
defined in 
\family typewriter
simuUtil 
\family default
can be used to display the variables.
 With wxPython installed, this function will open a nice window with a tree
 representing the variables.
 Without wxPython (or use parameter 
\family typewriter
useWxPython=False
\family default
), variables will be displayed in a indented form.
 Several parameters can be used to limit your display.
 They are
\end_layout

\begin_layout Itemize
level: level of tree, further nested variables will not be displayed
\end_layout

\begin_layout Itemize
name: name of variable to display.
 
\end_layout

\begin_layout Itemize
subPop: whether or not display variables for each subpopulations
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{alg:Population-variables}

\end_inset

Population variables
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/popVars.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
These variables form a Python dictionary, and furthermore a local namespace
 for
\family typewriter
 
\family default
functions like
\family typewriter
 population::evaluate
\family default

\begin_inset LatexCommand \index{population!evaluate}

\end_inset

.
 
\emph on
Local namespace 
\emph default
means that you can use dictionary items as variables duing evaluation.
 For example: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
Local namespaces of populations
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/localNamespace.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see, these variables are 
\emph on
local 
\emph default
to the population and is not directly accessible from the main namespace.
 
\family typewriter
vars(subPop) 
\family default
and 
\family typewriter
dvars(subPop) 
\family default
function can be used.
 Both functions takes an optional 
\family typewriter
subPop 
\family default
option.
 If ignored, they will return population dictionary; otherwise, they will
 return dictionary for subpopulation 
\family typewriter
subPop
\family default
.
 This is a very convenient feature, because subpopulations and populations
 have similar keys, you can calculate the same statistics for the whole
 population and individual subpopulations, just by specifying different
 namespaces.
\end_layout

\begin_layout Section
Sample from a Population
\end_layout

\begin_layout Standard
Sampling (or ascertainment) is a complicated issue.
 simuPOP provides several methods to generate samples from an existing populatio
n.
 Details please refer to the 'ascertainment section' of Chapter 5.
\end_layout

\begin_layout Section
\begin_inset LatexCommand \label{sub:Ancestral-populations}

\end_inset

Ancestral populations
\end_layout

\begin_layout Standard
By default, a population object only hold current generation.
 All ancestral populations (generations) will be discarded.
 You can, however, keep as many ancestral generations as you wish, provided
 that you have enough RAM to store all these extra information.
\end_layout

\begin_layout Standard
Parameter 
\family typewriter
ancestralDepth
\family default
 is used to specify number of generations to keep.
 This parameter is default to zero, meaning keeping no ancestral population.
 You can specify a positive number to store most recent 
\family typewriter
ancestry
\family default
 generations; or -
\family typewriter
1 
\family default
to store all populations.
 
\end_layout

\begin_layout Standard
Several important usage of ancestral populations:
\end_layout

\begin_layout Itemize

\family typewriter
dumper() 
\family default
operator and 
\family typewriter
Dump()
\family default
 function has a parameter 
\family typewriter
ancestralPops
\family default
.
 If set to true, they will dump all ancestral generations.
\end_layout

\begin_layout Itemize
function 
\family typewriter
population.setAncestralDepth()
\family default
 and operator 
\family typewriter
setAncestralDepth()
\family default
 set the number of ancestral generations to keep for a population.
 A typical use of 
\family typewriter
setAncestralDepth() 
\family default
is
\end_layout

\begin_deeper
\begin_layout LyX-Code
simu.evolve(...
\end_layout

\begin_layout LyX-Code
  setAncestralDepth(3, at=[-3])
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout Standard
which save the last three generations in populations so that pedigree based
 sampling schemes can sample from the population.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
pop.useAncestralPop(idx) 
\family default
set current generation of population 
\family typewriter
pop
\family default
 to 
\family typewriter
idx
\family default
 generation.
 
\family typewriter
idx
\family default
 = 1 for the first ancestral generation, 2 for second ancestral ..., and 0
 for current generation.
 After this function, all functions, operators will be applied to this ancestral
 population.
 You should always call 
\family typewriter
setAncestralPop(0)
\family default
 after you examed the ancestral populations.
 A typical use of this function is
\end_layout

\begin_deeper
\begin_layout LyX-Code
ancDep = pop.ancestralDepth()
\end_layout

\begin_layout LyX-Code
fst = [0]*(ancDep+1);
\end_layout

\begin_layout LyX-Code
for i in range(0, ancDep+1):
\end_layout

\begin_layout LyX-Code
  pop.useAncestralPop(i)
\end_layout

\begin_layout LyX-Code
  Stat(pop, Fst=[0])
\end_layout

\begin_layout LyX-Code
  fst[i] = pop.dvars().Fst
\end_layout

\begin_layout LyX-Code
# set current population back.
\end_layout

\begin_layout LyX-Code
pop.useAncestralPop(0) 
\end_layout

\end_deeper
\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
\begin_inset LatexCommand \label{sub:Save-and-Load}

\end_inset

Save and Load a Population
\end_layout

\begin_layout Standard
Internally, population can be saved/loaded in 
\begin_inset Quotes eld
\end_inset


\family typewriter
txt
\family default

\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\family typewriter
xml
\family default

\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset


\family typewriter
bin
\family default

\begin_inset Quotes erd
\end_inset

 formats using 
\family typewriter
savePopulation
\begin_inset LatexCommand \index{savePopulation}

\end_inset

(file, format)
\family default
 member function, global 
\family typewriter
SavePopulation
\begin_inset LatexCommand \index{Function!SavePopulation}

\end_inset

(pop, file, format) 
\family default
(in 
\family typewriter
simuUtil.py
\family default
) and 
\family typewriter
LoadPopulation
\family default

\begin_inset LatexCommand \index{function!LoadPopulation}

\end_inset

.
 (Yes, it is 
\family typewriter
Load..

\family default
 not 
\family typewriter
load..
 
\family default
since 
\family typewriter
savePopulation 
\family default
is a member function and 
\family typewriter
LoadPopulation 
\family default
is a global function.) These formats have their own advantages and disadvantages:
\end_layout

\begin_layout Itemize

\family typewriter
xml
\begin_inset LatexCommand \index{xml format}

\end_inset

:
\family default
 most human readable, easy transformation to other formats, largest file
 size
\end_layout

\begin_layout Itemize

\family typewriter
bin
\begin_inset LatexCommand \index{bin format}

\end_inset

:
\family default
 not readable, small file size.
 May not be portable.
\end_layout

\begin_layout Itemize

\family typewriter
txt
\begin_inset LatexCommand \index{text format}

\end_inset

:
\family default
 human readable with no structure, portable, median file size.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/popSaveLoad
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/popSaveLoad.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Populations are by default compressed in gzip format.
 If you are interested in viewing the content of the file, you can use 
\family typewriter
compress=False
\family default
 when saving a populaton, or decompress the saved files using 
\family typewriter
gzip -d 
\family default
command.
 Note that although compressed file format will save a lot of disk spaces,
 and are usually loaded faster, it will take 2 to 3 more times to save a
 population.
 
\end_layout

\begin_layout Standard
Populations can also be saved in other formats such as FSTAT so that they
 can be directly analyzed by other programs.
 These formats are not supported internally.
 They are handled in Python in the form of Python function or pure-Python
 operator.
 If you would like to save/load simuPOP population in your own format, you
 can do it by mimicing these functions in 
\family typewriter
simuUtil.py
\family default
.
 Note that these formats may not keep full information of simuPOP population
 so loaded population may not reflect the original population.
\end_layout

\begin_layout Standard
The following example demonstrates how to use 
\family typewriter
SaveFstat
\begin_inset LatexCommand \index{function!SaveFstat}

\end_inset

 
\family default
and 
\family typewriter
LoadFstat
\begin_inset LatexCommand \index{function!LoadFstat}

\end_inset


\family default
 functions.
 There is also an operator version of 
\family typewriter
SaveFstat
\family default
: 
\family typewriter
saveFstat
\family default

\begin_inset LatexCommand \index{operator!saveFstat}

\end_inset

.
 The source code can be find in 
\family typewriter
simuUtil.py
\family default
 which provides a good example when you export to other formats.
\end_layout

\begin_layout Standard
It is also possible to save a bunch of populations in a single file, provided
 that they have the same genotypic structure.
 The functions are
\end_layout

\begin_layout Itemize

\family typewriter
SavePopulations
\begin_inset LatexCommand \index{function!SavePopulations}

\end_inset

([pop1,pop2,...,], filename, format='auto', compress=True)
\end_layout

\begin_layout Itemize

\family typewriter
LoadPopulations
\begin_inset LatexCommand \index{functions!LoadPopulations}

\end_inset

(filename)
\end_layout

\begin_layout Standard
Shared variables will also be saved (except for big objects like samples).
 Since the number of shared variables can be big, it maybe a good idea to
 clear these variables before you save a population.
 On the other hand, you may want to save key parameters used to generate
 this population in the local namespace so that you will know these parameters
 after the population is loaded.
 For example, you can
\end_layout

\begin_layout LyX-Code
pop.vars().clear()
\end_layout

\begin_layout LyX-Code
pop.dvars().migrationRate = 0.002
\end_layout

\begin_layout LyX-Code
pop.dvars().diseaseLoci = [4, 30]
\end_layout

\begin_layout LyX-Code
SavePopulation(pop, 'pop.bin')
\end_layout

\begin_layout Section
View a population (GUI, wxPython required)
\end_layout

\begin_layout Standard
Introduced in ver 0.6.9, 
\family typewriter
simuViewPop.py
\family default
 can be used to view a population.
 It can be used as a standalone application, or in an interactive session.
 First, you can use this script as a standalone application, simply run
\end_layout

\begin_layout LyX-Code
simuViewPop.py mypop.bin
\end_layout

\begin_layout Standard
will fire a GUI and allow you to exam population property, genotype and
 calculate statistics.
 
\end_layout

\begin_layout Standard
In a Python session, import this module will provide a function 
\family typewriter
viewPop
\family default
, apply it on a in-memory population or a filename will have the same effect.
 For example,
\end_layout

\begin_layout LyX-Code
import simuViewPop
\end_layout

\begin_layout LyX-Code
simuViewPop.viewPop(myPop)
\end_layout

\begin_layout LyX-Code
simuViewPop.viewPop(filename='mypop.bin') 
\end_layout

\begin_layout Chapter
Mating Scheme
\begin_inset LatexCommand \index{mating scheme}

\end_inset


\end_layout

\begin_layout Standard
Mating schemes specify how to generate offspring from the current population.
 It must be provided when a simulator is created.
 Mating can perform the following tasks:
\end_layout

\begin_layout Itemize
change population/subpopulation sizes.
 
\end_layout

\begin_layout Itemize
Randomly choose parent(s) to generate offsprings to fill the next generation.
 
\end_layout

\begin_layout Itemize
During-mating operators are applied to all offsprings.
\end_layout

\begin_layout Itemize
Apply selection if applicable.
 
\end_layout

\begin_layout Section
Create a Mating Scheme
\end_layout

\begin_layout Standard
Most mating schemes take the following parameters:
\end_layout

\begin_layout Itemize

\family typewriter
numOffsprings
\begin_inset LatexCommand \index{simulator!numOffsprings}

\end_inset

 
\family default
number of offsprings or 
\begin_inset Formula $p$
\end_inset

 for a random distribution.
 default to 1.
 This parameter determines number of offsprings a mating will produce so
 it determines family size.
\end_layout

\begin_layout Itemize

\family typewriter
numOffspringsFunc
\begin_inset LatexCommand \index{simulator!numOffspringsFunc}

\end_inset

 
\family default
a python function that return number of offspring or 
\begin_inset Formula $p$
\end_inset

.
\end_layout

\begin_layout Itemize

\family typewriter
maxNumOffsprings
\begin_inset LatexCommand \index{simulator!maxNumOffsprings}

\end_inset

 
\family default
used when numOffsprings is generated from a poisson or binomial distribution.
\end_layout

\begin_layout Itemize

\family typewriter
mode
\family default
 
\family typewriter

\begin_inset LatexCommand \index{simulator!mode}

\end_inset

 
\family default
One of 
\family typewriter
MATE_NumOffsprings, MATE_NumOffspringsEachFamily, MATE_GeometricDistribution,
 MATE_PoissonDistribution, MATE_BinomialDistribution
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
newSubPopSize
\begin_inset LatexCommand \index{simulator!newSubPopSize}

\end_inset

 
\family default
an array of sizes of subpopulaitons.
 
\end_layout

\begin_layout Itemize

\family typewriter
newSubPopSizeExpr
\begin_inset LatexCommand \index{simulator!newSubPopSizeExpr}

\end_inset

 
\family default
an expression that will return the new subpopulation size.
 Details about python expression will be discussed later.
\end_layout

\begin_layout Itemize

\family typewriter
newSubPopSizeFunc
\begin_inset LatexCommand \index{simulator!newSubPopSizeFunc}

\end_inset


\family default
 Added for more convenience.
 This should be a function that accept a int parameter (generation), an
 array of current population size and return an array of subpopulation sizes.
 This is sometimes easier to use than the expression version of this parameter.
\end_layout

\begin_layout Section
Determine number of offsprings during mating
\end_layout

\begin_layout Standard
The default values 
\family typewriter
numOffsprings 
\family default
parameters makes a mating scheme produce one offspring per mating.
 This is the real random mating and should be used whenever possible.
 However, various situations requires larger family size or even changing
 family size.
 simuPOP provides a comprehensive way to deal with this problem.
\end_layout

\begin_layout Standard
The method to determine the number of offsprings are set by 
\family typewriter
mode
\family default
 parameter:
\end_layout

\begin_layout Itemize

\family typewriter
MATE_NumOffsprings:
\family default
 if 
\family typewriter
numOffspringsFunc 
\family default
is not given, number of offsprings will be constant 
\family typewriter
numOffsprings
\family default
 all the time.
 Otherwise, 
\family typewriter
numOffspringsFunc(gen)
\family default
 will be called 
\series bold
once 
\series default
for each generation to get the number of offsprings for the matings happen
 in this generation.
 
\end_layout

\begin_layout Itemize

\family typewriter
MATE_NumOffspringsEachFamily:
\family default
 
\family typewriter
numOffspringsFunc 
\family default
has to be given and will be called whenever a mating happens.
 Since 
\family typewriter
numOffspringsFunc
\family default
 can be 
\series bold
any
\series default
 python function, this mode allows arbitrary model of assigning number of
 offsprings during mating.
 The mode can be slow though.
\end_layout

\begin_layout Itemize

\family typewriter
MATE_GeometricDistribution: numOffsprings 
\family default
or result of 
\family typewriter
numOffspringsFunc
\family default
 (evaluated at each generation) will be considered as 
\begin_inset Formula $p$
\end_inset

 for a geometric distribution.
 The number of offsprings for each mating is determined by
\begin_inset Formula \[
P\left(k\right)=p\left(1-p\right)^{k-1}\;\textrm{ for }k\geq1\]

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
MATE_PoissonDistribution: numOffsprings 
\family default
or result of 
\family typewriter
numOffspringsFunc
\family default
 (evaluated at each generation) will be considered as 
\begin_inset Formula $p$
\end_inset

 for a Poission distribution.
 The number of offsprings for each mating is determined by
\begin_inset Formula \[
P\left(k\right)=\frac{p^{k-1}}{\left(k-1\right)!}e^{-p}\quad\textrm{ for }k\geq1\]

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
MATE_BinomialDistribution: numOffsprings 
\family default
or result of 
\family typewriter
numOffspringsFunc
\family default
 (evaluated at each generation) will be considered as 
\begin_inset Formula $p$
\end_inset

 for a Binomial distribution.
 Let 
\begin_inset Formula $N$
\end_inset

=
\family typewriter
maxNumOffsprings
\family default
, the number of offsprings for each mating is determined by
\begin_inset Formula \[
P\left(k\right)=\frac{\left(n-1\right)!}{\left(k-1\right)!\left(n-k\right)!}p^{k-1}\left(1-p\right)^{n-k}\;\textrm{ for }N\geq k\geq1\]

\end_inset


\end_layout

\begin_layout Standard
Note that all these distributions are adjusted to produce at least one offspring.
 
\end_layout

\begin_layout Section
Determine subpopulation sizes of next generation
\end_layout

\begin_layout Standard
The default behavior of simuPOP is to use the same population/subpopulation
 sizes as the parent generation.
 You can change this behavior by setting one of 
\family typewriter
newSubPopSize,
\family default
 
\family typewriter
newSubPopSizeExpr
\family default
 and 
\family typewriter
newSubPopSizeFunc
\family default
 parameters:
\end_layout

\begin_layout Itemize
If you would like to have fixed subpopulation sizes, use 
\family typewriter
newSubPopSize=some_fixed_values
\family default
 .
 This is useful when subpopulation sizes are changed by migration and you
 do want to keep constant subpopulation sizes.
\end_layout

\begin_layout Itemize
If subpopulation size can be easily calculated through an expression, you
 can use 
\family typewriter
newSubPopSizeExpr 
\family default
to determine the new subpopulation sizes.
 For example 
\family typewriter
newSubPopSizeExpr=`[gen+10]' 
\family default
uses generation number + 10 as the new population size.
 More complicated expression can be used, maybe along with 
\family typewriter
pyExec 
\family default
operators, but in this case, a specialized function and 
\family typewriter
newSubPopSizeFunc 
\family default
is recommened.
 Note that the expression uses variables from local namespace.
\end_layout

\begin_layout Itemize
A more organized (and thus recommended) way to set new population/subpopulation
 sizes is through parameter 
\family typewriter
newSubPopSizeFunc
\family default
.
 To use this paarmeter, you need to define a Python function that take two
 parameters: generation number and current subpopulation sizes and return
 an array of new subpoulation sizes.
 ( return 
\family typewriter
[newsize] 
\family default
instead of
\family typewriter
 newsize 
\family default
when you do not have any subpopulation structure).
 For example, the following function defines a linear expansion demographic
 scenario where a real example where a single population is splitted at
 200 generations (using a 
\family typewriter
spliPopulation
\family default
 operator).
\end_layout

\begin_deeper
\begin_layout LyX-Code
def lin_exp(gen, oldSize=[]):
\end_layout

\begin_layout LyX-Code
  if gen < 200:   # burn in, constant population size
\end_layout

\begin_layout LyX-Code
    return [1000]
\end_layout

\begin_layout LyX-Code
  else:           # increase subpopulation sizes
\end_layout

\begin_layout LyX-Code
    incSize = (10000-1000)/(500-200)/len(oldSize)
\end_layout

\begin_layout LyX-Code
    return [oldSize[x]+incSize for x in range(0, len(oldSize))]
\end_layout

\begin_layout Standard
you can then use this function as follows
\end_layout

\begin_layout LyX-Code
...randomMating(newSubPopSizeFunc=lin_exp) ...
\end_layout

\end_deeper
\begin_layout Section
Demographic change functions
\end_layout

\begin_layout Standard

\family typewriter
newSubPopSizeFunc 
\family default
can take a function with parameters 
\family typewriter
gen 
\family default
and 
\family typewriter
oldSize.
 
\family default
A few functions are defined in 
\family typewriter
simuUtil.py 
\family default
that will return such a function with given parameters.
 All these functions support burnin and split to equal sized subpopulations.
 For all these function, you can test them by
\end_layout

\begin_layout LyX-Code
func = oneOfTheDemographicFunc(parameters)
\end_layout

\begin_layout LyX-Code
gen = range(0, yourEndGen)
\end_layout

\begin_layout LyX-Code
r.plot(gen, [func(x)[0] for x in gen])
\end_layout

\begin_layout Standard
NumSubPop is default to 1.
 split is default to 0 or burnin.
 Population size change happens 
\series bold
after
\series default
 burnin (start at burn+1) and split happens at 
\family typewriter
split.
\end_layout

\begin_layout Subsubsection*

\family typewriter
constSize(size, split, numSubPop, bottleneckGen, bottleneckSize)
\end_layout

\begin_layout Standard
The population size is constant, but will split into 
\family typewriter
numSubPop
\family default
 subpopulations at generation 
\family typewriter
split
\family default
.
 If 
\family typewriter
bottleneckGen
\family default
 is specified, population size will be 
\family typewriter
bottleneckSize 
\family default
at that generation.
 
\end_layout

\begin_layout Subsubsection*

\family typewriter
linearExpansion(initSize, endSize, end, burnin, split, numSubPop, bottleneckGen,
 bottleneckSize)
\end_layout

\begin_layout Standard
Linearly expand population size from intiSize to endSize after burnin, split
 the population at generation 
\family typewriter
split.
\family default
If 
\family typewriter
bottleneckGen
\family default
 is specified, population size will be 
\family typewriter
bottleneckSize 
\family default
at that generation.
 
\end_layout

\begin_layout Subsubsection*

\family typewriter
exponentialExpansion
\family default
(
\family typewriter
initSize, endSize, end, burnin, split, numSubPop, bottleneckGen, bottleneckSize)
\end_layout

\begin_layout Standard
Exponentially expand population size from intiSize to endSize after burnin,
 split the population at generation 
\family typewriter
split.
\family default
If 
\family typewriter
bottleneckGen
\family default
 is specified, population size will be 
\family typewriter
bottleneckSize 
\family default
at that generation.
 
\end_layout

\begin_layout Subsubsection*

\family typewriter
instantExpansion
\family default
(
\family typewriter
initSize, endSize, end, burnin, split, numSubPop, bottleneckGen, bottleneckSize)
\end_layout

\begin_layout Standard
Instaneously expand population size from intiSize to endSize after burnin,
 split the population at generation 
\family typewriter
split.
\family default
If 
\family typewriter
bottleneckGen
\family default
 is specified, population size will be 
\family typewriter
bottleneckSize 
\family default
at that generation.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Different Mating Schemes
\end_layout

\begin_layout Standard
Currently, simuPOP provides the following mating schemes:
\end_layout

\begin_layout Itemize

\family typewriter
noMating
\begin_inset LatexCommand \index{noMating}

\end_inset

() 
\family default
parent generation will be considered as offspring genertion.
 subpopsizes will be ignored although some during-mating operators can be
 applied.
\end_layout

\begin_layout Itemize

\family typewriter
\emph on
binomialSelection
\emph default

\begin_inset LatexCommand \index{binomialSelection}

\end_inset

() 
\family default
no sex is involved.
 Offspring is chosen from parental generation by random or according to
 fitness values.
\end_layout

\begin_layout Itemize

\family typewriter
radomMating
\begin_inset LatexCommand \index{radomMating}

\end_inset

() 
\family default
sexed random mating.
 A prameter 
\family typewriter
(contIfUniSex
\begin_inset LatexCommand \index{contIfUniSex}

\end_inset

) 
\family default
can be set to determine the behavior when only one sex exists in a subpopulation.
 Default is continue without warning.
\end_layout

\begin_layout Itemize

\family typewriter
pyMating
\begin_inset LatexCommand \index{pyMating}

\end_inset

() 
\family default
(
\series bold
not usable right now) 
\series default
Hybird mating scheme.
 This mating scheme takes two parameters: 
\family typewriter
mateFunc
\family default
 and 
\family typewriter
keepSubPopStru
\family default
.
 
\family typewriter
mateFunc
\family default
 should be a python function that accept a (parental) population and return
 parent indices for each offspring.
 If 
\family typewriter
keepSubPopStru=True 
\family default
(default), parents should come from the same subpopulation and the offspring
 population will have subpopulation strcture.
 Otherwise, mating can across subpopulation strcuture.
 
\end_layout

\begin_layout Standard
Detailed information of each mating scheme can be found through 
\family typewriter
help(...) 
\family default
function.
 
\end_layout

\begin_layout Section
Sex chromosomes
\end_layout

\begin_layout Standard
Currently, only 
\family typewriter
randomMating()
\family default
 in diploid population supports sex chromosomes.
 When 
\family typewriter
sexChrom()
\family default
 is false, the sex of an offspring is determined randomly with prob 
\begin_inset Formula $1/2$
\end_inset

.
 Otherwise, it is determined by the existence of Y chromosome.
 I.e., what sex chromosome an offspring get from his father.
 
\end_layout

\begin_layout Standard
Recombinations on sex chromosomes of females (XX) is just like those on
 autosomes.
 However, this is not true in male.
 Currently, recombinations between male sex chromosomes (XY) are 
\emph on
not
\emph default
 allowed (a bug/feature of recombinators).
 This may change later if exchanges of genes between pseudoautosomal regions
 of XY need to be modeled.
\end_layout

\begin_layout Chapter
Simulator
\begin_inset LatexCommand \index{Simulator}

\end_inset


\end_layout

\begin_layout Standard
Simulators combine three important components of simuPOP: population, mating
 scheme and operators together.
 A simulator is usually created with an instance of population, a replicate
 number and a mating scheme.
 It makes '
\family typewriter
rep
\family default
' replicates of this population and control the evolution process of these
 populations.
\end_layout

\begin_layout Standard
The most important function of a simulator is 
\family typewriter
evolve()
\family default
.
 It accepts arrays of operators as its parameters, among which, '
\family typewriter
preOps
\family default

\begin_inset LatexCommand \index{simulato!preOps}

\end_inset

' and '
\family typewriter
postOps
\family default

\begin_inset LatexCommand \index{simulator!postOps}

\end_inset

' will be applied to the populations at the begining/end of evolution, whereas
 '
\family typewriter
ops
\family default
' will be applied at every generation.
 
\end_layout

\begin_layout Section
Generation Number
\end_layout

\begin_layout Standard
Several aspects of generation number may cause confusion:
\end_layout

\begin_layout Itemize
generation starts from zero
\end_layout

\begin_layout Itemize
a generation number presents a 'to-be-evolved' generation
\end_layout

\begin_layout Itemize
ending generation specified in 
\family typewriter
evolve() 
\family default
will be executed
\end_layout

\begin_layout Standard
That is to say, a new simulator will have generation 0 (at the beginning
 of generation 0).
 If you do
\family typewriter
 evolve(..., end=0), evolve 
\family default
will evolve one generation and stop at the beginning of generation 1.
\end_layout

\begin_layout Standard
It may sound strange that 
\end_layout

\begin_layout LyX-Code
evolve(end=2)
\end_layout

\begin_layout Standard
evolve the population three times.
 Generation 0, generation 1, and generation 2.
 At the end of simulation, current generation number is 3! (If you are familiar
 with C, this is like a for loop index).
 This is why you should test if a simulation is finished correctly by
\end_layout

\begin_layout LyX-Code
if(simu.gen() == endGen+1)
\end_layout

\begin_layout Standard
instead of 
\family typewriter
simu.gen() == endGen.
 
\family default
(endGen is the value for parameter end).
\end_layout

\begin_layout Standard
When you use 
\family typewriter
start=0, step=5, end=10
\family default
 for your operator, it will be applied at generations 
\family typewriter
0,5,10 
\family default
etc.
 
\end_layout

\begin_layout Section
Operator calling sequence
\end_layout

\begin_layout Standard
Simulators separate operators into 
\family typewriter
pre-
\family default
,
\family typewriter
 during-
\family default
 and
\family typewriter
 post-
\family default
 mating operators.
 During evolution, simulator first apply all 
\family typewriter
PreMating
\family default
 operators and then call the 
\family typewriter
mate()
\family default
 function of the given mating scheme, which will call 
\family typewriter
DuringMating 
\family default
operators during the birth of each offspring.
 After the new generation is generated, 
\family typewriter
PostMating
\family default
 operators are applied in the order they appear in the operator list.
\end_layout

\begin_layout Standard
Anyway, operators are not always active.
 They can be applied to certain generations or certain replicate(s) of populatio
n.
 A simulator will always apply preOps and postOps operators, but will ask
 if an operator is active (by providing 
\family typewriter
rep, grp, gen
\family default
 information) before its is called.
\end_layout

\begin_layout Standard
The order of applying operators usually does not matter but errors can occur
 if you are not careful.
 For example,
\family typewriter
 stat(...)
\family default
 calculate the statistics of current population.
 It is a pre-mating operator so you should set 
\family typewriter
stage=PostMating
\family default
 and put it after all operators if you would like to measure post-mating
 population.
 However, it should be put before any operator (such as an terminator) that
 uses the shared variable set by 
\family typewriter
stat(...).
\end_layout

\begin_layout Standard
If you are not sure about the calling sequence of operators, you can set
 the 
\family typewriter
dryrun
\family default

\begin_inset LatexCommand \index{simulator!dryun}

\end_inset


\family typewriter
 
\family default
parameter of 
\family typewriter
evolve() 
\family default
function to true.
 
\family typewriter
evolve 
\family default
will then print out the order of operators to apply.
 Consider that operators can be 
\family typewriter
PreMating
\begin_inset LatexCommand \index{constant!PreMating}

\end_inset


\begin_inset LatexCommand \index{operator!PreMating}

\end_inset

, PostMating
\begin_inset LatexCommand \index{constant!PostMating}

\end_inset


\begin_inset LatexCommand \index{operator!PostMating}

\end_inset

, PrePostMating
\begin_inset LatexCommand \index{constant!PrePostMating}

\end_inset


\begin_inset LatexCommand \index{operator!PrePostMating}

\end_inset

, DuringMating
\begin_inset LatexCommand \index{constant!DuringMating}

\end_inset


\begin_inset LatexCommand \index{operator!DuringMating}

\end_inset

 
\family default
and the default value (parameter 
\family typewriter
stage
\family default
) may not be what you expect, having a look at the calling sequence before
 real evolution is always a good idea.
\end_layout

\begin_layout Section
Evolution
\end_layout

\begin_layout Standard
Simulators can evolve a given number of generations (the
\family typewriter
 'end'
\family default
 parameter of evolve), or evolve indefinitely using a certain type of operators
 called terminators.
 In this case, one or more terminators will check the status of evolution
 and determine if the simulation should be stopped.
 An obvious example of such a terminator is a fixation-checker.
 Useful simulator functions are
\end_layout

\begin_layout Itemize

\family typewriter
gen
\begin_inset LatexCommand \index{simulator!gen}

\end_inset

() 
\family default
return current generation number
\end_layout

\begin_layout Itemize

\family typewriter
setGen
\begin_inset LatexCommand \index{simulator!setGen}

\end_inset

() 
\family default
set current generation.
 Usually used to reset a simulator
\end_layout

\begin_layout Itemize

\family typewriter
population
\begin_inset LatexCommand \index{simulator!population}

\end_inset

() 
\family default
return temporary reference of one of the populations.
 'Reference' means that the changes to the referred population will reflect
 to the one in simulator.
 'Temporary' means that the referred population might be invalid after evolution.
\end_layout

\begin_layout Itemize

\family typewriter
evolve
\begin_inset LatexCommand \index{simulator!evolve}

\end_inset

() 
\family default
evolve all replicates of the population
\end_layout

\begin_layout Itemize

\family typewriter
apply
\begin_inset LatexCommand \index{simulator!apply}

\end_inset

() 
\family default
apply a list of operators to all populations.
\end_layout

\begin_layout Itemize

\family typewriter
step
\begin_inset LatexCommand \index{simulator!step}

\end_inset

()
\family default
 evolve one generation.
\end_layout

\begin_layout Standard
The most useful function is of course 
\family typewriter
evolve
\family default
, which takes parameters
\end_layout

\begin_layout Itemize

\family typewriter
preOps:
\family default
 operators that will be applied before evolution
\end_layout

\begin_layout Itemize

\family typewriter
ops: 
\family default
opeartors that will be applied at each generation.
 
\end_layout

\begin_layout Itemize

\family typewriter
postOps: 
\family default
operators that will be applied after evolution.
\end_layout

\begin_layout Itemize

\family typewriter
end:
\family default
 ending generation.
 Default to -1.
 In this case, a simulator will only be ended by a terminator.
\end_layout

\begin_layout Itemize

\family typewriter
dryrun: 
\family default
dryrun mode.
 see previous section
\end_layout

\begin_layout Itemize

\family typewriter
saveAs:
\family default
 saveAt, format: see next section
\end_layout

\begin_layout Section
Save and Load
\end_layout

\begin_layout Standard
A simulator can be saved to a file in the format of
\family typewriter
 'txt', 'bin'
\family default
, or
\family typewriter
 'xml'
\family default
.
 This enables us to stop a simulation and resume it at another time or on
 another machine.
 It is also a good idea to save a snapshot of a simulation every several
 generations.
 Note that mating scheme can not be saved and has to be re-specified in
 
\family typewriter
LoadSimulator
\begin_inset LatexCommand \index{loadSimulator}

\end_inset

()
\family default
.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/simulatorsaveload
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/simulatorsaveload.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
simulators can also be saved during evolution.
 Three relevant parameters of 
\family typewriter
evolve()
\family default
 function are:
\end_layout

\begin_layout Itemize

\family typewriter
saveAs:
\family default
 filename to save the simulator.
 Default to 
\family typewriter
simu
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
saveAt: 
\family default
generations at which to save the simulator.
 Generation can be negative, meaning counting backwards.
\end_layout

\begin_layout Itemize

\family typewriter
format: 
\family default
format.
 Default to 'bin'.
\end_layout

\begin_layout Standard
During evolution, simulator will be saved at 
\family typewriter
saveAt
\family default
 generations with filenames 
\family typewriter
saveAs+gen+format 
\family default
(for example 
\family typewriter
simu1000.bin
\family default
).
\end_layout

\begin_layout Standard
It is also possible to build a simulator from a bunch of populations:
\end_layout

\begin_layout Itemize

\family typewriter
SimulatorFromPops(pops, mating)
\family default
, build a simulator with given populations and mating scheme
\end_layout

\begin_layout Itemize

\family typewriter
SimulatorFromFiles(files, mating)
\family default
, load populations from a given list of files (population images) and build
 a simulator with given mating scheme.
\end_layout

\begin_layout Chapter
Operators
\end_layout

\begin_layout Standard
Operators are objects that act on populations.
 They (there are exceptions) can be applied to populations directly using
 
\family typewriter
apply
\family default
() member function, but most of the time they are managed and applied by
 a simulator.
\end_layout

\begin_layout Section
Type of operators
\end_layout

\begin_layout Standard
There are three kinds of operators:
\end_layout

\begin_layout Itemize

\emph on
built-in:
\emph default
 written in C++, fastest.
 They do not interact with Python shell except that some of them set variables
 that are accessible from Python.
\end_layout

\begin_layout Itemize

\emph on
hybrid
\emph default

\begin_inset LatexCommand \index{hybrid}

\end_inset

: written in C++ but calls python function when execution.
 Less efficient.
 For example, a hybrid mutator 
\family typewriter
pyMutator 
\family default
will determine if an allele will be mutated and call a user--defined Python
 function to mutate it.
\end_layout

\begin_layout Itemize

\emph on
pure python
\emph default
: written in python.
 Same speed as python.
 For example, a 
\family typewriter
varPlotter
\begin_inset LatexCommand \index{varPlotter}

\end_inset


\family default
 can plot python variables that are set by other operators.
\end_layout

\begin_layout Standard
You do not have to know the type of an operator to use them.
 The interface of them are all the same.
 Note that although it is possible to write pure python operators to operate
 directly on populations, it might work very slowly compared to the built-in
 ones.
 If you believe some operators are important, please post to the simuPOP
 forum and I will see if I can implement it internally.
 It would be best if you have a working python version of the operator.
\end_layout

\begin_layout Subsection
Applicable Stages
\begin_inset LatexCommand \index{applicable stage}

\end_inset


\end_layout

\begin_layout Standard
Operators can be applied at different stage(s) of a life cycle.
 More specifically, at pre-, during- or post mating stage(s).
 Note that it is possible for an operator to apply multiple times in a life
 cycle.
 For example, an save-to-file operator might be applied before and after
 mating to trace parental information.
 Applicable stages are usually set by default but you can change it by setting
 
\family typewriter
stage=(PreMating|PostMating|DuringMating|PrePostMating) 
\family default
parameter.
 Note that some operators ignore 
\family typewriter
stage 
\family default
parameter since they have to work at a certain stage.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/operatorstages
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/operatorstages.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Active Generations
\end_layout

\begin_layout Standard
Operators do not have to be applied at all generations.
 You can specify starting generation, ending generation, gaps between applicable
 generations, or even specific generations to apply.
 For example, you might want to start applying migrations after certain
 heat-up generation; or you want to calculate every 10 generations.
 Operators take the following parameters during initialization:
\end_layout

\begin_layout Itemize

\family typewriter
begin
\begin_inset LatexCommand \index{begin}

\end_inset

 
\family default
start generation.
 default to 1.
 negative number is interpreted as endGeneration + begin 
\end_layout

\begin_layout Itemize

\family typewriter
end
\begin_inset LatexCommand \index{end}

\end_inset


\family default
 stop applying after this generation.
 negative number is allowed
\end_layout

\begin_layout Itemize

\family typewriter
step
\begin_inset LatexCommand \index{step}

\end_inset

 
\family default
number of generations between active generations.
 default to 1 
\end_layout

\begin_layout Itemize

\family typewriter
at
\begin_inset LatexCommand \index{at}

\end_inset


\family default
 an array of active generations.
 If given, begin, end, step will be ignored.
\end_layout

\begin_layout Standard
For example
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/operatorgen
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/operatorgen.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last example displays variable 
\family typewriter
gen 
\family default
for each replicate (actually all get from global namespace since 
\family typewriter
gen 
\family default
is shared by all replicates).
 Note that you can use negative generation number whenever you specifies
 the 
\family typewriter
end
\family default
 parameter of evolve.
 In this case, generation -1 is the last generation (end), -2 is end -1,
 and so on.
\end_layout

\begin_layout Subsection
Replicates and Groups
\end_layout

\begin_layout Standard
Most operators are applied to every replicate of a simulator during evolution.
 However, you can apply operators to one or a group of replicates only.
 For example, you can initialize different replicates with different initial
 values and then start evolution.
 c.f.

\family typewriter
 simulator::setGroup 
\family default
.
 
\end_layout

\begin_layout Standard
The most useful example is 
\end_layout

\begin_layout LyX-Code
output('
\backslash
n',rep=REP_LAST)
\end_layout

\begin_layout Standard
that will output 
\family typewriter

\backslash
n 
\family default
at the end of each generation.
 It is so frequently used so I have wrapped it as a pure python operator
 in 
\family typewriter
simuUtil.py.
\end_layout

\begin_layout Standard
Here is an example of using replicate groups:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/operatorgrp
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/operatorgrp.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Output Specification
\end_layout

\begin_layout Standard
Operators can have outputs.
 Output can be standard output (terminal) or a file, which can be constant,
 or change with generation or replicate.
 Different operators can append to the same file to form table-like outputs.
 
\end_layout

\begin_layout Standard
Filename can have the following format:
\end_layout

\begin_layout Itemize

\family typewriter
'filename'
\family default
 this file will be closed after each use.
 I.e., if several operators output to the same file, only the last one will
 succeed.
\end_layout

\begin_layout Itemize

\family typewriter
'>filename' 
\family default
the same as 'filename'
\end_layout

\begin_layout Itemize

\family typewriter
'>>filename' 
\family default
The file will be created at the beginning of evolution (
\family typewriter
simulator::evolve
\family default
) and close at the end.
 Several operators can output to this file to form a table.
\end_layout

\begin_layout Itemize

\family typewriter
'>>>filename' 
\family default
The same as 
\family typewriter
'>>filename'
\family default
 except that the file will not be cleared at the beginning of evolution
 if it is not empty.
 
\end_layout

\begin_layout Itemize

\family typewriter
'>'
\family default
 out put to standard output.
\end_layout

\begin_layout Itemize

\family typewriter
'' 
\family default
suppress output.
\end_layout

\begin_layout Standard
The following example shows the difference between 
\family typewriter

\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset


\family default
 and 
\family typewriter

\begin_inset Quotes eld
\end_inset

>>
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/operatoroutput
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/operatoroutput.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the first simulator, all operators uses 
\family typewriter

\begin_inset Quotes eld
\end_inset

a.txt
\begin_inset Quotes erd
\end_inset


\family default
 (the same as 
\family typewriter

\begin_inset Quotes eld
\end_inset

>a.txt
\begin_inset Quotes erd
\end_inset


\family default
).
 This file is repeatedly covered by other operators so what we finally get
 is a newline written by 
\family typewriter
output(
\begin_inset Quotes eld
\end_inset


\backslash
n
\begin_inset Quotes erd
\end_inset

)
\family default
.
 The second simulator works fine by using 
\family typewriter

\begin_inset Quotes eld
\end_inset

>>a.txt
\begin_inset Quotes erd
\end_inset


\family default
.
\end_layout

\begin_layout Standard
Output filename does not have to be fixed.
 If 
\family typewriter
outputExpr 
\family default
parameter is used (
\family typewriter
output
\family default
 will be ignored), it will be evaluated when a filename is needed.
 This is useful when you need to write to different files for different
 replicate/generations.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/operatoroutputexpr
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/operatoroutputexpr.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Python expression and statistics calculation
\end_layout

\begin_layout Subsection
Expressions and Statements
\end_layout

\begin_layout Standard
Expressions are used extensively in operators so basic knowldege of python
 is required.
 If you know almost nothing about Python, please spend some time on the
 Python tutorial from python website.
\end_layout

\begin_layout Standard
Unlikely C/C++, assignments in Python do not return values.
 This is the biggest difference between Python expression and statement:
\end_layout

\begin_layout Itemize
expressions consist of constants, variables, operators, functions, but 
\emph on
no 
\emph default
assignments, condition, loop etc.
 Expression returns a value when executed.
 An example of expression is 
\family typewriter
range(1,5)+10 
\family default
.
\end_layout

\begin_layout Itemize
statements consist of arbitrary valid python code.
 Statement does 
\emph on
not
\emph default
 return a value when executed.
 An example of statement is 
\family typewriter
a=range(1,5)
\family default
 .
\end_layout

\begin_layout Subsection
simuPOP variables
\end_layout

\begin_layout Standard
All populations have their own attached variables.
 We have seen the structure of a population dictionary: it starts empty
 and will have many variables created by various operators.
 You can access local namespace of each replicate through a simulator's
 
\family typewriter
vars(rep) 
\family default
function:
\end_layout

\begin_layout LyX-Code
simu.vars(0)        simu.vars(1) ...
      // replicate
\end_layout

\begin_layout LyX-Code
  popSize             popSize            // local namespace
\end_layout

\begin_layout LyX-Code
  alleleFreq[0]       alleleFreq[0]      // allele frequency at locus 1
\end_layout

\begin_layout LyX-Code
  alleleFreq[1]       alleleFreq[1]      // at locus 2
\end_layout

\begin_layout LyX-Code
  ...
                 ....
\end_layout

\begin_layout LyX-Code
  subPop[0]           subPop[0]          // subpop namespace
\end_layout

\begin_layout LyX-Code
    popSize             popSize          // subpopulation 1 size
\end_layout

\begin_layout LyX-Code
    allaleFreq[0]       allaleFreq[0]    // allele frequency at locus 1
\end_layout

\begin_layout LyX-Code
    ...
                 ...
\end_layout

\begin_layout LyX-Code
  subPop[1]           subPop[1]          // variables for subpop 2
\end_layout

\begin_layout LyX-Code
    ...
                 ...
\end_layout

\begin_layout Standard
It is important to know that
\end_layout

\begin_layout Itemize

\family typewriter
simulator::vars[0], vars[1] 
\family default
etc are the 
\emph on
local namespaces
\emph default
 for each replicate.
\end_layout

\begin_layout Itemize

\family typewriter
subPop[0], subPop[1] 
\family default
etc have almost the same set of keys as those for the whole population.
 This is because 
\family typewriter
stat
\family default
 operator calculate statistics of each replicate of population, and all
 subpopulations.
\end_layout

\begin_layout Standard
To list these variables, you can use the 
\family typewriter
ListVars() 
\family default
function defined in 
\family typewriter
simuUtil.py
\family default
.
 For example
\end_layout

\begin_layout LyX-Code
ListVars(simu.vars(0), level=2)
\end_layout

\begin_layout Standard
list all variables for the first replicate.
 
\family typewriter
Level=2
\family default
 stops 
\family typewriter
ListVars
\family default
 from expanding lists and dictionaries after two levels.
 
\end_layout

\begin_layout Standard
Two functions can be used to access simulator and population variables:
 
\family typewriter
vars()
\family default
 and
\family typewriter
 dvars()
\family default
.
 We have known 
\family typewriter
population::vars() 
\family default
and 
\family typewriter
population::dvars()
\family default
, 
\family typewriter
simulator::vars() 
\family default
and 
\family typewriter
simulator::dvars()
\family default
 work in almost the same way.
 
\end_layout

\begin_layout Itemize

\family typewriter
simulator::vars(rep
\family default
),
\family typewriter
 dvars(rep):
\family default
 return replicate 
\family typewriter
rep
\family default
's local namespace
\end_layout

\begin_layout Itemize

\family typewriter
simulator::vars(rep, subPop
\family default
),
\family typewriter
 dvars(rep, subPop):
\family default
 return the namespace of
\family typewriter
 subPop
\family default
 subpopulation of replicate 
\family typewriter
rep.
\end_layout

\begin_layout Standard
The return values of
\family typewriter
 vars() 
\family default
and 
\family typewriter
dvars() 
\family default
are different.
 
\family typewriter
vars()
\family default
 returns a Python dictionary.
 You should access their keys in the usual Python way.
 
\family typewriter
dvars() 
\family default
returns a 'wrapped' Python dictionary.
 You can access dictionary keys as attributes.
 
\family typewriter
dvars() 
\family default
is usually considered to be easier to use.
\end_layout

\begin_layout Subsection

\family typewriter
evaluate
\begin_inset LatexCommand \index{calculate}

\end_inset

 
\family default
function and 
\family typewriter
pyEval
\begin_inset LatexCommand \index{calc}

\end_inset

 
\family default
and
\family typewriter
 pyExec
\begin_inset LatexCommand \index{pyExec}

\end_inset


\family default
 operators
\end_layout

\begin_layout Standard
Function 
\family typewriter
population::evaluate 
\family default
and operator 
\family typewriter
pyEval/pyExec 
\family default
will work in local namespaces.
 For example, if there are 
\family typewriter
a
\family default
 and 
\family typewriter
b
\family default
 in the main namespace and 
\family typewriter
a
\family default
 in 
\family typewriter
pop
\family default
, 
\family typewriter
pop.evaluate('a')
\family default
 will return 
\family typewriter
pop.vars()['a']
\family default
, 
\family typewriter
pop.evaluate('b') 
\family default
will return global 
\family typewriter
b
\family default
 since there is no 
\family typewriter
b
\family default
 in the local namespace.
 It this is still too abstract, here is a real example
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/exprvarsrep
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/exprvarsrep.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
simulator 
\family default
creates a simulator with two replicates 0 and 1.
 
\end_layout

\begin_layout Itemize
We evaluate 
\family typewriter
grp*2
\family default
 in different replicates and get different results.
\end_layout

\begin_layout Itemize

\family typewriter
gen 
\family default
is not in either replicate's namespace so the global one will be used.
\end_layout

\begin_layout Itemize
Using statements can create variables in local namespaces.
 (You can use 
\family typewriter
global 
\family default
statement to create global variable if you are familiar with python.)
\end_layout

\begin_layout Standard

\family typewriter
pyEval/pyExec 
\family default
operators execute python expression/statements, 
\emph on
using local namespaces
\emph default
.
\end_layout

\begin_layout Itemize

\family typewriter
pyEval 
\family default
(operator) evaluate a Python expression and return its value, optional execute
 a list of statements beforehand.
\end_layout

\begin_layout Itemize

\family typewriter
pyExec 
\family default
(operator) execute a list of statements in the form of a multi-line string.
 No return value or output.
\end_layout

\begin_layout Standard
Here, 
\family typewriter
expr
\family default
 is a simple string containing an expression that will return a value when
 executed; 
\family typewriter
stmts 
\family default
is a string of statements, separated by 
\family typewriter
'
\backslash
n'
\family default
.
 
\end_layout

\begin_layout Standard
For example, you can return a string of 
\begin_inset Quotes eld
\end_inset

gen:rep
\begin_inset Quotes erd
\end_inset

 using the following function
\end_layout

\begin_layout LyX-Code
pop.evaluate(r
\begin_inset Quotes eld
\end_inset

'%d:%d' % (gen,rep)
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
but if you would like to change/create variables, you have to use statements
 like
\end_layout

\begin_layout LyX-Code
pop.evalulate(r
\begin_inset Quotes eld
\end_inset

myval
\begin_inset Quotes erd
\end_inset

, stmts=r
\begin_inset Quotes erd
\end_inset

myval=rep+1
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
Since you are executing Python statements, you can of course do it directly
 in python.
 For example, the above function does exactly the following
\end_layout

\begin_layout LyX-Code
pop.vars()['myval'] = pop.vars()['rep'] + 1
\end_layout

\begin_layout LyX-Code
pop.vars()['myvar']
\end_layout

\begin_layout Standard
As a matter of fact, we seldom use 
\family typewriter
evaluate
\family default
 function directly (maybe for debuging), usually
\end_layout

\begin_layout Itemize
we use expressions for dynamic parameters.
 For example:
\end_layout

\begin_deeper
\begin_layout LyX-Code
newSubPopSizeExpr=
\begin_inset Quotes erd
\end_inset

range(10,20)*1.2
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
outputExpr= ' 
\begin_inset Quotes erd
\end_inset

saveAt%s.txt
\begin_inset Quotes erd
\end_inset

 % gen'
\end_layout

\begin_layout Standard
These parameters will be evaluated whenever they are referred.
\end_layout

\end_deeper
\begin_layout Itemize
we use expression/statements in
\family typewriter
 pyEval/pyExec 
\family default
operators.
 These statements will work in local namespaces.
 For example:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/expreval
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/expreval.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because of the interactive nature of python, it is very easy to write short
 programs, quote them in 
\family typewriter
r'''program''' 
\family default
and put them in to 
\family typewriter
pyEval/pyExec 
\family default
operators.
\end_layout

\begin_layout Subsection
Calculate new statistics
\end_layout

\begin_layout Standard
simuPOP provides many built-in or pure-Python operators that can calcualte
 various statistics.
 If you can not find the one you need, you can calculate them by yourself.
 Firstly, you need to 
\end_layout

\begin_layout Subsubsection*
Check if your statistics can be calcualted based on exisiting statistics
\end_layout

\begin_layout Standard
Most statistics can be calcualted from basic quantities like allele frequencies.
 This chapter will only deal with this case.
 Please refer to chapter 'extending simuPOP' for methods to access arbitrary
 population information.
\end_layout

\begin_layout Subsubsection*
calculate them with existing operators
\end_layout

\begin_layout Standard
Run a simple simulation and generate the statistics you need.
 For example: 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/calcStat
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/calcStat.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection*
know how to acess these variables
\end_layout

\begin_layout Standard
For example, use 
\end_layout

\begin_layout LyX-Code
s = simu.dvars(1)
\end_layout

\begin_layout LyX-Code
a.haploNum['1-2|1-2']
\end_layout

\begin_layout Subsubsection*
Write a function to calculate your statistics
\end_layout

\begin_layout Standard
Once you know how to access the basic statistics, you can write a function
 to calculate your own statistics based on them.
 For example, the following function calculate 
\begin_inset Formula $F_{st}$
\end_inset

, 
\begin_inset Formula $F_{is}$
\end_inset

, 
\begin_inset Formula $F_{it}$
\end_inset

 based on heterozygosities calculated by 
\family typewriter
stat
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/calcFstH
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/calcFstH.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function calculate and set 
\family typewriter
heter_obs
\family default
.
 It is recommeneded that you always use 
\family typewriter
rep
\family default
 and 
\family typewriter
subPop
\family default
 parameters so that your function can be applied to any population/subpopulation
 at any replicate.
 
\end_layout

\begin_layout Standard
You can use this function to calculate observed heterozygosity for any populatio
n/subpopulation like
\end_layout

\begin_layout LyX-Code
calc_Fst_H(pop, 1)
\end_layout

\begin_layout Standard
If you would like to calculate this statistics as an operator (set 
\family typewriter
heter_obs 
\family default
automatically), you need to 
\end_layout

\begin_layout Subsubsection*
Wrap this function as an operator (optional)
\end_layout

\begin_layout Standard
The basic idea is that you use a function that return an appropriate 
\family typewriter
pyExec 
\family default
opertor.
 This part is a bit more involved.
 If you can not understand the following code, give up or read more at 'extendin
g simuPOP' chapter.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/wrapFstH
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/wrapFstH.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some notes:
\end_layout

\begin_layout Itemize

\family typewriter
kwargs 
\family default
and 
\family typewriter
parm 
\family default
are used to pass additional parameters (at, begin, output etc) to pyExec
 operator.
\end_layout

\begin_layout Itemize

\family typewriter
cmd
\family default
 is the 
\family typewriter
pyExec 
\family default
operator we would like to get.
 We use 
\family typewriter
pyExec 
\family default
since statistics calculators usually do not return values.
\end_layout

\begin_layout Itemize
It is always a good idea to 
\family typewriter
print cmd 
\family default
and make sure you have the right syntax for your 
\family typewriter
pyExec 
\family default
operator.
\end_layout

\begin_layout Itemize

\family typewriter
exposePop=1 
\family default
is used to set a variable 
\family typewriter
pop
\family default
 in local namespace.
 
\end_layout

\begin_layout Itemize
Finally, use 
\family typewriter
eval 
\family default
to return the operator.
\end_layout

\begin_layout Subsubsection*
Use the opeator (optional)
\end_layout

\begin_layout Standard
Use the operator 
\family typewriter
hetero
\family default
 just like any other operator:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/useFstH
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/useFstH.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Writing simuPOP scripts
\end_layout

\begin_layout Subsection
Conventions of simuPOP scripts
\end_layout

\begin_layout Standard
A simuPOP script is usually composed of the following parts:
\end_layout

\begin_layout Enumerate
First line:
\end_layout

\begin_deeper
\begin_layout LyX-Code
#!/usr/bin/env python
\end_layout

\end_deeper
\begin_layout Enumerate
Introduction to the whole script:
\end_layout

\begin_deeper
\begin_layout LyX-Code
'''
\end_layout

\begin_layout LyX-Code
This script will ....
\end_layout

\begin_layout LyX-Code
'''
\end_layout

\begin_layout Standard
These comments can be accessed as module 
\family typewriter
__doc__ 
\family default
and will be displayed as help message.
\end_layout

\end_deeper
\begin_layout Enumerate
Options: (see the next section)
\end_layout

\begin_deeper
\begin_layout LyX-Code
options = [ 
\end_layout

\begin_layout LyX-Code
...
 a dictionary of all user input parameters ...
\end_layout

\begin_layout LyX-Code
]
\end_layout

\begin_layout Standard
These parameters will be handled by simuPOP automatically.
 Users will be able to set them through command line, configuration file,
 Tkinter- or wxPython-based GUI.
\end_layout

\end_deeper
\begin_layout Enumerate
Auxillary functions
\end_layout

\begin_layout Enumerate
Evolution function
\end_layout

\begin_deeper
\begin_layout LyX-Code
def simulation(....)
\end_layout

\end_deeper
\begin_layout Enumerate
Executable part:
\end_layout

\begin_deeper
\begin_layout LyX-Code
if __name__ == '__main__':  
\end_layout

\begin_layout LyX-Code
  allParam = simuOpt.getParam(options,
\end_layout

\begin_layout LyX-Code
    ''' A short description ''', __doc__)
\end_layout

\begin_layout LyX-Code
  # if user press cancel,
\end_layout

\begin_layout LyX-Code
  if len(allParam) == 0:
\end_layout

\begin_layout LyX-Code
    sys.exit(1)
\end_layout

\begin_layout LyX-Code
  # -h or --help
\end_layout

\begin_layout LyX-Code
  if allParam[0]:  
\end_layout

\begin_layout LyX-Code
    print simuOpt.usage(options, __doc__)
\end_layout

\begin_layout LyX-Code
    sys.exit(0)
\end_layout

\begin_layout LyX-Code
  # sace configuration, something like
\end_layout

\begin_layout LyX-Code
  if allParam[-2] != None:
\end_layout

\begin_layout LyX-Code
     simuOpt.saveConfig(options, allParam[-2]+'.cfg', allParam)  
\end_layout

\begin_layout LyX-Code
  # get the parameters, something like
\end_layout

\begin_layout LyX-Code
  N = allParam[1]
\end_layout

\begin_layout LyX-Code
  # run the simulation
\end_layout

\begin_layout LyX-Code
  simulation(N) 
\end_layout

\begin_layout LyX-Code
  
\end_layout

\end_deeper
\begin_layout Standard
You will notice that 
\family typewriter
simuOpt 
\family default
does all the housekeeping things for you, including parameter reading, conversio
n, validation, print usage, save configuration file.
 Since most of the parts are pretty standard, you can actually copy any
 of the scripts under the 
\family typewriter
scripts 
\family default
directory as a template for your new script.
\end_layout

\begin_layout Standard
Note that these scripts, if proper written, can also be imported.
 Other scripts (or interactive session) can import a script and call its
 simulation function directly.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Parameter handling and user input 
\end_layout

\begin_layout Standard
Although simuPOP scripts, simply Python scripts, can be in any valid Python
 style, it is highly recommended that all simuPOP scripts follow the same
 writing style and provide a uniform interface to users.
 From a user's point of view, a simuPOP script 
\family typewriter
cmd.py 
\family default
should
\end_layout

\begin_layout Enumerate
Start a Tk/wxPython dialog to accept user input when 
\family typewriter
--noDialog 
\family default
is not specified.
\end_layout

\begin_layout Enumerate
List all commandline/config file options through 
\family typewriter
-h
\family default
 or 
\family typewriter
--help 
\family default
option.
 
\end_layout

\begin_layout Enumerate
Accept 
\family typewriter
-c 
\family default
or 
\family typewriter
--config 
\family default
parameter to read a configuration file and set parameters.
\end_layout

\begin_layout Enumerate
Be able to use command line arguments to set parameters as well.
\end_layout

\begin_layout Enumerate
Accept 
\family typewriter
--saveconfig file 
\family default
to save current configuration (input my commandline argument) into 
\family typewriter
file
\family default
.
\end_layout

\begin_layout Enumerate
Be able to make use of optimized libraries through the use of command line
 parameter ( 
\family typewriter
--optimized
\family default
), config file entry (
\family typewriter
optimized=True
\family default
) or environment variable (
\family typewriter
SIMUOPTIMIZED
\family default
).
 
\end_layout

\begin_layout Enumerate
Be able to make use of longallele libraries through the use of command line
 parameter (
\family typewriter
--longallele
\family default
), config file entry (
\family typewriter
longallele=True
\family default
) or environment variable (
\family typewriter
SIMULONGALLELE
\family default
).
 
\end_layout

\begin_layout Standard
To alleviate throuble of doing all these, 
\family typewriter
simuPOP
\family default
 has provided a set of functions.
 Here is how parameters should be handled.
 The first step is decribe each parameter in details.
 This includes (not all is necessary) short and long argument name, entry
 on a configuration file, prompt when asking for user input, default value,
 description that will be shown in usage, allowed types of parameter, function
 to validate the input value.
 All these should be put in a list of dictionaries like follows:
\end_layout

\begin_layout LyX-Code
options = [
\end_layout

\begin_layout LyX-Code
  { 'arg':'h', 'longarg':'help', 'default':False,
\end_layout

\begin_layout LyX-Code
    'allowedTypes':[IntType],
\end_layout

\begin_layout LyX-Code
    'description':'print this message'},
\end_layout

\begin_layout LyX-Code
  { 'longarg':'saveconfig=', 'default':'', 'allowedTypes':[StringType],
\end_layout

\begin_layout LyX-Code
    'description':'Save current configuration in a file.'},
\end_layout

\begin_layout LyX-Code
  { 'arg':'m', 'longarg':'mu', 'configName'='mutationRate', 
\end_layout

\begin_layout LyX-Code
    'default':0.005,
\end_layout

\begin_layout LyX-Code
    'prompt':'Please enter mutation rate (default 0.005): ',
\end_layout

\begin_layout LyX-Code
    'validate': simuOpt.valueBetween(0,1),
\end_layout

\begin_layout LyX-Code
    'description':'mutation rate (a number or an array of numbers) at each
 loci'
\end_layout

\begin_layout LyX-Code
  } ]
\end_layout

\begin_layout Standard
The entries:
\end_layout

\begin_layout Itemize

\family typewriter
arg
\family default
 and 
\family typewriter
longarg
\family default
 are command line argument format.
 For example,
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
arg:'h' 
\family default
checks the presence of argument 
\family typewriter
-h
\family default
, return 
\family typewriter
True
\family default
 if succeeds
\end_layout

\begin_layout Itemize

\family typewriter
arg:'f:'
\family default
 checks the presence of argument pair
\family typewriter
 -f something
\family default
, return 
\family typewriter
something
\family default
 if succeeds
\end_layout

\begin_layout Itemize

\family typewriter
longarg:'help' 
\family default
cheks the prescence of argument 
\family typewriter
--longarg
\family default
, return 
\family typewriter
True 
\family default
if succeeds
\end_layout

\begin_layout Itemize

\family typewriter
longarg:'mu=' 
\family default
checks the presence of argument pair
\family typewriter
 --mu number
\family default
, return
\family typewriter
 number
\family default
 if succeeds.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
configName 
\family default
is the entry of the parameter in config file.
 This will also be used as the label of input field in a parameter dialog.
 Blanks are allowed.
 Since you will seldom write a config file manually, using a longer name
 will do no harm.
\end_layout

\begin_layout Itemize

\family typewriter
prompt
\family default
 is prompted when user input is required.
 This is when
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
--noDialog
\family default
 is used to avoid parameter dialog
\end_layout

\begin_layout Itemize
No command line argument is found, 
\end_layout

\begin_layout Itemize
no config file is specified, 
\end_layout

\begin_layout Itemize

\family typewriter
prompt
\family default
 is not empty
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
default
\family default
 is used when prompt is empty, or when user press enter directly.
\end_layout

\begin_layout Itemize

\family typewriter
description 
\family default
is the description of this parameter, will be put into usage information.
 ( 
\family typewriter
-h 
\family default
or help button in parameter dialog).
\end_layout

\begin_layout Itemize

\family typewriter
allowedTypes
\family default
 is the accepted types.
 If 
\family typewriter
allowedTypes 
\family default
is 
\family typewriter
types.ListType
\family default
 or 
\family typewriter
types.TupleType
\family default
 and user input is a scalar, the input will be converted to a list automatically.
\end_layout

\begin_layout Itemize

\family typewriter
validate
\family default
 is a function to validate the parameter.
 You can define your own functions or use the following from 
\family typewriter
simuOpt
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
valueGT(a), valueLT(a), valueGE(a), valueLE(a)
\family default
: check greater than, less than, greater equal, less equal to a value 
\family typewriter
a.
\end_layout

\begin_layout Itemize

\family typewriter
valueBetween(a,b), valueOneOf(list):
\family default
 check if the value is between 
\family typewriter
a 
\family default
and 
\family typewriter
b 
\family default
or is one of 
\family typewriter
list
\end_layout

\begin_layout Itemize

\family typewriter
valueValidFile(), valueValidDir():
\family default
 check if the parameter is a valid file/directory name.
\end_layout

\begin_layout Itemize

\family typewriter
valueListOf():
\family default
 check if parameter is a list of given type, in a list of types, or pass
 a validator.
 For example, you can use 
\family typewriter
valueListOf(types.IntType)
\family default
, 
\family typewriter
valueListOf([types.IntType, types.LongType])
\family default
 or 
\family typewriter
valueListOf( valueValidFile()).
 
\family default
As you can see, validators can be nested.
\end_layout

\begin_layout Itemize

\family typewriter
valueOr(validator), valueAnd(val1, val2), valueOr(val1,val2) 
\family default
accepts other validators and perform respective logical calculation.
 For example
\end_layout

\begin_deeper
\begin_layout LyX-Code
valueOr( valueGT(0), valueListOf( valueGT(0) ))
\end_layout

\begin_layout Standard
accept a positive number, or a list of positive number.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\family typewriter
chooseOneOf: 
\family default
If specified, 
\family typewriter
simuOpt
\family default
 will choose one from a list of values using a listbox (tk) or a combo box
 (wxPython) .
\end_layout

\begin_layout Itemize

\family typewriter
chooseFrom:
\family default
 If specified, 
\family typewriter
simuOpt 
\family default
will choose one or more items from a list of values using a listbox (tk)
 or a combo box (wxPython) .
 
\end_layout

\begin_layout Itemize

\family typewriter
separator:
\family default
 if specified, a blue label will be used to separate groups of parameters.
\end_layout

\begin_layout Itemize

\family typewriter
jump:
\family default
 jump is used to skip some parameter when doing interative user input.
 For example, 
\family typewriter
getParam
\family default
 will skip the rest of the parameters if
\family typewriter
 -h
\family default
 is specified since parameter 
\family typewriter
-h
\family default
 has item 
\family typewriter
'jump':-1
\family default
 which means jump to the end.
 Another use of this value is when you have a hierarchical parameter sets.
 For example, if mutation is on, specify mutation rate, otherwise proceed....
 
\end_layout

\begin_layout Itemize

\family typewriter
jumpIfFalse: 
\family default
The same as 
\family typewriter
jump
\family default
 but jump if current parameter is false.
\end_layout

\begin_layout Standard
With all these information at hand, the rest is routine, if you follow the
 coding conventions.
\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Chapter
Operator and Function References
\end_layout

\begin_layout Standard
This chapter will list all functions, types and operators by category.
\end_layout

\begin_layout Section
Library-dependent functions/constants
\end_layout

\begin_layout Standard
Several functions and constants are defined for each library
\end_layout

\begin_layout Itemize

\family typewriter
alleleType()
\family default
: return 
\family typewriter
'binary'
\family default
, 
\family typewriter
'short'
\family default
, or
\family typewriter
 'long'
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
MaxAllele
\family default
: 1 for binary libraries, usually 255 for short libraries and 
\begin_inset Formula $2^{32}-1$
\end_inset

 for long libraries.
 Note that this number for short and long libraries might change on different
 platforms.
\end_layout

\begin_layout Itemize

\family typewriter
simuVer()
\family default
: return version string
\end_layout

\begin_layout Itemize

\family typewriter
simuRev()
\family default
: simuPOP revision number.
 If your script needs a recent version of simuPOP, it is a good idea to
 test 
\family typewriter
simuRev()
\family default
 against the revision when the feature you need became available.
\end_layout

\begin_layout Section

\family typewriter
carray
\begin_inset LatexCommand \index{carray}

\end_inset

 
\family default
type
\end_layout

\begin_layout Standard
The return value of simuPOP functions that start with 
\family typewriter
arr
\family default
 is of a special python type 
\family typewriter
carray
\family default
.
 This object reflects the underlying C/C++ array and you can read/write
 array element just as a regular list.
 Only a small subset of list member functions, 
\family typewriter
count, index
\family default
 to be exact, are available.
 This is because you are not allowed to change the size of underlying C/C++
 vector.
 The following is the operations allowed:
\end_layout

\begin_layout LyX-Code
# obtain an object using one of the arrXXX functions
\end_layout

\begin_layout LyX-Code
pop = population(loci=[3,4], lociPos=[1,2,3,4,5,6,7])
\end_layout

\begin_layout LyX-Code
arr = pop.arrLociPos()
\end_layout

\begin_layout LyX-Code
# print and expression (just like list)
\end_layout

\begin_layout LyX-Code
print arr
\end_layout

\begin_layout LyX-Code
str(arr)
\end_layout

\begin_layout LyX-Code
# count
\end_layout

\begin_layout LyX-Code
arr.count(2)
\end_layout

\begin_layout LyX-Code
# index 
\end_layout

\begin_layout LyX-Code
arr.index, 2)
\end_layout

\begin_layout LyX-Code
# can read write
\end_layout

\begin_layout LyX-Code
arr[0] = 0.5
\end_layout

\begin_layout LyX-Code
# convert to list
\end_layout

\begin_layout LyX-Code
arr.tolist()
\end_layout

\begin_layout LyX-Code
# or simply
\end_layout

\begin_layout LyX-Code
list(arr)
\end_layout

\begin_layout LyX-Code
# compare to list directly
\end_layout

\begin_layout LyX-Code
arr == [0.5, 1.0, 3.0, 3.5, 5.0, 6.0, 7.0]
\end_layout

\begin_layout LyX-Code
# you can also convert and compare
\end_layout

\begin_layout LyX-Code
list(arr) == [0.5, 1.0, 3.0, 3.5, 5.0, 6.0, 7.0])
\end_layout

\begin_layout LyX-Code
# slice
\end_layout

\begin_layout LyX-Code
arr[:] = [1,2,3,4,5,6,7]
\end_layout

\begin_layout LyX-Code
# arr1 is 1,2,3
\end_layout

\begin_layout LyX-Code
arr1 = arr[:3]
\end_layout

\begin_layout LyX-Code
# assign slice from a number
\end_layout

\begin_layout LyX-Code
# IMPORTANT NOTE that arr will also be affected
\end_layout

\begin_layout LyX-Code
# since arr1 point to a part of arr
\end_layout

\begin_layout LyX-Code
arr1[:] = 10
\end_layout

\begin_layout LyX-Code
# assign vector of the same length
\end_layout

\begin_layout LyX-Code
arr1[:] = [30,40]
\end_layout

\begin_layout LyX-Code
# assign from another part
\end_layout

\begin_layout LyX-Code
arr[1:3] = arr[3:5]
\end_layout

\begin_layout Standard
No other operation is allowed.
 
\end_layout

\begin_layout Standard

\series bold
Important note: 
\series default
Objects returned from 
\family typewriter
arrXXX
\family default
 functions should be considered temporary.
 There is no gurantee the underlying array will still be valid after any
 operation.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Use of R (RPy) in Python
\end_layout

\begin_layout Standard
Most of the info can be found in rpy manual.
 One function in simuRPy may help though:
\end_layout

\begin_layout LyX-Code
def rmatrix(mat):
\end_layout

\begin_layout LyX-Code
  ' convert a python 2d list to r.matrix object'
\end_layout

\begin_layout LyX-Code
  return with_mode(NO_CONVERSION, r.do_call)('rbind',mat)
\end_layout

\begin_layout Standard
with this function, you can easily handle matrices in R.
 (List and array has been easy enough to be handled).
\end_layout

\begin_layout LyX-Code
>>> a = [[1,2],[4,5]]
\end_layout

\begin_layout LyX-Code
>>> r.image( rmatrix(a))
\end_layout

\begin_layout Standard
With the help of this function, you can call almost any R function directly,
 maybe except some R-only syntax like formula, expression etc.
 In this case, you can always do
\end_layout

\begin_layout LyX-Code
>>> r('''whatever R expression''')
\end_layout

\begin_layout Standard
Since Rpy is not always available, you may see the following scenario again
 and again in simuPOP scripts:
\end_layout

\begin_layout LyX-Code
try:
\end_layout

\begin_layout LyX-Code
  from simuRPy import *
\end_layout

\begin_layout LyX-Code
except:
\end_layout

\begin_layout LyX-Code
  hasRPy = False
\end_layout

\begin_layout LyX-Code
else:
\end_layout

\begin_layout LyX-Code
  hasRPy = True
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
if hasRPy:
\end_layout

\begin_layout LyX-Code
  r.....
\end_layout

\begin_layout Section
Operator (Hybrid) 
\family typewriter
pyOperator
\begin_inset LatexCommand \index{operator!pyOperator}

\end_inset


\end_layout

\begin_layout Standard
This is the single most powerful hybrid operator.
 Whenever you think that something is too complicated to be done by standard
 operators, you can do it here in python.
 This operator accepts a Python function which accepts a population and
 optionally a parameter.
 To use this operator, you will need to 
\end_layout

\begin_layout Itemize
define a function that handle a population as you wish.
\end_layout

\begin_deeper
\begin_layout LyX-Code
def myOperator(pop, para):
\end_layout

\begin_layout LyX-Code
  ' do whatever you want'
\end_layout

\begin_layout LyX-Code
  return True
\end_layout

\begin_layout Standard
If you return 
\family typewriter
False
\family default
, this operator will work like a terminator.
 
\family typewriter
para 
\family default
be ommitted.
\end_layout

\end_deeper
\begin_layout Itemize
use 
\family typewriter
pyOperator
\family default
 like
\end_layout

\begin_deeper
\begin_layout LyX-Code
pyOperator(mfunc=yOperator, param=para)
\end_layout

\begin_layout Standard
all parameters of an operator are supported except for 
\family typewriter
output
\family default
 and 
\family typewriter
outputExpr
\family default
 which are ignored for now.
\end_layout

\end_deeper
\begin_layout Standard
When 
\family typewriter
pyOperator 
\family default
is called, it will simply pass the accepted population to the function.
 If your function returns 
\family typewriter
False
\family default
, the simulation will be stopped.
\end_layout

\begin_layout Standard
This operator allows implementation of arbitrarily complicated operators,
 at a cost of efficiency.
 Of course, to use this operator, you will have to know how to use population-re
lated functions.
 The following example shows how to implement a dynamic mutator which mutate
 loci according to their allele frequency.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/pyOperator
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/pyOperator.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that 
\end_layout

\begin_layout Itemize
Currently, 
\family typewriter
pyOperator 
\family default
does not support parameter 
\family typewriter
output
\family default
 and 
\family typewriter
outputExpr
\family default
.
 This is because of the incompatibility between the Python way and underlying
 C++ way of handling file I/O stream.
 Consequently, you will have to handle file input/output by yourself through
 
\family typewriter
param
\family default
 parameter.
 Be careful that you 
\series bold
can not
\series default
 mix output of 
\family typewriter
pyOperator
\family default
 with those of other (normal) operators.
\end_layout

\begin_layout Itemize
If parameter 
\family typewriter
param
\family default
 is ignored, 
\family typewriter
myOperator
\family default
 must be without 
\family typewriter
para
\family default
 as well.
 Note that you can pass arbitrary number of parameters by putting them into
 a tuple and pass to 
\family typewriter
myOpeartor.
\end_layout

\begin_layout Itemize
Since you can attach any information to a population, you can in practise
 use 
\family typewriter
pop.dvars()
\family default
 to pass parameters.
\end_layout

\begin_layout Itemize

\family typewriter
pyOperator
\family default
 is a post-mating operator by default.
 Remember to use 
\family typewriter
stage 
\family default
parameter to change this when necessary.
\end_layout

\begin_layout Standard

\family typewriter
pyOperator
\family default
 can also be a DuringMating operator, you will need to define a function
 
\end_layout

\begin_layout LyX-Code
def Func(pop, off, dad, mom, para)
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
def shortFunc(off, para)
\end_layout

\begin_layout Standard
where 
\family typewriter
para 
\family default
can be ignored.
 To use this operator, you can do
\end_layout

\begin_layout LyX-Code
pyOperator(stage=DuringMating, func=Func, param=someparam, formOffGenotype=True)
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
pyOperator(stage=DuringMating, func=shortFunc, param=someparam,
\end_layout

\begin_layout LyX-Code
formOffGenotype=False, passOffspringOnly=True)
\end_layout

\begin_layout Standard
The two additional parameters are:
\end_layout

\begin_layout Itemize

\family typewriter
formOffGenotype: (
\family default
default to 
\family typewriter
False) 
\family default
By default, a mating scheme will set the genotype of offspring by copy one
 of the parental chromosomes.
 However, if 
\family typewriter
formOffGenotype
\family default
 is true, the mating scheme will let you do the job.
 You will have to set offspring genotype and sex by yourself.
\end_layout

\begin_layout Itemize

\family typewriter
passOffspringOnly:
\family default
 In case that your function will only deal with offspring, you can set this
 parameter to true and use a shorter form of the function.
 
\end_layout

\begin_layout Standard
Note that if your duringMating pyOpeartor returns False, the individual
 will be discarded.
 Therefore, you can write a filter in this way.
 However, since the python function will be called for each mating event,
 the cost of using such an operator is high, especially when population
 size is big.
\end_layout

\begin_layout Standard
An example of duringMating pyOperator can be found in 
\family typewriter
scripts/demoPyOperator.py
\family default
.
\end_layout

\begin_layout Section
Initialization
\begin_inset LatexCommand \index{initializer}

\end_inset


\end_layout

\begin_layout Standard
Initializers are used to initialize populations before evolution.
 They are set to be PreMating operators by default.
 simuPOP provides three initializers, one assigns alleles by random, one
 assigns a fixed set of genotype, and the last one calls a user-defined
 function.
\end_layout

\begin_layout Subsection
Operator (C++) 
\family typewriter
initByFreq
\begin_inset LatexCommand \index{operator!initByFreq}

\end_inset

, 
\family default
function
\family typewriter
 InitByFreq
\begin_inset LatexCommand \index{function!InitByFreq}

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
initByFreq 
\family default
operator accepts 
\family typewriter
alleleFreq 
\family default
or
\family typewriter
 alleleFreqs
\family default
.
 The first one ignores subpopulation structure while the second one gives
 different initial allele frequencies to different subpop or ranges.
 These parameters are
\end_layout

\begin_layout Itemize

\family typewriter
subPop:
\family default
 specifies applicable subpopulations.
 If 
\family typewriter
alleleFreqs
\family default
 are given, 
\family typewriter
alleleFreqs
\family default
 should have the same length as subPop.
 (One freq each subPop)
\end_layout

\begin_layout Itemize

\family typewriter
indRange
\family default
: range(s) of absolute index of individuals.
 I.e., one (
\family typewriter
[1,2]
\family default
) or more (
\family typewriter
[[1,4],[5,6]]
\family default
) ranges are acceptable.This is how you can initialize individuals differently
 within subpopulations.
 Note that ranges are in the form of
\family typewriter
 [a,b)
\family default
.
 I.e., range
\family typewriter
 [4,6] 
\family default
will intialize individual 4, 5, but not 6.
 As a shortcut for 
\family typewriter
[4,5]
\family default
, you can use 
\family typewriter
[4]
\family default
 to specify one individual.
 (Note that some earlier versions of simuPOP may use [4,6] for 4,5 and 6.
 I changed this to let the range specification in line with the Python conventio
n.)
\end_layout

\begin_layout Itemize

\family typewriter
atLoci: 
\family default
loci at which initialization will be done.
\end_layout

\begin_layout Itemize

\family typewriter
maleFreq: 
\family default
intialize sex with this male frequency.
\end_layout

\begin_layout Itemize

\family typewriter
identicalInds: 
\family default
if true, copy the genotype of the first randomly initialized individual
 to other individuals in the subpop/range.
 
\end_layout

\begin_layout Standard
Here is an example of using 
\family typewriter
alleleFreq
\family default
:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/initByFreq
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/initByFreq.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Please refer to
\family typewriter
 test/test_init.py 
\family default
for more complicated examples.
\end_layout

\begin_layout Subsection
Operator (C++)
\family typewriter
 initByValue
\begin_inset LatexCommand \index{operator!initByValue}

\end_inset

,
\family default
 function 
\family typewriter
InitByValue
\begin_inset LatexCommand \index{function!InitByValue}

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
initByValue 
\family default
operator gets the one copy of chromosomes or the whole genotype (or of those
 corresponds to 
\family typewriter
atLoci
\family default
) of an individual and copy them to all or subset of individuals.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/initByValue
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/initByValue.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Parameters
\family typewriter
 subPop, indRange, atLoci, maleFreq 
\family default
are also supported.
 Note that
\end_layout

\begin_layout Itemize
If
\family typewriter
 value 
\family default
is an array of values, it should have the same length as 
\family typewriter
subpop, indRange 
\family default
or 
\family typewriter
proportions
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
proportions
\family default
: if given, assign given genotypes randomly.
 
\end_layout

\begin_layout Subsection
Operator (C++)
\family typewriter
 spread
\begin_inset LatexCommand \index{operator!spread}

\end_inset

,
\family default
 function 
\family typewriter
Spread
\begin_inset LatexCommand \index{function!Spread}

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Spread(ind, subPop) 
\family default
spread the genotype of ind to all individuals in an array of subpopulations.
 The default value of subPop is the subpopulation where ind resides.
\end_layout

\begin_layout Subsection
Operator (hybrid)
\family typewriter
 pyInit
\begin_inset LatexCommand \index{operator!pyInit}

\end_inset

,
\family default
 function 
\family typewriter
PyInit
\begin_inset LatexCommand \index{function!PyInit}

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
pyInit
\family default
 is a hybrid initializer.
 User should define a function with parameters allele, ploidy and subpop
 indices, and return an allele value.
 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/pyInit
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/pyInit.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Migration
\begin_inset LatexCommand \index{migrator}

\end_inset


\end_layout

\begin_layout Standard
Mating is strictly within subpopulations in simuPOP so migrator is the only
 way to mix genotypes of several subpopulations.
 Migrators are quite flexible in simuPOP in the sense that
\end_layout

\begin_layout Itemize
Migration can happen from and to a subset of subpopulations.
\end_layout

\begin_layout Itemize
Migration can be done by probability, proportion or by counts.
 In the case of probability, 
\end_layout

\begin_deeper
\begin_layout Itemize
if the migration rate from subpopulation 
\family typewriter
a
\family default
 to 
\family typewriter
b
\family default
 is 
\begin_inset Formula $r$
\end_inset

, then everyone in subpopulation 
\family typewriter
a
\family default
 will have this probability to migrate to 
\family typewriter
b
\family default
.
 
\end_layout

\begin_layout Itemize
In the case of proportion, exactly 
\family typewriter
r*size_of_subPop_a 
\family default
individuals (chosen by random) will migrate to subpop b.
 
\end_layout

\begin_layout Itemize
In the last case, a given number of individuals will migrate.
\end_layout

\end_deeper
\begin_layout Itemize
New subpopulation can be generated through migration.
 You simply need to migrate to a new subpop number.
 
\end_layout

\begin_layout Standard
Note that overall population size will not change.
 (Mating schemes can do that).
 If you would like to keep subpop size after migration, you can use the
\family typewriter
 newSubPopSize
\family default
 or 
\family typewriter
newSubPopSizeExpr
\family default
 parameter of a mating scheme.
\end_layout

\begin_layout Subsection
Constants: 
\family typewriter
MigrByProbability
\begin_inset LatexCommand \index{constant!MigrByProbability}

\end_inset

, MigrByProportion
\begin_inset LatexCommand \index{constant!MigrByProportion}

\end_inset

, MigrByCount
\begin_inset LatexCommand \index{constant!MigrByCount}

\end_inset


\end_layout

\begin_layout Standard
Possible values of parameter 
\family typewriter
mode
\family default
.
\end_layout

\begin_layout Subsection
Opertor (C++) 
\family typewriter
migrator
\begin_inset LatexCommand \index{operator!migrator}

\end_inset


\end_layout

\begin_layout Standard
Opertor 
\family typewriter
migrator
\family default
 is used to migrate from 
\family typewriter
'fromSubPop'
\family default
 to 
\family typewriter
'toSubPop'.

\family default
 From and to subpop can be a number or an array of subpopulations.
 The migration probability/rate/counts from 
\family typewriter
i->j 
\family default
is specified in the rate matrix.
 The 
\family typewriter
'fromSubPop'
\family default
 and 
\family typewriter
'toSubPop' 
\family default
are default to all subpopulations.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/migratorhelp
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/migratorhelp.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An detailed example can be found in 'some real examples' -> 'complex Migration
 Scheme' section.
\end_layout

\begin_layout Subsection
Functions (Python) 
\family typewriter
migrIslandRates
\begin_inset LatexCommand \index{Function!migrIslandRates}

\end_inset

, migrStepstoneRates
\begin_inset LatexCommand \index{Function!migrStepstoneRates}

\end_inset

 
\family default
(simuUtil.py)
\end_layout

\begin_layout Standard
Migrator is very flexible.
 It can accept arbitrary migration matrix, from any subset of subpops to
 any (even new) other subset of subpops.
 Several functions are defined in simuUtil.py, however, for easy use of popular
 migration models:
\end_layout

\begin_layout Itemize

\family typewriter
migrIslandRates(r, n)
\family default
 returns a migration matrix
\begin_inset Formula \[
\left(\begin{array}{ccccc}
1-r & \frac{r}{n-1} & ... & ... & \frac{r}{n-1}\\
\frac{r}{n-1} & 1-r & ... & ... & \frac{r}{n-1}\\
 &  & ...\\
\frac{r}{n-1} & ... & ... & 1-r & \frac{r}{n-1}\\
\frac{r}{n-1} & ... & ... & \frac{r}{n-1} & 1-r\end{array}\right)\]

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
migrStepstoneRates(r,n,circular=False) 
\family default
returns a migration matrix
\begin_inset Formula \[
\left(\begin{array}{ccccc}
1-r & r\\
r/2 & 1-r & r/2\\
 &  & ...\\
 &  & r/2 & 1-r & r/2\\
 &  &  & r & 1-r\end{array}\right)\]

\end_inset

and if 
\family typewriter
circular=True
\family default

\begin_inset Formula \[
\left(\begin{array}{ccccc}
1-r & r/2 &  &  & r/2\\
r/2 & 1-r & r/2\\
 &  & ...\\
 &  & r/2 & 1-r & r/2\\
r/2 &  &  & r/2 & 1-r\end{array}\right)\]

\end_inset


\end_layout

\begin_layout Standard
A lot of such functions may be defined later.
 I guess 2-d stepstone will be the first one?
\end_layout

\begin_layout Subsection
Operator (C++/Hybrid) 
\family typewriter
pyMigrator
\begin_inset LatexCommand \index{operator!pyMigrator}

\end_inset


\end_layout

\begin_layout Standard
For evan more complicated migration schemes, you do DIY it using a 
\family typewriter
pyMigrator
\family default
.
 This operator is not strictly hybrid since it does not call python function.
 However, it takes a 
\family typewriter
carray
\family default
 as subPop id for each individual.
 
\family typewriter
pyMigrator
\family default
 then complete migration according its content.
 For example:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/pyMigrator
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/pyMigrator.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that 
\end_layout

\begin_layout Itemize
the application sequence of the operators is 
\family typewriter
initByFreq
\family default
,
\family typewriter
 dumper, pyMigrator 
\family default
and then 
\family typewriter
dumper 
\family default
again since its stage is set to
\family typewriter
 PrePostMating
\family default
.
\end_layout

\begin_layout Itemize
Usually you will use a 
\family typewriter
pyEval 
\family default
operator to re-assign 
\family typewriter
spID
\family default
 during evolution.
\end_layout

\begin_layout Subsection
Operator (C++) 
\family typewriter
splitSubPop
\family default

\begin_inset LatexCommand \index{operator!splitSubPop}

\end_inset

, function 
\family typewriter
SplitSubPop
\begin_inset LatexCommand \index{function!SplitSubPop}

\end_inset


\end_layout

\begin_layout Standard
This operator takes parameters
\end_layout

\begin_layout Itemize
which: which subpopulation to split.
 If there is no subpopulation structure, use 0 as the first (and only) subpopula
tion.
\end_layout

\begin_layout Itemize
sizes: new subpopulation sizes.
 The sizes should add up to the original subpopulation (subpop which) size.
\end_layout

\begin_layout Itemize
proportions: Optionally, you can specify proportions of new subpops.
 (easier to use) The proportions should add up to 1.
\end_layout

\begin_layout Itemize
subPopID: the operator will automatically set new subpop ID to new subpops.
 You can also specify the IDs.
\end_layout

\begin_layout Subsection
Operator (C++) 
\family typewriter
mergeSubPops
\family default

\begin_inset LatexCommand \index{operator!mergeSubPops}

\end_inset

, function 
\family typewriter
MergeSubPops
\begin_inset LatexCommand \index{function!MergeSubPops}

\end_inset


\end_layout

\begin_layout Standard
This operator merges subPopulations
\family typewriter
 subPops 
\family default
(the only parameter) to a single subpopulation.
 If 
\family typewriter
subPops 
\family default
are ignored, all subpopulations will be merged.
\end_layout

\begin_layout Section
Mutation
\begin_inset LatexCommand \index{Mutation}

\end_inset


\end_layout

\begin_layout Standard
All mutators have the common interface as shown below: 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Caption
log/mutatorhelp
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/mutatorhelp.log}
preview false

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
