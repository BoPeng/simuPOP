#LyX 1.4.0cvs created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass manual
\begin_preamble
\usepackage{underscore}
\usepackage{graphicx}
\usepackage{epsfig}

\renewcommand{\py@ptsize}{12pt}

\setreleaseinfo{Release 0.6.10 (\mbox{$$Rev$$})}
\authoraddress{
{\bf Department of Statistics, Rice University}\\
{\bf Email: }{\textsf bpeng@rice.edu}\\
{\bf URL: }{\textsf http://simupop.sourceforge.net} \\
{\bf Mailing List: }{\textsf simupop-list@lists.sourceforge.net}
}
\author{Bo Peng}
\date{December 2004\\
\hfill{}\\
Last modified \\
\today }

\ifhtml
\chapter*{Front Matter\label{front}}
\fi
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\float_placement H
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
simuPOP User's Guide
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100col%"
special "none"
height "1pt"
height_special "totalheight"
status open

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

\backslash
hspace{1cm}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
vspace{5in}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
{
\backslash
large
\backslash
textsf Acknowledgements: }
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
vspace{.2cm}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
hspace{.3cm} Dr.
 Marek Kimmel
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
hspace{.3cm} Dr.
 Fran
\backslash
c cious Balloux
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
hspace{.3cm} Dr.
 William Amos
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
hspace{.3cm} SWIG user community
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
hspace{.3cm} Python user community 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\backslash
hspace{.3cm} Keck Center for Computational and Structural Biology
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

\backslash
vspace{.7in} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard
 
\backslash
copyright{} 
\end_layout

\end_inset

 2004-2005 Bo Peng 
\begin_inset ERT
status collapsed

\begin_layout Standard

\backslash
vspace{.3cm} 
\backslash
hrule 
\backslash
vspace{0.1cm} 
\end_layout

\end_inset

Permission is granted to make and distribute verbatim copies of this manual
 provided the copyright notice and this permission notice are preserved
 on all copies.
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that the
 sections entitled Copying and GNU General Public License are included exactly
 as in the original, and provided that the entire resulting derived work
 is distributed under the terms of a permission notice identical to this
 one.
 Permission is granted to copy and distribute translations of this manual
 into another language, under the above conditions for modified versions,
 except that this permission notice may be stated in a translation approved
 by the Free Software Foundation.
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
simuPOP is a forward-time population genetics simulation environment.
 Unlike coalescent-based programs, simuPOP evolves populations forward in
 time, subject to arbitrary number of genetic and environmental forces such
 as mutation, recombination, migration and population/subpopulation size
 changes.
 Statistics of populations can be calculated and visualized dynamically
 which makes simuPOP an ideal tool to demonstrate population genetics models;
 generate datasets under various evolutionary settings, and more importantly,
 study complex evolutionary processes and evaluate gene mapping methods.
\end_layout

\begin_layout Abstract
simuPOP can be used at two levels.
 The core of simuPOP is a scripting language (Python) that provides a large
 number of building blocks (populations, mating schemes, various genetic
 forces in the form of functions, operators, simulators and gene mapping
 methods) to construct a simulation.
 This provides a R or Matlab-like environment where users can interactively
 create, manipulate and evolve populations; monitor and visualize population
 statistics and apply gene mapping methods.
 The full power of simuPOP and Python (even R) can be utilized to simulate
 arbitrarily complex evolutionary scenarios.
\end_layout

\begin_layout Abstract
simuPOP also comes with an increasing number of pre-defined simulation scenarios.
 If one of them happens to fit your need, all you need to do is running
 the script file with appropriate parameters.
 No knowledge of Python or simuPOP will be required.
 To make simuPOP readily usable for time-limited users, users of simuPOP
 are strongly encouraged to submit their simulations to this collection.
 
\end_layout

\begin_layout Abstract
This user's guide covers the basic usage of simuPOP, including installation,
 starting and introduction to some built-in scripts.
 Detailed information about simuPOP components is available in the 
\emph on
simuPOP Reference Manual.

\emph default
 All resources, including a pdf version of this guide and a discussion forum
 can be found at the simuPOP homepage 
\family typewriter
http://simupop.sourceforge.net
\family default
 .
\end_layout

\begin_layout Abstract

\series bold
How to cite simuPOP: 
\end_layout

\begin_deeper
\begin_layout Quote
Bo Peng and Marek Kimmal (2005) simuPOP: a forward-time population genetics
 simulation environment.

\emph on
 bioinformatics
\emph default
, 
\series bold
21
\series default
(18): 3686-3687
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
What is simuPOP?
\end_layout

\begin_layout Standard

\family typewriter
simuPOP
\family default
 is a forward-time population genetics simulation environment.
 Unlike coalescent-based simulation programs, simuPOP evolves population(s)
 forward in time, subject to arbitrary number of genetic and environmental
 forces (mutation, recombination, migration, population size change etc.).
 simuPOP allows users to control every aspects of the evolutionary process
 and observe the details at each generation.
 For example, users can start with a population of identical individuals,
 manually introduce a mutant and observe the spreading of this mutant in
 the population from generation to generation.
 Population substructure, recombination, migration, selection etc can be
 added to the simulation as needed.
 
\end_layout

\begin_layout Standard
simuPOP consists of a number of Python objects and functions, including
 populations that store and provide access to individual genotypes; mating
 schemes that determine how populations evolve to the next generation; operators
 that manipulate populations and calculate population statistics; simulators
 that coordinate the evolution process and functions that perform tasks
 ranging from saving/loading populations to doing gene mapping.
 It is user's responsibility to write a Python script to glue these pieces
 together and form a simulation.
 Since these modules are mostly independent to each other, it is easy to
 add additional operators to an existing simulation.
 There is no limit on the number of operators, and thus no limit on the
 complexity of a simulation.
\end_layout

\begin_layout Standard
simuPOP does not aim at any specific result or outcome.
 It is more like a workshop, where users use various components and tools
 to assemble a simulation and study its properties.
 Just like any such programming environments such as R/Splus and Matlab,
 users will have to learn how to use the environment (various Python IDE)
 and how to programming in this language (Python and simuPOP module).
 A graphic user interface of simuPOP is planned but will not be available
 very soon (outside help needed).
 
\end_layout

\begin_layout Standard
On the other hand, simuPOP also has an increasing number of built-in scripts.
 They fall into the following categories:
\end_layout

\begin_layout Itemize
Realizations of simple genetic models from standard population genetics
 textbooks,
\end_layout

\begin_layout Itemize
Generating datasets under various evolutionary assumptions,
\end_layout

\begin_layout Itemize
tools to convert between data formats, apply gene mapping methods etc
\end_layout

\begin_layout Standard
These script are written in simuPOP/Python language and can be used without
 knowing their underlying machanisim.
 It is strongly recommended that users of simuPOP submit their own scripts
 to his collection and make simuPOP more and more accessible to time-limited
 users.
 
\end_layout

\begin_layout Standard
As a summary, simuPOP is suitable for the following applications:
\end_layout

\begin_layout Itemize
Teaching tool for population genetic courses.
 Teachers can write their own scripts or choose from an increasing number
 of scripts distributed with simuPOP.
 Compared to other existing programs, the biggest advantage of simuPOP is
 its flexibility.
 There is no limit on the complexity of the simulation and student can change
 the script and try new things (such as viewing another statistics or adding
 another genetic force) at will.
 
\end_layout

\begin_layout Itemize
Generating samples that can be analyzed by other programs.
 simuPOP is capable of sampling from populations and outputting them in
 many different formats.
 However, it is totally up to the user to generate proper populations from
 which the sample will be drawn.
 Things that need to be considered includes population size, genotype of
 starting population(s), mutation, migration, recombination, selection and
 their magnitude, number of generations to evolve, statistical property
 to achieve etc.
 Some scripts are provided to generate datasets under quite complicated
 evolutionary settings.
 
\end_layout

\begin_layout Itemize
Observe the dynamics of population evolution.
 This is where the power of simuPOP lies and is where coalescent-based simulatio
ns frown.
 Coalescent, by its nature, focus only on samples, and ignore genealogy
 information that are irrelevant to the final sample.
 It is therefore impractical to trace the population properties of ancestral
 populations.
 Forward-based simulation does not have this problem, at a cost of performance.
\end_layout

\begin_layout Standard
This user's guide convers the basic usage of simuPOP, including installation,
 starting, and introduction to some built-in scripts.
 Details about simuPOP/Python language will be given in 
\emph on
the simuPOP reference manual
\emph default
.
\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Standard
Although you do not have to know these to use the provided scripts, you
 may be wondering what simuPOP can and can not do.
 Breifly, simuPOP provides:
\end_layout

\begin_layout Itemize
Populations with one-level subpopulation structure.
 (no explicit family structure) There is no limit on ploidy, number of chromosom
es, number of loci and population size.
 (depends on available RAM).
 A population can hold arbitrary number of ancestral generations (default
 to none) for easy pedigree analysis.
 Populations can be saved and loaded in text, binary, XML, Fstat, GC formats.
 Methods to deal with other formats are provided.
 Population/subpopulation sizes can be changed during mating.
 Subpopulations can be created/changed as a result of migration.
 
\end_layout

\begin_layout Itemize
Several replicates of populations can be evolved simultaneously.
 Mating schemes include random mating, binomial selection etc.
 Number of offsprings per mating can be dynamic.
 
\end_layout

\begin_layout Itemize
A wide variety of operators are provided.
 They can act on the populations at selected generations, at different stages
 of a life-cycle, on different replicate or replicate group.
 Support arbitrary migration model; K-allele, stepwise and generalized stepwise
 mutation models; uniform or non-uniform (differ-by-loci) recombinations;
 many single-locus selection model and multiplicative/additive multi-loci
 selection models.
 Hybrid operators are usually provided to model arbitrary mutation, selection
 models.
\end_layout

\begin_layout Itemize
Built-in support for allele, genotype, heterozygote, haplotype number/frequency
 calculation, as well as some more complicated statistics like 
\begin_inset Formula $F_{st}$
\end_inset

.
 Other statistics can be calculated from these basic statistics.
\end_layout

\begin_layout Itemize
Visualization through Python/SciPY, Python/MatPlotLib or RPy (use R through
 Python).
 R/Rpy is recommended.
\end_layout

\begin_layout Standard
A more comprehensice feature list can be found in the 
\emph on
simuPOP Reference Manual
\emph default
.
\end_layout

\begin_layout Section
Comparison to Coalescence-Based Approaches
\end_layout

\begin_layout Standard
The basic idea of Coalescent simulations (
\begin_inset LatexCommand \citealt{Kingman1982}

\end_inset

) is to trace the sample back in time, coalesce individuals to their common
 ancestor according to a stochastic processes characterized by mutation,
 recombination etc.
 After the common ancestor of all individuals is found, the simulation go
 forward in time and specify the type of each branch.
 Such simulations can deal with a number of mutation, recombination, migration,
 and population size change models.
 Because such simulations work directly on samples, they can obtain large
 samples quickly.
 
\end_layout

\begin_layout Standard
Among these simulatable models, coalescent-based simulations can deal with
 mutation and migration quite well but less optimal for population size
 change.
 Available programs typically only deal with exponential growth/shrink of
 population size.
 This might be an artifact of program interface though, because it is difficult
 to specify complicated population size changes.
 Due to theoretical limitations, such simulations can only simulate neutral
 processes, i.e., no selection is allowed.
 
\end_layout

\begin_layout Standard
Some coalescent-type processes that can simulate non-neutral processes are
 proposed, including ancestral selection graph (ASG, 
\begin_inset LatexCommand \citealt{Krone1997}

\end_inset

), ancestral influence graph (AIG, 
\begin_inset LatexCommand \citealt{Donnelly1999}

\end_inset

) and complex selection graph (CSG, 
\begin_inset LatexCommand \citealt{Fearnhead2003}

\end_inset

).
 However, these are specialized processes that do not seem to work well
 with other models such as migration and population size change.
 None of the currently available simulation program provides these models.
\end_layout

\begin_layout Standard
Coalescent-based simulations have the following drawbacks:
\end_layout

\begin_layout Itemize
cannot provide history of population statistics.
 Coalescent-based simulations are driven by coalescent events, not by generation
s.
 Individuals that are not related to the final gene tree are ignored.
 The effective 'sample size' of previous generations shrink quickly and
 cannot provide good allele frequency estimates.
 
\end_layout

\begin_layout Itemize
cannot handle selection, at least with currently available software.
\end_layout

\begin_layout Itemize
cannot handle very complex simulations.
 Due to the complexity of coalescent theory, it is not easy to add unusual
 genetic/environmental forces to a coalescent-based program.
 This is why every such program has a clear limit what can be simulated.
 
\end_layout

\begin_layout Itemize
Maybe most importantly, the back-in-time approach of coalescent simulation
 is counterintuitive and not suitable for some studies.
 For example, it is difficult, if possible at all, to think of a coalescent
 process that simulate this simple scenario: given two populations with
 different initial allele frequencies and allow certain level of migrate,
 what will the allele frequency be in our sample? I am not an expert on
 coalescent, but I guess the existence of a virtual common ancestor for
 all individuals limits the power of coalescent-based simulations.
\end_layout

\begin_layout Standard
Forward-based simulations are in general considered traditional.
 They create an initial population; evolve it forward in time, subject to
 various kind of genetic or environmental forces.
 Samples are drawn from the last generation(s).
 The drawback of this approach is clear: realistic simulations of large
 populations are too computationally intensive, and most of the CPU power
 will be `wasted' on unrelated individuals when we simulate rare diseases.
 This is why most recent simulation programs are coalescent-based.
 
\end_layout

\begin_layout Standard
However, forward-based simulations do not have any of the drawbacks as mentioned
 above for coalescent-based simulations.
 They are easy to understand because they agree with our usual understanding
 of evolution.
 The biggest advantage of forward simulations is that they can simulate
 arbitrary complex evolutionary processes.
 Since such simulations work on the whole population step by step, it is
 easy to trace the population statistics closely.
 Arbitrary genetic or environmental forces can be applied at arbitrary intensity
 and frequency.
 However, realistic forward-based simulations require large population size
 and long generations.
 This consequently requires large RAM and fast CPU.
 This is why forward simulations were not able to simulate large populations
 and were used primarily for demonstration purposes.
\end_layout

\begin_layout Standard
Fortunately, the power of personal computers has improved dramatically which
 makes such simulations a lot more feasible than that of several years ago.
 After aggressive optimization, as of writing, simuPOP can handle a simulation
 of 400,000 individuals under the forces of mutation, recombination, migration
 on a PC equipped with 2.8G Pentium IV processor and 1G reasonably fast.
 (around 30s per generation.)
\end_layout

\begin_layout Section
Availability
\end_layout

\begin_layout Standard
Binary libraries of 
\family typewriter
simuPOP
\family default
 are provided for linux, windows, solaris and mac systems.
 Source code and development documentations are also available for easy
 porting to other platforms.
 Both source code and binaries can be distributed free-of-charge under GPL
 license.
 All resources, including a pdf version of this manual and a discussion
 forum can be found at the simuPOP homepage.
\end_layout

\begin_layout Chapter
Installing simuPOP
\end_layout

\begin_layout Standard
Compiled libraries for Linux, windows XP, Solaris and MacOSX are provided.
 In most cases, you will only need to download simuPOP and follow the usual
 installation process of your platform.
 Things can get complicated when you have an earlier/later versions of OS
 or Python and have to compile simuPOP from source.
 The 
\family typewriter
installation
\family default
 section of simuPOP homepage will have detailed instruction on it.
 
\end_layout

\begin_layout Standard
Python has a large number of modules.
 For simple tasks like dataset generation, simuPOP modules alone are enough.
 However, it is highly recommended that you install R and RPy so that you
 can make use simuPOP's plotting capacity.
 You can also make use of many of R's genetic packages to performe statistical
 analysis.
 By default, simuPOP uses Tkinter to get parameters (the parameter dialog).
 It will use wxPython automatically if wxPython is available.
 A bunch of other GUI improvements will also be available, the best one
 may be 
\family typewriter
listVars() 
\family default
which list all variables in a nice tree format,
\family typewriter
 
\family default
instead of a long indented list when wxPython is not available.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
component
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
usage
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
required
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
simuPOP libraries
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
required
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R and RPy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
optional but highly recommended
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
wxPython
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
optional but highly recommended 
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python Numeric module
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
optional (Easier numeric manipulation.
 rpy will work better with this module.
 )
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python SciPy module
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
optional (Use simuSciPy to plot when R is not available) imcomplete support
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Python MatPlotLib module
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
optional (use simuMatPlt.py to plot when R is not available) imcomplete support
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
In this guide, I will only show you how to install Python, simuPOP (and
 optionally R and RPy) under windows.
\end_layout

\begin_layout Section
Installing Python
\end_layout

\begin_layout Standard

\family typewriter
simuPOP
\family default
\noun on
 
\noun default
works as a python library so a working version of python is required.
 Although Python
\begin_inset LatexCommand \index{Python}

\end_inset

 is widely available on Linux/Mac systems, it is not so popular among windows
 users.
 
\end_layout

\begin_layout Standard
Due to the open-source nature of Python, there are many variants of Python.
 For windows system, you can use 
\begin_inset LatexCommand \htmlurl[official python ]{http://www.python.org}

\end_inset

, 
\begin_inset LatexCommand \htmlurl[ActivePython]{http://www.activestate.com/Products/ActivePython/}

\end_inset

 (not GPL) or 
\begin_inset LatexCommand \htmlurl[enthought python]{http://www.enthought.com/python/}

\end_inset

.
 The last one is very interesting since it contains many packages such as
 Numeric and SciPY so you do not have to install them separately.
 The installation should be quite straightforward and takes less than five
 minutes.
\end_layout

\begin_layout Standard
simuPOP is developed under the newest Python (version 2.4.1 since simuPOP0.6.5)
 but binary libraries are sometimes compiled using earlier versions.
 As a guideline, you should
\end_layout

\begin_layout Itemize
use a python version that matches the version used to compile the simuPOP
 library.
 (Version mismatch may or may not cause problem.)
\end_layout

\begin_layout Itemize
use the newest python if you would like to compile simuPOP from source.
 (usually a 
\family typewriter
> python setup.py install 
\family default
away ).
\end_layout

\begin_layout Section
Installing R and RPy
\end_layout

\begin_layout Standard
simuPOP itself does not provide data plotting capacity.
 I do not have to do so since Python provides many packages to do this.
 As a statistician, I am mostly familiar with R so I use R extensively for
 visualization and many times data process.
 To use the full power of simuPOP, it is highly recommended that you install
 R and a Python package RPy that provide communication between Python/simuPOP
 and R.
 
\end_layout

\begin_layout Standard
Download R from 
\begin_inset LatexCommand \htmlurl[R-project homepage]{http://www.r-project.org/}

\end_inset

 and install R for windows.
 The process is easy.
 However, it is recommended that you check the highest version of R that
 RPy can support first and install that R version.
 
\end_layout

\begin_layout Standard
Download Rpy windows binary from 
\begin_inset LatexCommand \htmlurl[rPY]{http://rpy.sourceforge.net/}

\end_inset


\begin_inset LatexCommand \index{rPY}

\end_inset

 and install RPy for windows.
 Make sure to pick the binary with correct python and R version.
 
\end_layout

\begin_layout Standard
After you installed Python, R and Rpy, open a python terminal ( or GUI)
 and type the following command in to see if Rpy is working well.
 Note that on Linux/Mac systems, the default R installation does not support
 RPy, you will have to rebuild R from source (use 
\family typewriter
--enable-shlib
\family default
 option).
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/testRPy.log}
preview false

\end_inset


\end_layout

\begin_layout Section
Installing simuPOP
\end_layout

\begin_layout Standard
Download the latest simuPOP binary that matches your python distribution
 from simuPOP homepage.
 For example, if you have enthough Python 2.3.3 installed, you should download
 
\family typewriter
simupop-x.x.x-py23-win32.exe
\family default
.
 Double clike the 
\family typewriter
exe 
\family default
file to install.
 
\end_layout

\begin_layout Section
Starting simuPOP
\end_layout

\begin_layout Standard
After installation, you should have the following files and directories:
\end_layout

\begin_layout Itemize
Many 
\family typewriter
simuXXX.py
\family default
 files under 
\family typewriter
c:
\backslash
python
\backslash
Lib
\backslash
site-packages
\family default
.
 These are simuPOP libraries.
 You may want to have a look at files like 
\family typewriter
simuUtil.py, simuRPy.py
\family default
 but you should not change these files.
\end_layout

\begin_layout Itemize

\family typewriter
c:
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
doc
\family default
: docmentations in pdf format and sample scripts.
\end_layout

\begin_layout Itemize

\family typewriter
c:
\backslash
python
\backslash
shared
\backslash
simuPOP
\backslash
test: 
\family default
some test scripts.
 
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
\emph on
c:
\backslash
python
\backslash
shared
\backslash
simuPOP
\backslash
scripts:
\emph default
 
\family default
\series default
This directory has all the built-in scripts.
 These will be the main focus of this guide.
 To start these scripts, you can either
\end_layout

\begin_deeper
\begin_layout Itemize
double click the icon
\end_layout

\begin_layout Itemize
add this path to windows
\family typewriter
 PATH
\family default
 if you work in a DOS cmd window (Start->Run->cmd)
\end_layout

\begin_layout Itemize
add this path to
\family typewriter
 PYTHONPATH 
\family default
if you want to source them from a Python shell.
\end_layout

\end_deeper
\begin_layout Standard
You should be able to load simuPOP library by running command 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/importSimuPOP.log}
preview false

\end_inset

from python interactive shell.
 If simuPOP is located but python reports an error, please see simuPOP FAQ
 and/or post to simuPOP forum.
\end_layout

\begin_layout Chapter
Using simuPOP scripts
\end_layout

\begin_layout Standard
There are two levels of 'using simuPOP': using simuPOP scripts, and using
 simuPOP/Python environment.
 This chapter will cover the first part.
 
\end_layout

\begin_layout Standard
Although simuPOP scripts are simply Python scripts and can be of any style.
 All scripts shipped with simuPOP packages follows the same style.
 Basically, for any script, you should be able to 
\end_layout

\begin_layout Itemize
start directly with a dialog to input parameters
\end_layout

\begin_layout Itemize
use -h or --help to view help information and description of options 
\end_layout

\begin_layout Itemize
use 
\family typewriter
--noDialog 
\family default
to suppress parameter dialog and input parameters through short or long
 command line arguments, use a configuration file, or input when being prompted.
 A default value will be used if you press enter directly.
\end_layout

\begin_layout Itemize
be able to save currently used parameters into a configuration file (
\family typewriter
--saveConfig
\family default
) and reuse it through (
\family typewriter
-c
\family default
 or
\family typewriter
 --config
\family default
 option)
\end_layout

\begin_layout Standard
Let us use 
\family typewriter
simuLDDecay.py
\family default
 as an example.
 
\end_layout

\begin_layout Section
Start a script directly
\end_layout

\begin_layout Standard

\family typewriter
simuLDDecay.py
\family default
 is located in 
\family typewriter
c:
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
scripts
\backslash
 
\family default
.
 If you double cliek its icon.
 A dialog will appear with default parameters.
 You can 
\end_layout

\begin_layout Itemize
change parameters in the edit boxes,
\end_layout

\begin_layout Itemize
view help info by clicking 
\family typewriter
Help
\family default
 button.
 ( equivalent to using 
\family typewriter
-h
\family default
 option directly)
\end_layout

\begin_layout Itemize
start simulation by cliking 
\family typewriter
start simulation! 
\family default
button.
 If any of the input is invalid, its label will be changed to red and you
 should fix the error before continuing.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename log/LDDecay.png
	lyxscale 20
	width 4in

\end_inset


\end_layout

\begin_layout Standard
Note that you can not use any command line argument in this manner so you
 can not make use of command line arguments and a configuration file.
 To avoid enter some parameters again and again, will may want to use a
 command window and run this command manually.
 To do this, you can either 
\end_layout

\begin_layout LyX-Code
$ cd 
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
scripts
\end_layout

\begin_layout LyX-Code
$ python simuLDDecay.py
\end_layout

\begin_layout Standard
or add this path to windows search path.
 
\end_layout

\begin_layout Section
Get help (-h)
\end_layout

\begin_layout Standard
Type
\end_layout

\begin_layout LyX-Code
$ python simuLDDecay.py -h 
\end_layout

\begin_layout Standard
You will get 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/LDDecayHelp.log}
preview false

\end_inset


\end_layout

\begin_layout Section
Use command line arguments
\end_layout

\begin_layout Standard
Almost all parameters have two forms of command line arguments: short (e.g.

\family typewriter
 -h
\family default
) for easy typing and long 
\family typewriter
(
\family default
e.g.
\family typewriter
--help
\family default
) for clarity.
 Arguments may or may not have a value which is indicated by XXX in the
 
\family typewriter
--help
\family default
 output.
 You can use a combination of short and long arguments like:
\end_layout

\begin_layout LyX-Code
% simuLDDecay.py -s 500 -e 10 --recRate 0.1 --numRep 5 
\end_layout

\begin_layout Standard
This method is best suited for batch process.
\end_layout

\begin_layout Section
Input argument interactively
\end_layout

\begin_layout Standard
If you prefer not to use the dialog, you can use the '
\family typewriter
--noDialog
\family default
' option to input the parameters interactively.
\end_layout

\begin_layout LyX-Code
% simuLDDecay.py -s 500 -e 10 --noDialog
\end_layout

\begin_layout Standard

\family typewriter
<CR>
\family default
 is return.
 You will notice that 
\family typewriter
simuLDDecay.py
\family default
 does not ask for values of population size and ending generating since
 they are specified in command line.
 Since all parameters have default values, you can press enter directly
 if default value is OK.
\end_layout

\begin_layout Standard
Note that you can enter any valid python expression as an input.
 For example, you can enter
\end_layout

\begin_layout LyX-Code
[.1]*10
\end_layout

\begin_layout Standard
if you would like to enter an array of 
\family typewriter
.1
\family default
.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Use a configuration file (--saveConfig)
\end_layout

\begin_layout Standard
If you are tired of using a line command line or enter parameters each time,
 you can use a configuration file.
 The best way to do this is throught the
\family typewriter
 --saveConfig 
\family default
option.
 If specified, a configuraiton file will be created with current parameter
 values.
 For example,
\end_layout

\begin_layout LyX-Code
% simuLDDecay.py --quiet -s 500 -e 10 --saveConfig decay.cfg
\end_layout

\begin_layout LyX-Code
Recombination rate (0.01): <CR>
\end_layout

\begin_layout LyX-Code
Number of replicates (5): 10<CR>
\end_layout

\begin_layout Standard
will result in a config file 
\family typewriter
decay.cfg
\family default
 with entries like 
\end_layout

\begin_layout LyX-Code
popSize = 500
\end_layout

\begin_layout LyX-Code
endGen = 10
\end_layout

\begin_layout LyX-Code
recombinationRate = 0.01
\end_layout

\begin_layout LyX-Code
numOfReplicate = 10
\end_layout

\begin_layout Standard
The actual file is much longer since it contains detailed descriptions of
 each entry.
 Note that I use 
\family typewriter
--quiet (-q) 
\family default
to suppress messages when simuPOP is loaded.
 
\end_layout

\begin_layout Standard
You can then run the program with 
\family typewriter
-c 
\family default
or 
\family typewriter
--config file 
\family default
option.
\end_layout

\begin_layout LyX-Code
$ simuLDDecay.py -q -c decay.cfg --noDialog
\end_layout

\begin_layout Standard
This is obviously a better way to enter arguments when there are a large
 number of them.
\end_layout

\begin_layout Section
Use optimized library
\end_layout

\begin_layout Standard
simuPOP actually has two sets of libraries: standard and optimized.
 The standard library is the default one to be used.
 It has strict parameter, boundary checking facilities to detect erranous
 input and make sure the simulation is running OK.
 Although using this library is higly recommended during debuging and developing
, it does slow down simuPOP, at a level up to 20%.
 The optimized libraries do not perform any boundary check and will simply
 crash when an error happens, but may save you some time when doing large
 simulations.
 A guideline is that you should always use standard library unless you are
 sure that the simulation is running well and timing has been a concern.
\end_layout

\begin_layout Standard
It is easy to use the optimized library.
 You can either
\end_layout

\begin_layout Itemize
use 
\family typewriter
--optimized 
\family default
option, or
\end_layout

\begin_layout Itemize
set environment variable 
\family typewriter
SIMUOPTIMIZED
\end_layout

\begin_layout Standard
For example, you can run
\end_layout

\begin_layout LyX-Code
$ simuLDDecay.py --optimized -c decay.cfg
\end_layout

\begin_layout Standard
although it is almost meaningless to use the optimized library for this
 small simulation.
\end_layout

\begin_layout Section
Using a script as a Python module
\end_layout

\begin_layout Standard
Due to the flexibility of Python, a python script can be run directly or
 loaded as a module (if it is coded so).
 Otherthan running a script directly, you can 
\end_layout

\begin_layout LyX-Code
>>> import simuComplexDisease
\end_layout

\begin_layout LyX-Code
>>> simuComplexDisease.simuPopulation(.....)
\end_layout

\begin_layout Standard
in an interactive session or in another python script.
 You may have to read the source code to figure out the details about the
 functions though.
\end_layout

\begin_layout Chapter
Using simuPOP environment
\end_layout

\begin_layout Standard
The core of simuPOP is a scripting language based on the Python programming
 language/environment.
 Like any other python library, you can start a python session, import simuPOP
 library, create and evolve populations interactively.
 Or, you can create a python script and run it as a batch file.
 
\end_layout

\begin_layout Standard
In this chapter, I will briefly explain each component and demonstrate them
 with an simple example.
 Detailed info about each components is given in the simuPOP reference manual.
\end_layout

\begin_layout Section
Important Concepts
\end_layout

\begin_layout Standard
simuPOP consists of the following components.
 It is important that you know what they are and how they are related.
\end_layout

\begin_layout Description
individual
\begin_inset LatexCommand \index{individual}

\end_inset

 individuals are building blocks of populations.
 Each individual has its own genotype (chromosomes and loci), sex, disease
 status and some other auxiliary information.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard
genotypic structure
\end_layout

\end_inset


\begin_inset LatexCommand \index{genotype structure}

\end_inset

 refers to the number of chromosomes, number and location of loci on each
 chromosome, name of alleles, allele names, maximum number of alleles.
 Individuals in the same population must have the same genotypic structure.
\end_layout

\begin_layout Description
population
\begin_inset LatexCommand \index{population}

\end_inset

 collection of individuals of the same type (genotypic structure) with subpopula
tion structure.
 A population object is associated with some variables that store population
 statistics calculated by operators.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard
Mating scheme 
\end_layout

\end_inset

 how individuals are chosen and mate during evolution.
 
\end_layout

\begin_layout Description
operator
\begin_inset LatexCommand \index{operator}

\end_inset

 operators are objects that manipulate populations.
 They can apply genetic forces like mutation, recombination, migration to
 populations, calculate population statistics, plot dynamics of variables,
 save populations or terminate sim
\family typewriter
ize*1.2
\begin_inset Quotes erd
\end_inset

 
\family default
) of mating schemes that use the result of the expression as new subpop
 size.
\end_layout

\begin_layout Description
simulator
\begin_inset LatexCommand \index{simulator}

\end_inset

 simulator is used to evolve populations.
 It consists of one or more copies of a population and a mating scheme.
 It accepts arbitrary number of operators during evolution.
\end_layout

\begin_layout Section
A Simple Example
\begin_inset LatexCommand \label{sec:A-Simple-Example}

\end_inset


\end_layout

\begin_layout Standard
Let us demonstrate these concepts through a simple example.
 The following is a log file of an interactive Python session.
 User input text after the 
\family typewriter
>>>
\family default
 prompt and Python will intepret and run your command interactively.
 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/simpleExample.log}
preview false

\end_inset


\end_layout

\begin_layout Standard
This example demonstrates the change of haplotype number when recombination
 is in effect.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
import
\family default
 line import simuPOP module (output suppressed).
 
\family typewriter
simuUtil 
\family default
is needed to pure-Python operator 
\family typewriter
endl.
\end_layout

\begin_layout Itemize

\family typewriter
simulator 
\family default
creates a simulator from a population created by 
\family typewriter
population 
\family default
function.
 The population is diploid (
\family typewriter
ploidy=2
\family default
), has 1000 individuals (
\family typewriter
size=1000
\family default
) each has two loci on the first chromosome (
\family typewriter
loci=[2]
\family default
).
 The simulator has three copies of this population (
\family typewriter
rep=3
\family default
) and will evolve through random mating (
\family typewriter
randomMating()
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
simu.evolve
\family default
 evolves these populations subject to the following operators.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
preop=[initByValue]
\family default
: operators in parameter 
\family typewriter
preop 
\family default
(accept a list of operators) will be applied to the populations at the beginning
 of evolution.
 
\family typewriter
initByValue
\family default
 is an 
\family typewriter
initializer 
\family default
that set the same genotype to all individuals.
 In this case, everyone will have
\family typewriter
 
\family default
genotype
\family typewriter
 12/21
\family default
 (
\family typewriter
1 2 
\family default
on the first chromosome and 
\family typewriter
2 1
\family default
 on the second copy of the chromosome) so linkage disequilibrium is 0.25
 (maximum possible value).
\end_layout

\begin_layout Itemize
operators in 
\family typewriter
ops 
\family default
parameter will be applied to all populations at each generation.
 (Not exactly, operators can be inactive at certain generations.)
\end_layout

\begin_layout Itemize

\family typewriter
recombinator 
\family default
is a
\emph on
 during-mating operator
\family typewriter
\emph default
 
\family default
that recombine chromosomes with probability 0.1 (an unrealistically high
 value) during mating.
\end_layout

\begin_layout Itemize

\family typewriter
stat 
\family default
is a 
\emph on
post-mating operator 
\emph default
that count haplotype 12 and 21 at locus 0 and locus 1 respectively.
 The result will be saved in the local namespace of each replicate.
 (
\family typewriter
simuVars[0], simuVars[1], simuVars[2] 
\family default
if you are curious.)
\end_layout

\begin_layout Itemize

\family typewriter
pyEval 
\family default
accepts any python expression, evaluate it in each replicates' local namespace
 and return the result.
 In this example, 
\family typewriter
pyEval 
\family default
get the value of a haplotype 
\family typewriter
'0-1|1-2'
\family default
 and print it .
\end_layout

\begin_layout Itemize

\family typewriter
endl 
\family default
is a simple operator that output a new line character 
\family typewriter
('
\backslash
n')
\family default
 after the last replicate ( 
\family typewriter
rep=REP_LAST
\family default
).
 Note that this is a pure-Python operator defined in 
\family typewriter
simuUtil.py
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
end=5:
\family default
 evolve 5 generations.
\end_layout

\end_deeper
\begin_layout Standard
The output is a table of haplotype number for each replicate at each generation.
 All simuPOP scripts will have similar steps.
 You can add more operators to the 
\family typewriter
ops 
\family default
list to build more complicated simulations.
 Obvious choices are 
\family typewriter
mutator
\family default
, 
\family typewriter
migrator
\family default
, or some proper visualizer to plot the dynamics of variables.
\end_layout

\begin_layout Chapter
Built-in scripts
\end_layout

\begin_layout Section
Simulations of standard population genetics models
\end_layout

\begin_layout Subsection
simuLDDecay
\end_layout

\begin_layout Standard
This script has been discussed before.
\end_layout

\begin_layout Section
Simulations of the evolution of diseases
\end_layout

\begin_layout Subsection
simuComplexDisease.py
\end_layout

\begin_layout Standard
The following the result of 
\end_layout

\begin_layout LyX-Code
> simuComplexDisease.py --quiet -h
\end_layout

\begin_layout Section
simulation of the evolution of allelic spectra 
\end_layout

\begin_layout Standard
See script simuCDCV.py.
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/simuComplexDisease.log}
preview false

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[bibtotoc,plainnat]{all}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand \printindex{}

\end_inset


\end_layout

\end_body
\end_document
