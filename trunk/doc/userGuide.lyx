#LyX 1.5.0svn created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass manual
\begin_preamble
\usepackage{underscore}
\usepackage{graphicx}
\usepackage{epsfig}

\renewcommand{\py@ptsize}{12pt}

\setreleaseinfo{Release 0.7.0 (\mbox{$$Rev$$})}
\authoraddress{
{\bf Department of Statistics, Rice University}\\
{\bf Email: }{\textsf bpeng@rice.edu}\\
{\bf URL: }{\textsf http://simupop.sourceforge.net} \\
{\bf Mailing List: }{\textsf simupop-list@lists.sourceforge.net}
}
\author{Bo Peng}
\date{December 2004\\
\hfill{}\\
Last modified \\
\today }

\ifhtml
\chapter*{Front Matter\label{front}}
\fi
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\float_placement H
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
simuPOP User's Guide
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100col%"
special "none"
height "1pt"
height_special "totalheight"
status collapsed

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
hspace{1cm}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
vspace{5in}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

{
\backslash
large
\backslash
textsf Acknowledgements: }
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
vspace{.2cm}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Dr.
 Marek Kimmel
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Dr.
 Fran
\backslash
c cois Balloux
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Dr.
 William Amos
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} SWIG user community
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Python user community 
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard


\backslash
hspace{.3cm} Keck Center for Computational and Structural Biology
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{.7in} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard

 
\backslash
copyright{} 
\end_layout

\end_inset

 2004-2006 Bo Peng 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{.3cm} 
\backslash
hrule 
\backslash
vspace{0.1cm} 
\end_layout

\end_inset

Permission is granted to make and distribute verbatim copies of this manual
 provided the copyright notice and this permission notice are preserved
 on all copies.
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that the
 sections entitled Copying and GNU General Public License are included exactly
 as in the original, and provided that the entire resulting derived work
 is distributed under the terms of a permission notice identical to this
 one.
 Permission is granted to copy and distribute translations of this manual
 into another language, under the above conditions for modified versions,
 except that this permission notice may be stated in a translation approved
 by the Free Software Foundation.
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
simuPOP is a forward-time population genetics simulation environment.
 Unlike coalescent-based programs, simuPOP evolves populations forward in
 time, subject to arbitrary number of genetic and environmental forces such
 as mutation, recombination, migration and population/subpopulation size
 changes.
 Statistics of populations can be calculated and visualized dynamically
 which makes simuPOP an ideal tool to demonstrate population genetics models;
 generate datasets under various evolutionary settings, and more importantly,
 study complex evolutionary processes and evaluate gene mapping methods.
\end_layout

\begin_layout Abstract
simuPOP can be used at two levels.
 The core of simuPOP is a scripting language (Python) that provides a large
 number of building blocks (populations, mating schemes, various genetic
 forces in the form of functions, operators, simulators and gene mapping
 methods) to construct a simulation.
 This provides a R/S-Plus or Matlab-like environment where users can interactive
ly create, manipulate and evolve populations; monitor and visualize population
 statistics and apply gene mapping methods.
 The full power of simuPOP and Python (even R) can be utilized to simulate
 arbitrarily complex evolutionary scenarios.
\end_layout

\begin_layout Abstract
simuPOP also comes with an increasing number of pre-defined simulation scenarios.
 If one of them happens to fit your need, all you need to do is running
 the script file with appropriate parameters.
 No knowledge of Python or simuPOP is required.
 To make simuPOP readily usable for time-limited users, users of simuPOP
 are strongly encouraged to submit their simulations to this collection.
 
\end_layout

\begin_layout Abstract
This user's guide covers the basic usage of simuPOP, including installation,
 basic usage, brief introduction to built-in scripts, and how to write simuPOP
 scripts.
 Detailed information about simuPOP components, functions and operators
 is available in the 
\emph on
simuPOP Reference Manual.

\emph default
 All resources, including a pdf version of this guide and a discussion forum
 can be found at the simuPOP homepage 
\family typewriter
http://simupop.sourceforge.net
\family default
.
\end_layout

\begin_layout Abstract

\series bold
How to cite simuPOP: 
\end_layout

\begin_deeper
\begin_layout Quote
Bo Peng and Marek Kimmal (2005) simuPOP: a forward-time population genetics
 simulation environment.

\emph on
 bioinformatics
\emph default
, 
\series bold
21
\series default
(18): 3686-3687
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
What is simuPOP?
\end_layout

\begin_layout Standard

\family typewriter
simuPOP
\family default
 is a forward-time population genetics simulation environment.
 Unlike coalescent-based simulation programs, simuPOP evolves population(s)
 forward in time, subject to arbitrary number of genetic and environmental
 forces (mutation, recombination, migration, population size change etc.).
 simuPOP allows users to control every aspects of the evolutionary process
 and observe the details at each generation.
 For example, users can start with a population of identical individuals,
 manually introduce a mutant and observe the spread of this mutant in the
 population from generation to generation.
 Population substructure, recombination, migration, selection etc can be
 added to the simulation as needed.
 
\end_layout

\begin_layout Standard
simuPOP consists of a number of Python objects and functions, including
 populations that store and provide access to individual genotypes; mating
 schemes that determine how populations evolve to the next generation; operators
 that manipulate populations and calculate population statistics; simulators
 that coordinate the evolution process and functions that perform tasks
 ranging from saving/loading populations to doing gene mapping.
 It is user's responsibility to write a Python script to glue these pieces
 together and form a simulation.
 Since these modules are mostly independent to each other, it is easy to
 add additional operators to an existing simulation.
 There is no limit on the number of operators, and thus no limit on the
 complexity of a simulation.
\end_layout

\begin_layout Standard
simuPOP does not aim at any specific result or outcome.
 It is more like a workshop, where users use various components and tools
 to assemble a simulation and study its properties.
 Just like any such programming environments such as R/Splus and Matlab,
 users will have to learn how to use the environment (various Python IDE)
 and how to program in this language (Python and the simuPOP module).
 A graphic user interface of simuPOP is planned but its usefulness is in
 doubt (just like the R/GUI) and will not be available any time soon.
 
\end_layout

\begin_layout Standard
On the other hand, simuPOP also has an increasing number of built-in scripts.
 These script are written in simuPOP/Python language and can be used without
 knowing their underlying machanisim.
 It is strongly recommended that users of simuPOP submit their own scripts
 to his collection and make simuPOP more and more accessible to time-limited
 users.
 
\end_layout

\begin_layout Standard
As a summary, simuPOP is suitable for the following applications:
\end_layout

\begin_layout Itemize
Teaching tool for population genetic courses.
 Compared to other existing programs, the biggest advantage of simuPOP is
 its flexibility.
 There is no limit on the complexity of the simulation and students can
 change the script and try new things (such as viewing another statistics
 or adding another genetic force) at will.
\end_layout

\begin_layout Itemize
Observe the dynamics of population evolution.
 This is where the power of simuPOP lies and is where coalescent-based simulatio
ns frown.
 Coalescent, by its nature, focus only on samples, and ignore genealogy
 information that are irrelevant to the final sample.
 It is therefore impractical to trace the population properties of ancestral
 populations.
 Forward-based simulation does not have this problem, at a cost of performance.
\end_layout

\begin_layout Itemize
Generating samples that can be analyzed by other programs.
 This area is dominated by coalescent-based methods, but the facts that
 coalescent-based methods can not simulate complex (non-additive) selection
 or penetrance models and supports, at least till now, only one disease
 susceptibility locus, make it unsutable to simulate the evolution of complex
 human diseases.
 A simuPOP script simuComplexDisease.py provides a powerful alternative.
\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Standard
Currently, simuPOP provides the following features:
\end_layout

\begin_layout Itemize
Population with one-level subpopulation structure.
 (no explicit family structure) There is no limit on ploidy, number of chromosom
es, number of loci and population size.
 (depends on available RAM).
 Sex chromosomes can be modeled.
\end_layout

\begin_layout Itemize
Allele can be short (<255 allelic states), long (at least 
\begin_inset Formula $2^{32}$
\end_inset

 allelic states) or binary (0 or 1).
 Binary alleles are stored as bits so a large number of SNP markers can
 be simulated.
\end_layout

\begin_layout Itemize
A population can hold arbitrary number of ancestral generations (default
 to none) for easy pedigree analysis.
 
\end_layout

\begin_layout Itemize
Population/subpopulation sizes can be changed during mating.
 Subpopulations can be created/changed as a result of migration.
 
\end_layout

\begin_layout Itemize
Several replicates of populations can be evolved simultaneously.
 
\end_layout

\begin_layout Itemize
Mating schemes include random mating, binomial selection etc.
 Number of offsprings per mating can be constant, or follow a random distributio
n.
\end_layout

\begin_layout Itemize
Populations can be saved and loaded in text, binary, XML, Fstat, GC formats.
 Methods to deal with other formats are provided.
 
\end_layout

\begin_layout Itemize
Simulation can be paused, saved and resumed easily.
\end_layout

\begin_layout Itemize
Easy developing/debugging using Python interactive shell, or run in batch
 as python scripts.
\end_layout

\begin_layout Itemize
A wide variety of operators are provided.
 They can act on the populations at selected generations, at different stages
 of a life-cycle, on different replicate or replicate group.
 
\end_layout

\begin_layout Itemize
Built-in operators for arbitrary migration model.
 
\end_layout

\begin_layout Itemize
Operators for 
\begin_inset Formula $k$
\end_inset

-allele, stepwise and generalized stepwise mutation models.
 Hybrid operators can be used for more complicated mutation models.
\end_layout

\begin_layout Itemize
Support uniform or non-uniform (differ-by-loci) recombinations.
 Male/female individuals can have different recombination rates/intensities.
 
\end_layout

\begin_layout Itemize
Support many single-locus selection model and multiplicative/additive multi-loci
 selection models.
 Hybrid operator is provided for arbitrary selection model.
\end_layout

\begin_layout Itemize
Built-in support for allele, genotype, heterozygote, haplotype number/frequency
 calculation.
 As well as some more complicated statistics like 
\begin_inset Formula $F_{st}$
\end_inset

.
 Other statistics can be calculated from these basic statistics.
\end_layout

\begin_layout Itemize
Has support for plotting through Python/SciPY, Python/MatPlotLib or RPy
 (use R through Python).
 R/Rpy is recommended.
 
\end_layout

\begin_layout Itemize
Operators to calculate quantitative trait, penetrance and draw samples from
 current population.
\end_layout

\begin_layout Itemize
Built-in ascertainment methods including case/control, affected sibpair,
 random sample.
\end_layout

\begin_layout Itemize
Maybe most importantly: 
\emph on
a complete and detailed reference manual!
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Naming Conventions
\end_layout

\begin_layout Standard

\family typewriter
simuPOP
\family default
 follows the following naming conventions.
\end_layout

\begin_layout Itemize
Classes (objects), member functions and parameter names start with small
 character and use capital character for the first character of each word
 afterwards.
 For example
\end_layout

\begin_layout LyX-Code
population, population::subPopSize(), individual::setInfo()
\end_layout

\begin_layout Itemize
Standalone functions start with capital character.
 This is how you can differ an operator from its function version.
 For example, 
\family typewriter
initByFreq
\family default
 is an operator and
\family typewriter
 InitByFreq(pop, vars)
\family default
 is its function version (equivalent to 
\family typewriter
initByFreq(vars).apply(pop)
\family default
.
\end_layout

\begin_layout Itemize
Constants start with Capital characters.
 For example
\end_layout

\begin_layout LyX-Code
MigrByProportion, StatNumOfFemale
\end_layout

\begin_layout Itemize
The following words in function names are abbreviated:
\end_layout

\begin_layout LyX-Code
dist (distance),  info (information), migr (migration), subPop (subpopulation),
 
\newline
(rep) replicate, gen (generation), grp (group(s)), ops (operators), 
\newline
expr
 (expression), stmts (statements) 
\end_layout

\begin_layout Section
How to read this manual
\end_layout

\begin_layout Standard
There are a lot of functions/operators in simuPOP and there is no reason
 you should memorize all of them.
 (I admit that I can not.) If you are a first time simuPOP user, my suggestion
 is that you read through this manual quickly only to get the big picture
 of how simuPOP works and what simuPOP can do.
 Then, if you decide to write some simulations, you should
\end_layout

\begin_layout Itemize
Read some examples under 
\family typewriter
scripts 
\family default
directory.
 From easy to difficult, you can read 
\family typewriter
simuLDDecay.py, simuCDCV.py 
\family default
and 
\family typewriter
simuComplexDisease.py.
 
\end_layout

\begin_layout Itemize
Copy one of the scripts as a template and modify it.
 For whatever function/operator you need, read the relevant sections in
 detail.
 
\end_layout

\begin_layout Section
Availability
\end_layout

\begin_layout Standard
Binary libraries of 
\family typewriter
simuPOP
\family default
 are provided for linux, windows, solaris and mac systems.
 Source code and development documentations are also available for easy
 porting to other platforms.
 Both source code and binaries can be distributed free-of-charge under GPL
 license.
 All resources, including a pdf version of this manual and a discussion
 forum can be found at the simuPOP homepage.
\end_layout

\begin_layout Chapter
Installing simuPOP
\end_layout

\begin_layout Section
Installing simuPOP
\end_layout

\begin_layout Standard
Compiled libraries for Linux (RHEL4 and Mandriva), windows XP, Solaris and
 MacOSX are provided.
 In most cases, you will only need to download simuPOP and follow the usual
 installation process of your platform.
 For example, if you use a windows system and have Python 2.3.3 installed,
 you should download 
\family typewriter
simupop-x.x.x-py23-win32.exe
\family default
.
 Double clike the 
\family typewriter
exe 
\family default
file to install.
 
\end_layout

\begin_layout Standard
Things can get complicated when you have an earlier/later versions of OS
 or Python and have to compile simuPOP from source.
 The 
\family typewriter
installation
\family default
 section of simuPOP homepage will have detailed instruction on it.
 (In most cases, a single command 
\family typewriter
python setup.py instal
\family default
 will suffice.) 
\end_layout

\begin_layout Standard
Python has a large number of modules.
 For simple tasks like dataset generation, simuPOP modules alone are enough.
 However, it is highly recommended that you install 
\end_layout

\begin_layout Itemize
a python module rpy and R so that you can make use simuPOP's plotting capacity.
 You can also make use of many of R's genetic packages to performe statistical
 analysis.
 
\end_layout

\begin_layout Itemize
By default, simuPOP uses Tkinter to get parameters (the parameter dialog).
 It will use wxPython automatically if wxPython is available.
 A bunch of other GUI improvements will also be available, the best one
 may be 
\family typewriter
listVars() 
\family default
which list all population variables in a nice tree format,
\family typewriter
 
\family default
instead of a long indented list when wxPython is not available.
\end_layout

\begin_layout Section
Starting simuPOP
\end_layout

\begin_layout Standard
After installation, you will have the following files and directories (use
 windows as an example)
\end_layout

\begin_layout Itemize
Many 
\family typewriter
simuXXX.py
\family default
 files under 
\family typewriter
c:
\backslash
python
\backslash
Lib
\backslash
site-packages
\family default
.
 These are simuPOP modules.
\end_layout

\begin_layout Itemize

\family typewriter
c:
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
doc
\family default
: docmentations in pdf format.
\end_layout

\begin_layout Itemize

\family typewriter
c:
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
test: 
\family default
all unit test cases.
 You can run run_tests.py to test if your simuPOP installation is correct.
\end_layout

\begin_layout Itemize

\family typewriter
c:
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
scripts
\series bold
\emph on
:
\emph default
 
\family default
\series default
This directory has all the built-in scripts.
\end_layout

\begin_layout Standard
You should be able to load simuPOP library by running command 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/importSimuPOP.log}
preview false

\end_inset

from python interactive shell.
 If simuPOP is located but python reports an error, please see simuPOP FAQ
 and/or post to simuPOP forum.
\end_layout

\begin_layout Section
Important Concepts
\end_layout

\begin_layout Standard
simuPOP consists of the following components.
 It is important that you know what they are and how they are related.
 In this chapter, I will briefly explain each component and explain each
 of them in detail.
\end_layout

\begin_layout Description
individual
\begin_inset LatexCommand \index{individual}

\end_inset

 individuals are building blocks of populations.
 Each individual has its own genotype (chromosomes and loci), sex, disease
 status and some other auxiliary information.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard

genotypic structure
\end_layout

\end_inset


\begin_inset LatexCommand \index{genotype structure}

\end_inset

 refers to the number of chromosomes, number and location of loci on each
 chromosome, name of alleles, maximum number of alleles.
 Individuals in the same population must have the same genotypic structure.
\end_layout

\begin_layout Description
population
\begin_inset LatexCommand \index{population}

\end_inset

 collection of individuals of the same type (genotypic structure) with subpopula
tion structure.
 A population object is associated with some variables that store population
 statistics calculated by operators.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard

Mating scheme 
\end_layout

\end_inset

 how individuals are chosen and mated during evolution.
 
\end_layout

\begin_layout Description
operator
\begin_inset LatexCommand \index{operator}

\end_inset

 operators are objects that manipulate populations.
 They can apply genetic forces like mutation, recombination, migration to
 populations, calculate population statistics, plot dynamics of variables,
 save populations or terminate simulation conditionally.
 Operators can be
\end_layout

\begin_layout Itemize

\family typewriter
built-in: 
\family default
written in C++, fastest.
 They do not interact with Python shell except that some of them set variables
 that are accessible from Python.
\end_layout

\begin_layout Itemize

\family typewriter
hybrid
\begin_inset LatexCommand \index{hybrid}

\end_inset

:
\family default
 written in C++ but calls python functions during execution.
 For example, a hybrid mutator 
\family typewriter
pyMutator 
\family default
will determine if an allele will be mutated and call a user-defined Python
 function to mutate it.
\end_layout

\begin_layout Itemize

\family typewriter
pure python:
\family default
 written in python.
 For example, a 
\family typewriter
varPlotter
\family default
 can plot python variables that are set by other operators.
\end_layout

\begin_layout Description
simulator
\begin_inset LatexCommand \index{simulator}

\end_inset

 simulator manage several replicates of 
\emph on
populations
\emph default
 and evolve them in a way specified by a
\emph on
 mating scheme
\emph default
 generation by generation, subject to arbitrary number/kinds of 
\emph on
operators
\emph default
.
 There is nothing stops you from evolving an population manually but simulator
 simplifies this process a lot.
\end_layout

\begin_layout Description
variables are associated with populations.
 They are dynamically generated by operators and can be accessed from Python
 namespace.
 This is how users obtain population statistics during evolution.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard

expression and statement
\end_layout

\end_inset

 are python expression
\begin_inset LatexCommand \index{expression}

\end_inset

 and statement
\begin_inset LatexCommand \index{statement}

\end_inset

.
 They are widely used in 
\family typewriter
simuPOP
\family default
 to specify dynamic parameters, calculate statistics etc.
 
\end_layout

\begin_layout Standard
You can refer to the 
\emph on
simuPOP user's guide
\emph default
 for a simple example.
\end_layout

\begin_layout Section
simuPOP libraries
\end_layout

\begin_layout Standard
simuPOP is composed of six libraries: stdandard short, long and binary alleles,
 plus their optimized counterparts.
 The standard libraries use 1 byte to store each allele which limits the
 possible allele states to 256.
 This is enough most of the times but not so if you need to simulate models
 like the infinite allele model.
 In those cases, you should use the long allele version of the libraries.
 Long allele libraries use 4 bytes for each allele and can have 
\begin_inset Formula $2^{32}$
\end_inset

 possible allele states.
 On the other hand, if you would like to simulate a large number of binary
 (SNP) markers, binary libraries can save you a lot of RAM.
 Due to the additional cost of accessing alleles as bits, binary modules
 will be around 10% slower than other libraries.
 
\end_layout

\begin_layout Standard
Standard libraries have detailed debug and run-time validation mechanisum
 to make sure the simulations run correctly.
 Whenver something unusual is detected, simuPOP would terminate with detailed
 error messages.
 The cost of such operations varies from simulation to simulation but can
 be severe under some extreme circumstances.
 Because of this, optimized versions for all libraries are provided.
 They bypass all parameter checking and run-time validations and will simply
 crash if things go wrong.
 It is recommended that you use standard libraries whenever possible and
 only use the optimized version when performance if needed and you are confidenc
e that your simulation is running as expected.
\end_layout

\begin_layout Standard
You can control the use of libraries in the following ways:
\end_layout

\begin_layout Itemize
Set environment variable SIMUALLELETYPE to be 'short', 'long' or 'binary',
 and SIMUOPTIMIZED to use the optimized libraries.
\end_layout

\begin_layout Itemize
Before you load simuPOP, set options using 
\family typewriter
simuOpt.setOptions
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Include \verbatiminput{log/importSimuPOPOpt.log}
preview false

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If you are running a simuPOP script that conforms to simuPOP conversion,
 you should be able to run load optimized library using command line option
 
\family typewriter
--optimized
\family default
.
 
\end_layout

\begin_layout Standard
You can tell which library is loaded from its initial output.
 For example, 
\end_layout

\begin_layout LyX-Code
Maximum allele number per locus is 255.
\end_layout

\begin_layout LyX-Code
You are running in standard mode with strict boundary check etc.
 
\end_layout

\begin_layout Standard
indicates that standard short-allele library is loaded.
\end_layout

\begin_layout Chapter
Using simuPOP scripts
\end_layout

\begin_layout Standard
There are two levels of 'using simuPOP': using simuPOP scripts, and using
 simuPOP/Python environment.
 This chapter will cover the first part.
 
\end_layout

\begin_layout Standard
Although simuPOP scripts are simply Python scripts and can be of any style.
 All scripts shipped with simuPOP packages follows the same style.
 Basically, for any script, you should be able to 
\end_layout

\begin_layout Itemize
start directly with a dialog to input parameters
\end_layout

\begin_layout Itemize
use -h or --help to view help information and description of options 
\end_layout

\begin_layout Itemize
use 
\family typewriter
--noDialog 
\family default
to suppress parameter dialog and input parameters through short or long
 command line arguments, use a configuration file, or input when being prompted.
 A default value will be used if you press enter directly.
\end_layout

\begin_layout Itemize
be able to save currently used parameters into a configuration file (
\family typewriter
--saveConfig
\family default
) and reuse it through (
\family typewriter
-c
\family default
 or
\family typewriter
 --config
\family default
 option)
\end_layout

\begin_layout Standard
Let us use 
\family typewriter
simuLDDecay.py
\family default
 as an example.
 
\end_layout

\begin_layout Section
Start a script directly
\end_layout

\begin_layout Standard

\family typewriter
simuLDDecay.py
\family default
 is located in 
\family typewriter
c:
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
scripts
\backslash
 
\family default
.
 If you double cliek its icon.
 A dialog will appear with default parameters.
 You can 
\end_layout

\begin_layout Itemize
change parameters in the edit boxes,
\end_layout

\begin_layout Itemize
view help info by clicking 
\family typewriter
Help
\family default
 button.
 ( equivalent to using 
\family typewriter
-h
\family default
 option directly)
\end_layout

\begin_layout Itemize
start simulation by cliking 
\family typewriter
start simulation! 
\family default
button.
 If any of the input is invalid, its label will be changed to red and you
 should fix the error before continuing.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename log/LDDecay.png
	lyxscale 20
	width 4in

\end_inset


\end_layout

\begin_layout Standard
Note that you can not use any command line argument in this manner so you
 can not make use of command line arguments and a configuration file.
 To avoid enter some parameters again and again, will may want to use a
 command window and run this command manually.
 To do this, you can either 
\end_layout

\begin_layout LyX-Code
$ cd 
\backslash
python
\backslash
share
\backslash
simuPOP
\backslash
scripts
\end_layout

\begin_layout LyX-Code
$ python simuLDDecay.py
\end_layout

\begin_layout Standard
or add this path to windows search path.
 
\end_layout

\begin_layout Section
Get help (-h)
\end_layout

\begin_layout Standard
Type
\end_layout

\begin_layout LyX-Code
$ python simuLDDecay.py -h 
\end_layout

\begin_layout Standard
You will get 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/LDDecayHelp.log}
preview false

\end_inset


\end_layout

\begin_layout Section
Use command line arguments
\end_layout

\begin_layout Standard
Almost all parameters have two forms of command line arguments: short (e.g.

\family typewriter
 -h
\family default
) for easy typing and long 
\family typewriter
(
\family default
e.g.
\family typewriter
--help
\family default
) for clarity.
 Arguments may or may not have a value which is indicated by XXX in the
 
\family typewriter
--help
\family default
 output.
 You can use a combination of short and long arguments like:
\end_layout

\begin_layout LyX-Code
% simuLDDecay.py -s 500 -e 10 --recRate 0.1 --numRep 5 
\end_layout

\begin_layout Standard
This method is best suited for batch process.
\end_layout

\begin_layout Section
Input argument interactively
\end_layout

\begin_layout Standard
If you prefer not to use the dialog, you can use the '
\family typewriter
--noDialog
\family default
' option to input the parameters interactively.
\end_layout

\begin_layout LyX-Code
% simuLDDecay.py -s 500 -e 10 --noDialog
\end_layout

\begin_layout Standard

\family typewriter
<CR>
\family default
 is return.
 You will notice that 
\family typewriter
simuLDDecay.py
\family default
 does not ask for values of population size and ending generating since
 they are specified in command line.
 Since all parameters have default values, you can press enter directly
 if default value is OK.
\end_layout

\begin_layout Standard
Note that you can enter any valid python expression as an input.
 For example, you can enter
\end_layout

\begin_layout LyX-Code
[.1]*10
\end_layout

\begin_layout Standard
if you would like to enter an array of 
\family typewriter
.1
\family default
.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Use a configuration file (--saveConfig)
\end_layout

\begin_layout Standard
If you are tired of using a line command line or enter parameters each time,
 you can use a configuration file.
 The best way to do this is throught the
\family typewriter
 --saveConfig 
\family default
option.
 If specified, a configuraiton file will be created with current parameter
 values.
 For example,
\end_layout

\begin_layout LyX-Code
% simuLDDecay.py --quiet -s 500 -e 10 --saveConfig decay.cfg
\end_layout

\begin_layout LyX-Code
Recombination rate (0.01): <CR>
\end_layout

\begin_layout LyX-Code
Number of replicates (5): 10<CR>
\end_layout

\begin_layout Standard
will result in a config file 
\family typewriter
decay.cfg
\family default
 with entries like 
\end_layout

\begin_layout LyX-Code
popSize = 500
\end_layout

\begin_layout LyX-Code
endGen = 10
\end_layout

\begin_layout LyX-Code
recombinationRate = 0.01
\end_layout

\begin_layout LyX-Code
numOfReplicate = 10
\end_layout

\begin_layout Standard
The actual file is much longer since it contains detailed descriptions of
 each entry.
 Note that I use 
\family typewriter
--quiet (-q) 
\family default
to suppress messages when simuPOP is loaded.
 
\end_layout

\begin_layout Standard
You can then run the program with 
\family typewriter
-c 
\family default
or 
\family typewriter
--config file 
\family default
option.
\end_layout

\begin_layout LyX-Code
$ simuLDDecay.py -q -c decay.cfg --noDialog
\end_layout

\begin_layout Standard
This is obviously a better way to enter arguments when there are a large
 number of them.
\end_layout

\begin_layout Section
Use optimized library
\end_layout

\begin_layout Standard
simuPOP actually has two sets of libraries: standard and optimized.
 The standard library is the default one to be used.
 It has strict parameter, boundary checking facilities to detect erranous
 input and make sure the simulation is running OK.
 Although using this library is higly recommended during debuging and developing
, it does slow down simuPOP, at a level up to 20%.
 The optimized libraries do not perform any boundary check and will simply
 crash when an error happens, but may save you some time when doing large
 simulations.
 A guideline is that you should always use standard library unless you are
 sure that the simulation is running well and timing has been a concern.
\end_layout

\begin_layout Standard
It is easy to use the optimized library.
 You can either
\end_layout

\begin_layout Itemize
use 
\family typewriter
--optimized 
\family default
option, or
\end_layout

\begin_layout Itemize
set environment variable 
\family typewriter
SIMUOPTIMIZED
\end_layout

\begin_layout Standard
For example, you can run
\end_layout

\begin_layout LyX-Code
$ simuLDDecay.py --optimized -c decay.cfg
\end_layout

\begin_layout Standard
although it is almost meaningless to use the optimized library for this
 small simulation.
\end_layout

\begin_layout Section
Using a script as a Python module
\end_layout

\begin_layout Standard
Due to the flexibility of Python, a python script can be run directly or
 loaded as a module (if it is coded so).
 Otherthan running a script directly, you can 
\end_layout

\begin_layout LyX-Code
>>> import simuComplexDisease
\end_layout

\begin_layout LyX-Code
>>> simuComplexDisease.simuPopulation(.....)
\end_layout

\begin_layout Standard
in an interactive session or in another python script.
 You may have to read the source code to figure out the details about the
 functions though.
\end_layout

\begin_layout Chapter
Using simuPOP environment
\end_layout

\begin_layout Standard
The core of simuPOP is a scripting language based on the Python programming
 language/environment.
 Like any other python library, you can start a python session, import simuPOP
 library, create and evolve populations interactively.
 Or, you can create a python script and run it as a batch file.
 
\end_layout

\begin_layout Standard
In this chapter, I will briefly explain each component and demonstrate them
 with an simple example.
 Detailed info about each components is given in the simuPOP reference manual.
\end_layout

\begin_layout Section
Important Concepts
\end_layout

\begin_layout Standard
simuPOP consists of the following components.
 It is important that you know what they are and how they are related.
\end_layout

\begin_layout Description
individual
\begin_inset LatexCommand \index{individual}

\end_inset

 individuals are building blocks of populations.
 Each individual has its own genotype (chromosomes and loci), sex, disease
 status and some other auxiliary information.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard

genotypic structure
\end_layout

\end_inset


\begin_inset LatexCommand \index{genotype structure}

\end_inset

 refers to the number of chromosomes, number and location of loci on each
 chromosome, name of alleles, allele names, maximum number of alleles.
 Individuals in the same population must have the same genotypic structure.
\end_layout

\begin_layout Description
population
\begin_inset LatexCommand \index{population}

\end_inset

 collection of individuals of the same type (genotypic structure) with subpopula
tion structure.
 A population object is associated with some variables that store population
 statistics calculated by operators.
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Standard

Mating scheme 
\end_layout

\end_inset

 how individuals are chosen and mate during evolution.
 
\end_layout

\begin_layout Description
operator
\begin_inset LatexCommand \index{operator}

\end_inset

 operators are objects that manipulate populations.
 They can apply genetic forces like mutation, recombination, migration to
 populations, calculate population statistics, plot dynamics of variables,
 save populations or terminate sim
\family typewriter
ize*1.2
\begin_inset Quotes erd
\end_inset

 
\family default
) of mating schemes that use the result of the expression as new subpop
 size.
\end_layout

\begin_layout Description
simulator
\begin_inset LatexCommand \index{simulator}

\end_inset

 simulator is used to evolve populations.
 It consists of one or more copies of a population and a mating scheme.
 It accepts arbitrary number of operators during evolution.
\end_layout

\begin_layout Section
A Simple Example
\begin_inset LatexCommand \label{sec:A-Simple-Example}

\end_inset


\end_layout

\begin_layout Standard
Let us demonstrate these concepts through a simple example.
 The following is a log file of an interactive Python session.
 User input text after the 
\family typewriter
>>>
\family default
 prompt and Python will intepret and run your command interactively.
 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/simpleExample.log}
preview false

\end_inset


\end_layout

\begin_layout Standard
This example demonstrates the change of haplotype number when recombination
 is in effect.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
import
\family default
 line import simuPOP module (output suppressed).
 
\family typewriter
simuUtil 
\family default
is needed to pure-Python operator 
\family typewriter
endl.
\end_layout

\begin_layout Itemize

\family typewriter
simulator 
\family default
creates a simulator from a population created by 
\family typewriter
population 
\family default
function.
 The population is diploid (
\family typewriter
ploidy=2
\family default
), has 1000 individuals (
\family typewriter
size=1000
\family default
) each has two loci on the first chromosome (
\family typewriter
loci=[2]
\family default
).
 The simulator has three copies of this population (
\family typewriter
rep=3
\family default
) and will evolve through random mating (
\family typewriter
randomMating()
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
simu.evolve
\family default
 evolves these populations subject to the following operators.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
preop=[initByValue]
\family default
: operators in parameter 
\family typewriter
preop 
\family default
(accept a list of operators) will be applied to the populations at the beginning
 of evolution.
 
\family typewriter
initByValue
\family default
 is an 
\family typewriter
initializer 
\family default
that set the same genotype to all individuals.
 In this case, everyone will have
\family typewriter
 
\family default
genotype
\family typewriter
 12/21
\family default
 (
\family typewriter
1 2 
\family default
on the first chromosome and 
\family typewriter
2 1
\family default
 on the second copy of the chromosome) so linkage disequilibrium is 0.25
 (maximum possible value).
\end_layout

\begin_layout Itemize
operators in 
\family typewriter
ops 
\family default
parameter will be applied to all populations at each generation.
 (Not exactly, operators can be inactive at certain generations.)
\end_layout

\begin_layout Itemize

\family typewriter
recombinator 
\family default
is a
\emph on
 during-mating operator
\family typewriter
\emph default
 
\family default
that recombine chromosomes with probability 0.1 (an unrealistically high
 value) during mating.
\end_layout

\begin_layout Itemize

\family typewriter
stat 
\family default
is a 
\emph on
post-mating operator 
\emph default
that count haplotype 12 and 21 at locus 0 and locus 1 respectively.
 The result will be saved in the local namespace of each replicate.
 (
\family typewriter
simuVars[0], simuVars[1], simuVars[2] 
\family default
if you are curious.)
\end_layout

\begin_layout Itemize

\family typewriter
pyEval 
\family default
accepts any python expression, evaluate it in each replicates' local namespace
 and return the result.
 In this example, 
\family typewriter
pyEval 
\family default
get the value of a haplotype 
\family typewriter
'0-1|1-2'
\family default
 and print it .
\end_layout

\begin_layout Itemize

\family typewriter
endl 
\family default
is a simple operator that output a new line character 
\family typewriter
('
\backslash
n')
\family default
 after the last replicate ( 
\family typewriter
rep=REP_LAST
\family default
).
 Note that this is a pure-Python operator defined in 
\family typewriter
simuUtil.py
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
end=5:
\family default
 evolve 5 generations.
\end_layout

\end_deeper
\begin_layout Standard
The output is a table of haplotype number for each replicate at each generation.
 All simuPOP scripts will have similar steps.
 You can add more operators to the 
\family typewriter
ops 
\family default
list to build more complicated simulations.
 Obvious choices are 
\family typewriter
mutator
\family default
, 
\family typewriter
migrator
\family default
, or some proper visualizer to plot the dynamics of variables.
\end_layout

\begin_layout Chapter
Built-in scripts
\end_layout

\begin_layout Section
Simulations of standard population genetics models
\end_layout

\begin_layout Subsection
simuLDDecay
\end_layout

\begin_layout Standard
This script has been discussed before.
\end_layout

\begin_layout Section
Simulations of the evolution of diseases
\end_layout

\begin_layout Subsection
simuComplexDisease.py
\end_layout

\begin_layout Standard
The following the result of 
\end_layout

\begin_layout LyX-Code
> simuComplexDisease.py --quiet -h
\end_layout

\begin_layout Section
simulation of the evolution of allelic spectra 
\end_layout

\begin_layout Standard
See script simuCDCV.py.
\end_layout

\begin_layout Chapter
Some Real Examples
\end_layout

\begin_layout Section
Decay of Linkage Disequilibrium
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/expLD.log}
preview false

\end_inset


\end_layout

\begin_layout Standard
Hopefully, the program is not too difficult to understand.
 
\end_layout

\begin_layout Section
Recombinator, Mutator, Migrator ...
\end_layout

\begin_layout Standard
Here is an example when all genetic forces are in effect:
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/expcomplex.log}
preview false

\end_inset


\end_layout

\begin_layout Section
Complex Migration Scheme
\end_layout

\begin_layout Standard
The following is a demonstration of dynamic population number/size change.
 Based on the same idea, we can simulate very complicated models like the
 'out of africa' model.
 Here is what this model does:
\end_layout

\begin_layout Itemize
There are 6 cities along a line.
\end_layout

\begin_layout Itemize
Migration happens only between adjacent cities at a rate of 0.1 (0.05 each
 if there are two adjacent cities).
\end_layout

\begin_layout Itemize
Population size at each city will grow by a factor of 1.2 each time.
 But when the subpopulation size exceeds 1000, starvation :-) will cut the
 subpop size by half.
\end_layout

\begin_layout Itemize
Initially, everyone is in the 3th city.
\end_layout

\begin_layout Standard
The following script describe the rules almost literally:
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/expmigration.log}
preview false

\end_inset

and you can see the change of population number/sizes clearly.
\end_layout

\begin_layout Standard
It should not be difficult to add recombinator, selectors to this model.
 Tracing the spreading of genetic diseases should also be possible, but
 this is out of the scope of this user's guide.
\end_layout

\begin_layout Section
Association Mapping with Genomic Control
\end_layout

\begin_layout Standard
This example demonstrates how to generate SNP datasets and analyze them
 using genomic control method.
 
\begin_inset LatexCommand \citep{Devlin1999,Devlin2001}

\end_inset


\end_layout

\begin_layout Standard
There are several other applications that can generate SNP datasets (e.g.
 SNPsim 
\begin_inset LatexCommand \citet{Posada2003}

\end_inset

).
 These methods are coalescent based and can simulate datasets under certain
 mutation and recombination models.
 It would be easy to generate datasets using these applications but simuPOP
 has the following advantages:
\end_layout

\begin_layout Itemize
simuPOP can keep track of details of ancestral generations so it is possible
 to perform various analysis multiple times.
 For example, you can trace the formation of haplotype blocks or test the
 power of association method as a function of generation.
\end_layout

\begin_layout Itemize
simuPOP can simulate selection and many other complicated scenarios.
 It is easy to add more genetic forces and observe their impact on your
 study.
\end_layout

\begin_layout Subsection
Genotypic structure and Initial Population (incomplete)
\end_layout

\begin_layout Standard
For SNP datasets, we can simulate loci with two (1/2) or four (A/C/T/G)
 allelic states.
 Since we will have at most 2 alleleic states at each locus and it does
 not matter exactly what two states a lcous has, the first one makes more
 sense.
 If you would like to simulate four allelic states, you will have to use
 the 
\family typewriter
states 
\family default
option of mutators so that alleles will mutate back and force in these states.
 
\end_layout

\begin_layout Standard
This example will initialize the population with genotype of a single individual.
 Linkage disequlibrium is at its highest at first and will break down with
 time.
 Note that we need to make sure initial individuals are heterozygous at
 disease susceptibility locus so LD will exist between this locus and others.
\end_layout

\begin_layout Subsection
Mutation model
\end_layout

\begin_layout Standard
Coalescent based applications usually use 'infiite-site model
\begin_inset LatexCommand \index{mutation!infinite site model'}

\end_inset

' to perform mutation.
 In such simulations, once a mutation happens on the coalescent tree, it
 will definitely be passed to the final generation.
 This makes infinite-site model very appealing both in theory and in practics.
 However, in a forward-based simulation, a mutation may get lost very quickly
 so what is 'infinite-site' becomes unclear.
 There is also no sensible choice how to implement this model: 'mutation
 will not happen at a site that has been mutated before' does not make sense
 in biolody!
\end_layout

\begin_layout Standard
To avoid these troubles, I choose a Juke-Cantor model 
\begin_inset LatexCommand \citet{Jukes1969}

\end_inset

 (essentially a K-allele model) with two allelic states.
 I.e., allele 1 and 2 will mutate to each other with equal probability.
 
\end_layout

\begin_layout Subsection
Recombination
\end_layout

\begin_layout Standard
Uniform recombination with rate 0.0001 will be used.
 Although non-uniform recombination can be applied easily.
 (Use the array form of parameter 
\family typewriter
rate
\family default
.)
\end_layout

\begin_layout Section
Does rapid population growth lead to common disease/common variant in human
 population?
\end_layout

\begin_layout Standard
Reich and Lander's 2001 paper ``On the allelic spectrum of human disease''
 ( Trends in Genetics, 17(0):502-510) proposed a population genetics framework
 to model the evolution of allelic spectra.
 The model is based on the fact that human population grew quickly from
 around 10,000 to 6 billion in 18,000 -150,000 years.
 His analysis showed that at the founder population, both common and rare
 diseases have simple spectra.
 After the sudden expansion of population size, the allelic spectra of simple
 diseases become complex; while those of complex diseases remained simple.
\end_layout

\begin_layout Standard
I will use simuPOP to simulate this evolution process and observe the allelic
 spectra of both diseases.
\end_layout

\begin_layout Subsection
Population expansion
\end_layout

\begin_layout Standard
The initial population size is set to 10,000, as suggested in the paper.
 The simulation will evolve 500 generations with constant population size
 to reach mutation-selection equilibrium.
 Then, the population size will increase by around 20,000 every 10 generations
 and reach 1,000,000 at generation 1000.
 The population growth takes around 12,500 years if we assume 25 years per
 generation.
 Other growth patterns are also simulated.
\end_layout

\begin_layout Standard
Actually human population took 720 ~ 6000 generations to reach a population
 of size 6 billion.
 There is no way to simulate such a huge population -- the biggest population
 my workstation (equipped with 2G RAM) can handle is around 50 million.
 However, mating of really human population is far from random which implies
 a much smaller effected population size.
 As it turns out, a final population size of 1 million is enough to demonstrate
 the model.
\end_layout

\begin_layout Subsection
Mutation model
\end_layout

\begin_layout Standard
The maximum number of alleles at each locus is set to be 255, a number that
 is hopefully big enough to mimic the infinite allele model.
 Allele 1 is the wild type (
\begin_inset Formula $A$
\end_inset

) and all others are disease alleles (
\begin_inset Formula $a$
\end_inset

).
 The 
\begin_inset Formula $k-$
\end_inset

allele mutation model is used.
 That is to say, an allele can mutate to any other allele with equal probability.
 An immediate implication of this model is that 
\begin_inset Formula $P\left(A\rightarrow a\right)\gg P\left(a\rightarrow A\right)$
\end_inset

 since there are many more 
\begin_inset Formula $a$
\end_inset

 than 
\begin_inset Formula $A$
\end_inset

.
 
\end_layout

\begin_layout Standard
The mutation rate is set to 
\begin_inset Formula $\mu=3.2\times10^{-5}$
\end_inset

 per locus per generation, the same for common and complex disease, and
 regardless of current allelic state.
 This rate is not 
\begin_inset Formula $P\left(A\rightarrow a\right)$
\end_inset

.
 Instead, it is `probability to mutate' regardless of current allelic state.
 Consequently, 
\begin_inset Formula \[
P\left(A\rightarrow a\right)=P\left(A\rightarrow a\mid A\right)P\left(A\right)P\left(\textrm{mutate}\right)=\mu p\]

\end_inset

since 
\begin_inset Formula $P\left(A\rightarrow a\right)=1$
\end_inset

 and 
\begin_inset Formula $P\left(A\right)$
\end_inset

 is the allele frequency of allele 
\begin_inset Formula $A$
\end_inset

.
 For rare disease, 
\begin_inset Formula $p\sim1$
\end_inset

 so 
\begin_inset Formula $\mu\sim P\left(A\rightarrow a\right)$
\end_inset

.
 
\end_layout

\begin_layout Standard
Note that I can also use 
\begin_inset Formula $\mu=3.2\times10^{-6}$
\end_inset

 as suggested in the paper, at a cost of longer simulation time.
\end_layout

\begin_layout Subsection
Selection on a common and a rare disease 
\end_layout

\begin_layout Standard
Two diseases are simulated: a common disease with initial allele frequency
 of 
\begin_inset Formula $f_{0}=0.2$
\end_inset

; and a rare disease with initial allele frequency of 
\begin_inset Formula $f_{0}=0.001$
\end_inset

.
 The diseases are unlinked in the sense that their corresponding loci reside
 on separated chromosomes.
 The allelic spectra of both diseases are set to be 
\begin_inset Formula $\left[.9,.02,.02,.02,.02,.02\right]$
\end_inset

.
 I.e., one allele accounts for 90% of the disease cases.
 
\end_layout

\begin_layout Standard
Both diseases are recessive in that their fitness values are 
\begin_inset Formula $\left[1,1,1-s\right]$
\end_inset

 for genotype 
\begin_inset Formula $AA$
\end_inset

, 
\begin_inset Formula $Aa$
\end_inset

 and 
\begin_inset Formula $aa$
\end_inset

 respectively.
 
\begin_inset Formula $s_{c}=0.1$
\end_inset

 , 
\begin_inset Formula $s_{r}=0.9$
\end_inset

 are used in the simulation which imply weak selection on the common disease
 and strong selection on the rare disease.
 If an individual has both diseases, his fitness value follows a multiplicative
 model, i.e., 
\begin_inset Formula $\left(1-s_{c}\right)\times\left(1-s_{r}\right)=0.09$
\end_inset

.
 
\end_layout

\begin_layout Standard
The choice of 
\begin_inset Formula $s_{c}$
\end_inset

 and 
\begin_inset Formula $s_{r}$
\end_inset

 seems to be appropriate because allele frequencies of disease alleles for
 both diseases remain largely unchanged during the first 500 generations.
 This suggests that both diseases are in mutation-selection equilibrium.
\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Standard
The python script is short and well commented.
 It translates the above specifications word by word into Python/simuPOP.
 The plots are drawn by R.
 All I did was assign variables to R workspace by 
\family typewriter
r.assign
\family default
 function and execute a big trunk of 
\family typewriter
R 
\family default
code through 
\family typewriter
r(`')
\family default
 function.
 This part of source code is omited since it is irrelevant to simuPOP.
 
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/reich.py}
preview false

\end_inset


\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Standard
The simulation results match Reich's paper well.
 The allelic spectra of common disease remain largely unchanged during simulatio
n while rare disease spectra become complex over time.
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{log/simuComplexDisease.log}
preview false

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[bibtotoc,plainnat]{all}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand \printindex{}

\end_inset


\end_layout

\end_body
\end_document
