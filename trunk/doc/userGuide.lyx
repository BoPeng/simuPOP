#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass manual
\begin_preamble
\renewcommand{\py@ptsize}{12pt}

\setreleaseinfo{Release 0.8.8 (\mbox{$$Rev$$})}
\authoraddress{
{\bf Department of Epidemiology, U.T. M.D. Anderson Cancer Center}\\
{\bf Email: } \textsf{bpeng@mdanderson.org}\\
{\bf URL: } \textsf{http://simupop.sourceforge.net} \\
{\bf Mailing List: } \textsf{simupop-list@lists.sourceforge.net}
}
\author{Bo Peng}
\date{December 2004\\
\hfill{}\\
Last modified \\
\today }

\ifhtml
\chapter*{Front Matter\label{front}}
\fi

\renewcommand\lstlistlistingname{List of Examples}
\renewcommand\lstlistingname{Example}

\sloppy

\definecolor{TitleColor}{rgb}{0.126,0.263,0.361}
\definecolor{LinkColor}{rgb}{0.208,0.374,0.486}
\definecolor{VerbatimColor}{rgb}{0,0,0}
\definecolor{VerbatimBackgroundColor}{rgb}{0.98,0.941,0.902}
\definecolor{VerbatimBorderColor}{rgb}{0,0,0}
\definecolor{VerbatimStringColor}{rgb}{0,0.5,0}
\definecolor{VerbatimCommentColor}{rgb}{0.2,0.2,0.2}
\definecolor{VerbatimPromptColor}{rgb}{0.588,0.098,0.054}

\usepackage{sectsty}
\sectionfont{\color{TitleColor}}
\subsectionfont{\color{TitleColor}}
\subsubsectionfont{\color{TitleColor}}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "simuPOP User's Guide"
\pdf_author "Bo Peng"
\pdf_keywords "simuPOP"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref page
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=TitleColor,urlcolor=LinkColor"
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "alsoletter={>.},backgroundcolor={\color{VerbatimBackgroundColor}},basicstyle={\small\ttfamily\color{VerbatimColor}},commentstyle={\color{VerbatimCommentColor}\slshape},emph={[2]>>>,...},emphstyle={[2]\color{VerbatimPromptColor}\bf},language=Python,otherkeywords={>>>,...},showspaces=false,showstringspaces=false,showtabs=false,stringstyle={\color{VerbatimStringColor}},xleftmargin=10pt"
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
simuPOP User's Guide
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100col%"
special "none"
height "1pt"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{7.5in} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
copyright{} 
\end_layout

\end_inset

 2004-2008 Bo Peng 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{.3cm} 
\backslash
hrule 
\backslash
vspace{0.1cm} 
\end_layout

\end_inset

Permission is granted to make and distribute verbatim copies of this manual
 provided the copyright notice and this permission notice are preserved
 on all copies.
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that the
 sections entitled Copying and GNU General Public License are included exactly
 as in the original, and provided that the entire resulting derived work
 is distributed under the terms of a permission notice identical to this
 one.
 Permission is granted to copy and distribute translations of this manual
 into another language, under the above conditions for modified versions,
 except that this permission notice may be stated in a translation approved
 by the Free Software Foundation.
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
simuPOP is a forward-time population genetics simulation environment.
 Unlike coalescent-based programs, simuPOP evolves populations forward in
 time, subject to arbitrary number of genetic and environmental forces such
 as mutation, recombination, migration and population/subpopulation size
 changes.
 Statistics of populations can be calculated and visualized dynamically
 which makes simuPOP an ideal tool to demonstrate population genetics models;
 generate datasets under various evolutionary settings, and more importantly,
 study complex evolutionary processes and evaluate gene mapping methods.
\end_layout

\begin_layout Abstract
simuPOP is provided as a number of Python modules, which provide of a large
 number of Python objects and functions, including population, mating schemes,
 operators (objects that manipulate populations) and simulators to coordinate
 the evolutionary processes.
 It is the users’ responsibility to write a Python script to glue these
 pieces together and form a simulation.
 At a more user-friendly level, simuPOP provides an increasing number of
 bundled scripts that perform simulations ranging from implementation of
 basic population genetics models to generating datasets under complex evolution
ary scenarios.
 No knowledge about Python or simuPOP would be needed to run these simulations,
 if they happen to fit your need.
\end_layout

\begin_layout Abstract
This user's guide shows you how to install and use simuPOP using a large
 number of examples.
 It describes all important concepts and features of simuPOP and shows you
 how to use them in a simuPOP script.
 For a complete and detailed desciprion about all simuPOP functions and
 classes, please refer to the 
\emph on
simuPOP Reference Manual.

\emph default
 All resources, including a pdf version of this guide and a mailing list
 can be found at the simuPOP homepage 
\family typewriter
http://simupop.sourceforge.net
\family default
.
\end_layout

\begin_layout Abstract

\series bold
How to cite simuPOP: 
\end_layout

\begin_deeper
\begin_layout Quote
Bo Peng and Marek Kimmal (2005) simuPOP: a forward-time population genetics
 simulation environment.
 
\emph on
bioinformatics
\emph default
, 
\series bold
21
\series default
(18): 3686-3687
\end_layout

\begin_layout Quote
Bo Peng and Christopher Amos (2008) Forward-time simulations of nonrandom
 mating populations using simuPOP.
 
\emph on
bioinformatics,
\emph default
 
\series bold
24
\series default
 (11)
\begin_inset Quotes erd
\end_inset

 1408-1409.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This reference manual uses examples generated by 'runSampleCode.py userGuide.py',
 'runSampleCode.py splitMerge.py', and simuPOP_ref.tex generated by 'doxygen;
 cd tools; doxy2swig.py'..
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistoflistings
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
What is simuPOP?
\end_layout

\begin_layout Standard
simuPOP is an individual-based forward-time population genetics simulation
 environment based on Python, a dynamic object-oriented programming language
 that has been widely used in biological studies.
 simuPOP provides a large number of Python objects and functions, and a
 mechanism to evolve populations forward in time.
 It is the users’ responsibility to write a Python script to form a simulation.
 At a more user-friendly level, simuPOP provides an increasing number of
 built-in scripts so that users who are unfamiliar with Python and simuPOP
 can perform some pre-specified simulation processes.
 These scripts range from implementation of basic population genetics models
 to generating datasets under complex evolutionary scenarios.
 In addition, simuPOP modules and functions are provided to load and manipulate
 HapMap samples and to perform a number of popular gene-mapping methods.
\end_layout

\begin_layout Standard
Unlike other population genetics simulation applications that aim at specific
 evolutionary scenarios, simuPOP aims at providing a general purpose simulation
 program that can be used to write and study arbitrarily complex evolutionary
 scenarios.
 This makes simuPOP an ideal tool in a wide variety of applications ranging
 from demonstrating simple population genetics models to studying the evolution
 of complex human genetic diseases.
\end_layout

\begin_layout Section
An overview of simuPOP concepts
\end_layout

\begin_layout Standard
A simuPOP 
\series bold
population
\series default
 consists of individuals of the same 
\series bold
genotype structure
\series default
, which include properties such as number of homologous sets of chromosomes
 (ploidy), number of chromosomes, and names and locations of markers on
 each chromosome.
 Individuals can be divided into 
\series bold
subpopulations
\series default
 that can be further divided into
\emph on
 
\series bold
\emph default
virtual subpopulations
\series default
 according to individual properties such as sex, affection status, or arbitrary
 auxiliary information such as age.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:life-cycle"

\end_inset

A life cycle of an evolutionary process
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename evolve.png
	width 80text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Operators
\series default
 are Python objects that act on a population.
 They can be applied to a population before or after mating during a life
 cycle of an evolutionary process (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:life-cycle"

\end_inset

), or to one or two parents during the production of each offspring.
 Arbitrary numbers of operators can be applied to an evolving population.
\end_layout

\begin_layout Standard
A simuPOP 
\series bold
mating scheme
\series default
 is responsible for choosing parent or parents from a parental (virtual)
 subpopulation and for populating an offspring subpopulation.
 simuPOP provides a number of pre-defined mating schemes, such as random,
 consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid
 mating in hymenoptera.
 More complicated nonrandom mating schemes such as mating in age-structured
 populations can be constructed using 
\series bold
heterogeneous mating schemes
\series default
.
 
\end_layout

\begin_layout Standard
simuPOP evolves a population generation by generation, following the evolutionar
y cycle depicted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:life-cycle"

\end_inset

.
 Briefly speaking, a number of 
\series bold
pre-mating operators
\series default
 such as a 
\emph on
mutator
\emph default
 are applied to a population before a mating scheme repeatedly chooses a
 parent or parents to produce offspring.
 
\series bold
During-mating operators
\series default
 such as 
\emph on
recombinator
\emph default
 can be used to adjust how offspring genotypes are formed from parental
 genotypes.
 After an offspring population is populated, 
\series bold
post-mating operators
\series default
 can be applied, for example, to calculate population statistics.
 The offspring population will then become the parental population of the
 next evolutionary cycle.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "log/simpleExample.log"
lstparams "caption={A simple example},label={simple-example}"

\end_inset


\end_layout

\begin_layout Standard
These concepts are demonstrated in Example 
\begin_inset CommandInset ref
LatexCommand ref
reference "simple-example"

\end_inset

, where a standard diploid Wright-Fisher model with recombination is simulated.
 The first line imports the standard simuPOP module.
 The second line creates a diploid population with 1000 individuals, each
 having one chromosome with two loci.
 The third line creates a simulator with three replicates of this population.
 Random mating will be used to generate offspring.
 The last statement uses the 
\family typewriter
evolve()
\family default
 function to evolve the populations for 100 generations, subject to five
 operators.
\end_layout

\begin_layout Standard
The first operator 
\family typewriter
initByValue
\family default
 is applied to all populations before evolution.
 This operator initializes all individuals with the same genotype 
\family typewriter
12/21
\family default
.
 The other operators can be applied at every generation.
 
\family typewriter
recombinator
\family default
 is a during-mating operator that recombines parental chromosomes with the
 given recombination rate 
\family typewriter
0.01
\family default
 during the generation of offspring; 
\family typewriter
stat
\family default
 calculates linkage disequilibrium between the first and second loci.
 The results of this operator are stored in a local variable space of each
 population.
 The last two operators 
\family typewriter
pyEval
\family default
 and 
\family typewriter
pyOutput
\family default
 are applied at the end of every 10 generations.
 
\family typewriter
pyEval
\family default
 is applied to all replicates to output calculated linkage disequilibrium
 values with a trailing tab, and the last operator outputs a newline after
 the last replicate.
 The result is a table of three columns, representing the decay of linkage
 disequilibrium of each replicate at 10 generation intervals.
 The return value of the 
\family typewriter
evolve
\family default
 function, which is the number of evolved generations for each replicate,
 is also printed.
\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Standard
simuPOP offers a long list of features, many of which are unique among all
 forward-time population genetics simulation programs.
 The most distinguished features include:
\end_layout

\begin_layout Enumerate
simuPOP provides three types of modules that use 1, 8 or 16 bits to store
 an allele.
 The binary module (1 bit) is suitable for simulating a large number of
 SNP markers and the long module (16 bits) is suitable for simulating some
 population genetics models such as the infinite allele mutation model.
 simuPOP supports different types of chromosomes such as autosome, sex chromosom
es and mitochondrial, with arbitrary number of markers.
\end_layout

\begin_layout Enumerate
An arbitrary number of float numbers, called information fields, can be
 attached to individuals of a population.
 For example, information field father_idx and mother_idx are used to track
 an individual’s parents, and pack_year can be used to simulate an environmental
 factor associated with smoking.
\end_layout

\begin_layout Enumerate
simuPOP does not impose any limit on number of homologous sets of chromosomes,
 the size of the genome, or the number of individuals in a population.
 During an evolutionary process, a population can hold more than one most-recent
 generations.
 Pedigrees can be sampled from such multi-generation populations.
\end_layout

\begin_layout Enumerate
An operator can be native (implemented in C++) or hybrid (Python assisted).
 A hybrid operator calls a user-provided Python function to implement arbitrary
 genetic effects.
 For example, a hybrid mutator passes to-be-mutated alleles to a user-provided
 function and mutates these alleles according to the returned values.
\end_layout

\begin_layout Enumerate
simuPOP provides more than 70 operators that cover all important aspects
 of genetic studies.
 These include mutation (
\emph on
k
\emph default
-allele, stepwise, genera