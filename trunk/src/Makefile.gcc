# to save compiling time. 
# boost::variant, boost::spirit use expression template a lot and
# take a lot of time to copile.
# 
# Currently, with inline expression (boost::variant, boost::spirit)
#   utility.cpp 100s, wrap.cpp  link 120s
# without this feature
#   utility.cpp 15s, wrap.cpp link 36s
# without serialization as well
#   utility.cpp 16s, wrap.cpp 36s, link 12s
#   
# I will disable this feature most of time just to speed up development.
# All expression will return 0 as a result.
#
FEATURES = 

PY_FILES=simuUtil.py simuSciPy.py simuMatPlt.py simuRPy.py
DIST_FILES=$(PY_FILES) _simuPOP.so simuPOP.py 
PYTHON_DIR=/usr/lib/python2.2/site-packages/
TEST_DIR=../test/
EXAMPLE_DIR=../examples/
INTERNALTEST_DIR=../internal-test/
DOC_DIR=../doc/
PYTHON_INC = -I/usr/include/python2.3/ 
BOOST_INC =  -I../
GSL_INC = -I../
INCLUDES= -I. $(PYTHON_INC) $(BOOST_INC) $(GSL_INC)
SERIAL_SRC=serialization

SERIAL_LIB=-L. -lm
GSL_LIB= # -L/usr/local/lib -lgsl -lgslcblas -lm 
LIBS = $(GSL_LIB) 

CC = gcc
CXX = g++
LINK = g++ 
CFLAGS =  -g -Wall -fexceptions -O3 -march=pentium4 -pipe -fomit-frame-pointer 
DEF = $(FEATURES) 
#SWIG = /home/bpeng/swig/bin/swig -keyword -w-312,-401,-503,-511,-362,-383,-384,-389,-315,-525 -nodefault 
SWIG = swig -keyword -w-312,-401,-503,-511,-362,-383,-384,-389,-315,-525 -nodefault 

RM = rm -f

HEADFILES=../config.h simupop_cfg.h  migrator.h  population.h    simulator.h  terminator.h \
individual.h   mutator.h   stator.h     utility.h \
initializer.h  operator.h  recombinator.h \
mating.h       outputer.h  selector.h      tagger.h 

SERIAL_OBJS= \
$(SERIAL_SRC)/basic_archive.o \
$(SERIAL_SRC)/basic_xml_archive.o \
$(SERIAL_SRC)/basic_iarchive.o \
$(SERIAL_SRC)/basic_oarchive.o \
$(SERIAL_SRC)/basic_serializer_map.o \
$(SERIAL_SRC)/basic_text_iprimitive.o \
$(SERIAL_SRC)/basic_text_oprimitive.o \
$(SERIAL_SRC)/text_iarchive.o \
$(SERIAL_SRC)/text_oarchive.o \
$(SERIAL_SRC)/binary_iarchive.o \
$(SERIAL_SRC)/binary_oarchive.o \
$(SERIAL_SRC)/xml_grammar.o \
$(SERIAL_SRC)/xml_iarchive.o \
$(SERIAL_SRC)/xml_oarchive.o \
$(SERIAL_SRC)/extended_type_info.o \
$(SERIAL_SRC)/extended_type_info_no_rtti.o \
$(SERIAL_SRC)/extended_type_info_typeid.o \
$(SERIAL_SRC)/void_cast.o \
$(SERIAL_SRC)/polymorphic_iarchive.o \
$(SERIAL_SRC)/polymorphic_oarchive.o \


GSL_OBJS= ../gsl/sys/infnan.o ../gsl/sys/coerce.o ../gsl/sys/fdiv.o    ../gsl/sys/pow_int.o \
../gsl/sys/fcmp.o ../gsl/specfunc/psi.o   ../gsl/specfunc/trig.o  ../gsl/specfunc/exp.o \
../gsl/specfunc/log.o ../gsl/specfunc/erfc.o   ../gsl/specfunc/zeta.o  ../gsl/specfunc/elementary.o \
../gsl/specfunc/gamma.o ../gsl/rng/borosh13.o ../gsl/rng/fishman2x.o ../gsl/rng/mt.o  ../gsl/rng/rand.o \
../gsl/rng/ranmar.o  ../gsl/rng/types.o ../gsl/rng/cmrg.o  ../gsl/rng/gfsr4.o  ../gsl/rng/r250.o \
../gsl/rng/random.o ../gsl/rng/rng.o   ../gsl/rng/uni32.o ../gsl/rng/coveyou.o ../gsl/rng/knuthran2.o \
../gsl/rng/ran0.o ../gsl/rng/randu.o ../gsl/rng/slatec.o  ../gsl/rng/uni.o ../gsl/rng/default.o \
../gsl/rng/knuthran.o ../gsl/rng/ran1.o ../gsl/rng/ranf.o ../gsl/rng/taus113.o  ../gsl/rng/vax.o \
../gsl/rng/file.o  ../gsl/rng/lecuyer21.o ../gsl/rng/ran2.o ../gsl/rng/ranlux.o ../gsl/rng/taus.o \
../gsl/rng/waterman14.o ../gsl/rng/fishman18.o ../gsl/rng/minstd.o  ../gsl/rng/ran3.o ../gsl/rng/ranlxd.o \
../gsl/rng/transputer.o ../gsl/rng/zuf.o ../gsl/rng/fishman20.o ../gsl/rng/mrg.o  ../gsl/rng/rand48.o \
../gsl/rng/ranlxs.o ../gsl/rng/tt.o ../gsl/randist/nbinomial.o ../gsl/randist/beta.o ../gsl/randist/exponential.o \
../gsl/randist/geometric.o ../gsl/randist/binomial.o ../gsl/randist/poisson.o ../gsl/randist/rdgamma.o  \
../gsl/randist/chisq.o   ../gsl/randist/gauss.o ../gsl/error.o


OBJS = $(GSL_OBJS) $(SERIAL_OBJS)

std: _simuPOP_std.so

op: _simuPOP_op.so

la: _simuPOP_la.so

laop: _simuPOP_laop.so

ba: _simuPOP_ba.so

baop: _simuPOP_ba.so

all: std op la laop

_simuPOP_std.so: $(OBJS) utility_std.o simuPOP_std_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_std.o simuPOP_std_wrap.o $(LIBS) -o _simuPOP_std.so

_simuPOP_op.so: $(OBJS) utility_op.o simuPOP_op_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_op.o simuPOP_op_wrap.o $(LIBS) -o _simuPOP_op.so

_simuPOP_la.so: $(OBJS) utility_la.o simuPOP_la_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_la.o simuPOP_la_wrap.o $(LIBS) -o _simuPOP_la.so

_simuPOP_laop.so: $(OBJS) utility_laop.o simuPOP_laop_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_laop.o  simuPOP_laop_wrap.o $(LIBS) -o _simuPOP_laop.so

_simuPOP_ba.so: $(OBJS) utility_ba.o simuPOP_ba_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_ba.o simuPOP_ba_wrap.o $(LIBS) -o _simuPOP_ba.so

_simuPOP_baop.so: $(OBJS) utility_baop.o simuPOP_baop_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_baop.o  simuPOP_baop_wrap.o $(LIBS) -o _simuPOP_baop.so

simuPOP_std_wrap.o: simuPOP_std_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_std $(DEF) $(UDEF) $(CFLAGS) -c $<

simuPOP_op_wrap.o: simuPOP_op_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES)  -DSIMUPOP_MODULE=simuPOP_op $(DEF) -DOPTIMIZED $(UDEF) $(CFLAGS) -c $<

simuPOP_la_wrap.o: simuPOP_la_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES)  -DSIMUPOP_MODULE=simuPOP_la $(DEF) -DLONGALLELE $(UDEF) $(CFLAGS) -c $<

simuPOP_laop_wrap.o: simuPOP_laop_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES)  -DSIMUPOP_MODULE=simuPOP_laop $(DEF) -DOPTIMIZED -DLONGALLELE $(UDEF) $(CFLAGS) -c $<

simuPOP_ba_wrap.o: simuPOP_ba_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES)  -DSIMUPOP_MODULE=simuPOP_ba $(DEF) -DBINARYALLELE $(UDEF) $(CFLAGS) -c $<

simuPOP_baop_wrap.o: simuPOP_baop_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES)  -DSIMUPOP_MODULE=simuPOP_baop $(DEF) -DOPTIMIZED -DBINARYALLELE $(UDEF) $(CFLAGS) -c $<


simuPOP_std_wrap.cpp: simuPOP_std.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -shadow -c++ -python -o simuPOP_std_wrap.cpp simuPOP_std.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_std_wrap.cpp

simuPOP_op_wrap.cpp: simuPOP_op.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DOPTIMIZED -shadow -c++ -python -o simuPOP_op_wrap.cpp simuPOP_op.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_op_wrap.cpp

simuPOP_la_wrap.cpp: simuPOP_la.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DLONGALLELE -shadow -c++ -python -o simuPOP_la_wrap.cpp simuPOP_la.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_la_wrap.cpp

simuPOP_laop_wrap.cpp: simuPOP_laop.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DLONGALLELE -DOPTIMIZED -shadow -c++ -python -o simuPOP_laop_wrap.cpp simuPOP_laop.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_laop_wrap.cpp
	
simuPOP_ba_wrap.cpp: simuPOP_ba.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DBINARYALLELE -shadow -c++ -python -o simuPOP_ba_wrap.cpp simuPOP_ba.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_ba_wrap.cpp

simuPOP_baop_wrap.cpp: simuPOP_baop.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DBINARYALLELE -DOPTIMIZED -shadow -c++ -python -o simuPOP_baop_wrap.cpp simuPOP_baop.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_baop_wrap.cpp


utility_std.o: utility.h utility_std.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_std $(DEF) $(UDEF) $(CFLAGS) -c utility_std.cpp -o utility_std.o

utility_op.o: utility.h utility_op.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_op -DOPTIMIZED $(DEF) $(UDEF) $(CFLAGS) -c utility_op.cpp -o utility_op.o

utility_la.o: utility.h utility_la.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_la -DLONGALLELE $(DEF) $(UDEF) $(CFLAGS) -c utility_la.cpp -o utility_la.o

utility_laop.o: utility.h utility_laop.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_laop -DOPTIMIZED -DLONGALLELE $(DEF) $(UDEF) $(CFLAGS) -c utility_laop.cpp -o utility_laop.o
	
utility_ba.o: utility.h utility_ba.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_ba -DBINARYALLELE $(DEF) $(UDEF) $(CFLAGS) -c utility_ba.cpp -o utility_ba.o

utility_baop.o: utility.h utility_baop.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DSIMUPOP_MODULE=simuPOP_baop -DOPTIMIZED -DBINARYALLELE $(DEF) $(UDEF) $(CFLAGS) -c utility_baop.cpp -o utility_baop.o


utility_std.cpp: utility.cpp
	cp -f utility.cpp utility_std.cpp

utility_op.cpp: utility.cpp
	cp -f utility.cpp utility_op.cpp

utility_la.cpp: utility.cpp
	cp -f utility.cpp utility_la.cpp

utility_laop.cpp: utility.cpp
	cp -f utility.cpp utility_laop.cpp
	
utility_ba.cpp: utility.cpp
	cp -f utility.cpp utility_ba.cpp

utility_baop.cpp: utility.cpp
	cp -f utility.cpp utility_baop.cpp

%.o: %.c
	$(CC) $(INCLUDES) $(DEF) $(UDEF) $(CFLAGS) -c $< -o $@

# other cpp's does not change with head file change (serialization cpps)
%.o: %.cpp 
	$(CXX) $(INCLUDES) $(DEF) $(UDEF)  $(CFLAGS) -c $< -o $@

clean:
	$(RM) $(OBJS) _simuPOP_*.so  *_wrap.cpp core.*
