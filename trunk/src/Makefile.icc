#######################################################################
#                                                                     #
#  Makefile to compile simuPOP using intel icc compiler.              #
#                                                                     #
#  This is platform dependent so modify the parameters accordingly    #
#                                                                     #
#  This makefile uses gcc cxx lib. You can use ccc cxx lib by         #
#  uncommenting appropriate lines.                                    #
#######################################################################


PYTHON_INC= -I/usr/include/python2.3/
CC= /usr/site/intel/cc/9.0/bin/icc
CXX= /usr/site/intel/cc/9.0/bin/icpc
LINK= /usr/site/intel/cc/9.0/bin/icpc 
# if you do not have SWIG, comment the following line
WRAP=simuPOP_wrap.cpp
# define -DOPTIMIZED, -DLONGALLELE accroding to your need.
DEF=-DLONGALLELE -DOPTIMIZED
#  if CXXLIB=ICC, uncomment the folloowing (never succeed, seems to 
#  be a boost/serialization/icc compatibility problem)
#CPP_INC=
#CFLAGS=  -xN  -Wbrief  -w1  -O3 -tpp7 -parallel -cxxlib-icc 
#LIBS= -L/usr/site/icc/lib -lcprts -lcxaguard -lsvml -lunwind -lguide -lstdc++
CPP_INC = -I/usr/include -I/usr/include/c++/3.4.2/ -I.
CFLAGS =  -xN  -Wbrief  -cxxlib-gcc  -w2 -wd981,424,383,869,279,810,193 -O3 -tpp7 -parallel   
SERIAL_LIB=-L. -lserial
GSL_LIB= -L/usr/local/lib -lgsl -lgslcblas -lm
LIBS= $(GSL_LIB)


########################################################################
BOOST_INC =  -I../
GSL_INC= -I../
INCLUDES=  $(CPP_INC) $(PYTHON_INC) $(BOOST_INC) $(GSL_INC)
SERIAL_SRC=serialization
# if using existing library
#GSL_LIB=-L/usr/local/lib -lgsl -lgslcblas -lm
RM = rm -f
SWIG= swig -keyword -w-312,-401,-503,-511,-362,-383,-384,-389,-315,-525 -nodefault 

HEADFILES=../config.h simupop_cfg.h migrator.h population.h  simulator.h terminator.h \
individual.h  mutator.h  stator.h   utility.h initializer.h operator.h recombinator.h \
mating.h    outputer.h selector.h   tagger.h 

SIMUPOP_OBJS=utility.o

SERIAL_OBJS= \
$(SERIAL_SRC)/basic_archive.o \
$(SERIAL_SRC)/basic_xml_archive.o \
$(SERIAL_SRC)/basic_iarchive.o \
$(SERIAL_SRC)/basic_oarchive.o \
$(SERIAL_SRC)/basic_serializer_map.o \
$(SERIAL_SRC)/basic_text_iprimitive.o \
$(SERIAL_SRC)/basic_text_oprimitive.o \
$(SERIAL_SRC)/text_iarchive.o \
$(SERIAL_SRC)/text_oarchive.o \
$(SERIAL_SRC)/binary_iarchive.o \
$(SERIAL_SRC)/binary_oarchive.o \
$(SERIAL_SRC)/xml_grammar.o \
$(SERIAL_SRC)/xml_iarchive.o \
$(SERIAL_SRC)/xml_oarchive.o \
$(SERIAL_SRC)/extended_type_info.o \
$(SERIAL_SRC)/extended_type_info_no_rtti.o \
$(SERIAL_SRC)/extended_type_info_typeid.o \
$(SERIAL_SRC)/void_cast.o \
$(SERIAL_SRC)/polymorphic_iarchive.o \
$(SERIAL_SRC)/polymorphic_oarchive.o

GSL_OBJS= ../gsl/sys/infnan.o ../gsl/sys/coerce.o ../gsl/sys/fdiv.o    ../gsl/sys/pow_int.o \
../gsl/sys/fcmp.o ../gsl/specfunc/psi.o   ../gsl/specfunc/trig.o  ../gsl/specfunc/exp.o \
../gsl/specfunc/log.o ../gsl/specfunc/erfc.o   ../gsl/specfunc/zeta.o  ../gsl/specfunc/elementary.o \
../gsl/specfunc/gamma.o ../gsl/rng/borosh13.o ../gsl/rng/fishman2x.o ../gsl/rng/mt.o  ../gsl/rng/rand.o \
../gsl/rng/ranmar.o  ../gsl/rng/types.o ../gsl/rng/cmrg.o  ../gsl/rng/gfsr4.o  ../gsl/rng/r250.o \
../gsl/rng/random.o ../gsl/rng/rng.o   ../gsl/rng/uni32.o ../gsl/rng/coveyou.o ../gsl/rng/knuthran2.o \
../gsl/rng/ran0.o ../gsl/rng/randu.o ../gsl/rng/slatec.o  ../gsl/rng/uni.o ../gsl/rng/default.o \
../gsl/rng/knuthran.o ../gsl/rng/ran1.o ../gsl/rng/ranf.o ../gsl/rng/taus113.o  ../gsl/rng/vax.o \
../gsl/rng/file.o  ../gsl/rng/lecuyer21.o ../gsl/rng/ran2.o ../gsl/rng/ranlux.o ../gsl/rng/taus.o \
../gsl/rng/waterman14.o ../gsl/rng/fishman18.o ../gsl/rng/minstd.o  ../gsl/rng/ran3.o ../gsl/rng/ranlxd.o \
../gsl/rng/transputer.o ../gsl/rng/zuf.o ../gsl/rng/fishman20.o ../gsl/rng/mrg.o  ../gsl/rng/rand48.o \
../gsl/rng/ranlxs.o ../gsl/rng/tt.o ../gsl/randist/nbinomial.o ../gsl/randist/beta.o ../gsl/randist/exponential.o \
../gsl/randist/geometric.o ../gsl/randist/binomial.o ../gsl/randist/poisson.o ../gsl/randist/rdgamma.o  \
../gsl/randist/chisq.o   ../gsl/randist/gauss.o ../gsl/error.o


OBJS = $(SERIAL_OBJS)

all: _simuPOP_std.so

full: _simuPOP_std.so _simuPOP_op.so _simuPOP_la.so _simuPOP_laop.so 

_simuPOP_std.so: $(OBJS) utility_std.o simuPOP_std_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_std.o simuPOP_std_wrap.o $(LIBS) -o _simuPOP_std.so

_simuPOP_op.so: $(OBJS) utility_op.o simuPOP_op_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_op.o simuPOP_op_wrap.o $(LIBS) -o _simuPOP_op.so

_simuPOP_la.so: $(OBJS) utility_la.o simuPOP_la_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_la.o simuPOP_la_wrap.o $(LIBS) -o _simuPOP_la.so

_simuPOP_laop.so: $(OBJS) utility_laop.o simuPOP_laop_wrap.o $(PY_FILES)
	time $(LINK) -shared  $(OBJS) utility_laop.o  simuPOP_laop_wrap.o $(LIBS) -o _simuPOP_laop.so

simuPOP_std_wrap.o: simuPOP_std_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES) $(DEF) $(UDEF) $(CFLAGS) -c $<

simuPOP_op_wrap.o: simuPOP_op_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES) $(DEF) -DOPTIMIZED $(UDEF) $(CFLAGS) -c $<

simuPOP_la_wrap.o: simuPOP_la_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES) $(DEF) -DLONGALLELE $(UDEF) $(CFLAGS) -c $<

simuPOP_laop_wrap.o: simuPOP_laop_wrap.cpp arraymodule.c
	$(CXX) $(INCLUDES) $(DEF) -DOPTIMIZED -DLONGALLELE $(UDEF) $(CFLAGS) -c $<

simuPOP_std_wrap.cpp: simuPOP_std.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -shadow -c++ -python -o simuPOP_std_wrap.cpp simuPOP_std.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_std_wrap.cpp

simuPOP_op_wrap.cpp: simuPOP_op.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DOPTIMIZED -shadow -c++ -python -o simuPOP_op_wrap.cpp simuPOP_op.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_op_wrap.cpp

simuPOP_la_wrap.cpp: simuPOP_la.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DLONGALLELE -shadow -c++ -python -o simuPOP_la_wrap.cpp simuPOP_la.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_la_wrap.cpp

simuPOP_laop_wrap.cpp: simuPOP_laop.i simuPOP_common.i $(HEADFILES)
	$(SWIG) $(DEF) -DLONGALLELE -DOPTIMIZED -shadow -c++ -python -o simuPOP_laop_wrap.cpp simuPOP_laop.i
	perl -pi.bak -e 's/static PyMethodDef SwigMethods\[\] = \{/static PyMethodDef SwigMethods[] = {\n  {"carray", a_array, METH_VARARGS, a_array_doc}, \/* added by Bo Peng *\//' simuPOP_laop_wrap.cpp

utility_std.o: utility.h utility_std.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) $(DEF) $(UDEF) $(CFLAGS) -c utility_std.cpp -o utility_std.o

utility_op.o: utility.h utility_op.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DOPTIMIZED $(DEF) $(UDEF) $(CFLAGS) -c utility_op.cpp -o utility_op.o

utility_la.o: utility.h utility_la.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DLONGALLELE $(DEF) $(UDEF) $(CFLAGS) -c utility_la.cpp -o utility_la.o

utility_laop.o: utility.h utility_laop.cpp simupop_cfg.h
	$(CXX) $(INCLUDES) -DOPTIMIZED -DLONGALLELE $(DEF) $(UDEF) $(CFLAGS) -c utility_laop.cpp -o utility_laop.o

utility_std.cpp: utility.cpp
	cp -f utility.cpp utility_std.cpp

utility_op.cpp: utility.cpp
	cp -f utility.cpp utility_op.cpp

utility_la.cpp: utility.cpp
	cp -f utility.cpp utility_la.cpp

utility_laop.cpp: utility.cpp
	cp -f utility.cpp utility_laop.cpp

%.o: %.c
	$(CC) $(INCLUDES) $(DEF) $(UDEF) $(CFLAGS) -c $< -o $@

# other cpp's does not change with head file change (serialization cpps)
%.o: %.cpp 
	$(CXX) $(INCLUDES) $(DEF) $(UDEF)  $(CFLAGS) -c $< -o $@

clean:
	$(RM) $(OBJS) _simuPOP_*.so  *_wrap.cpp core.*
