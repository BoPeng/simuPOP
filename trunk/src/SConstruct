# file SConstruct
#
# build simuPOP
#
# This is an alternative way to 'python setup.py build', using this
# can save some compile time.
# 
import os, sys
import SCons.Defaults
import SCons.Tool

# get information from python distutils
import distutils.sysconfig, os
vars = distutils.sysconfig.get_config_vars('CC', 'CXX', 'OPT', 'BASECFLAGS', 'CCSHARED', 'LDSHARED', 
    'SO', 'LIBDEST')
for i in range(len(vars)):
    if vars[i] is None:
        vars[i] = ""
(cc, cxx, opt, basicflags, ccshared, ldshared, so_ext, lib_dest) = vars
#cc = 'colorgcc'
#cxx = 'colorgcc'
#NOTE:
# 
# scons is for quick recompile, so SIMUPOP_REV and SIMUPOP_VER IS NOT CHANGED
# so a re-compliaction is not needed after a svn commit.
#
opts = Options()
opts.AddOptions(
    EnumOption('debug', 'whether or not use debug version', 'none', allowed_values=['yes', 'no', 'none']),
)

env = Environment(options=opts,
    ENV={'PATH':os.environ['PATH']},
    tools=['default', 'swig'])

#env['CC'] = cxx
env['CXX'] = cxx
ccflags = []
if 'icc' in cc:
  ccflags = ['-wd981,383,193,177']

# try to debug the mode of python
if env['debug'] == 'none':
    try:
        sys.gettotalrefcount(0)
        env['debug'] = 'yes'
    except:
        env['debug'] = 'no'
#
dest_dir = os.path.join(lib_dest, 'site-packages')
if env['debug'] == 'yes':
    BDIR = '../debug'
    flags = {'Py_REF_DEBUG':None, 'SIMUDEBUG':None}
    strflags = ' -DPy_REF_DEBUG -DSIMUDEBUG'
else:
    BDIR = '../release/build'
    # we may not be able to release ...
    #dest_dir = '../release'
    flags = {}
    strflags = ''
env.BuildDir(BDIR, '.', duplicate = 0)
env['BDIR'] = BDIR

# for swig 1.3.28 cvs
env['SWIGFLAGS'] = '-O -templatereduce -shadow -python -keyword -nodefaultctor -c++ -w-503,-312,-511,-362,-383,-384,-389,-315,-525' + strflags

# GSL
if 'gsl' in BUILD_TARGETS or not os.path.isfile(os.path.join(BDIR, 'libgsl.a')):
    gsl = env.StaticLibrary(
        target = '$BDIR/gsl',
        source = ['../gsl/%s'%x for x in Split('''
            sys/infnan.c sys/coerce.c sys/fdiv.c sys/pow_int.c
            sys/fcmp.c specfunc/psi.c specfunc/trig.c specfunc/exp.c
            specfunc/log.c specfunc/erfc.c specfunc/zeta.c specfunc/elementary.c
            specfunc/gamma.c rng/borosh13.c rng/fishman2x.c rng/mt.c rng/rand.c
            rng/ranmar.c rng/types.c rng/cmrg.c rng/gfsr4.c rng/r250.c
            rng/random.c rng/rng.c rng/uni32.c rng/coveyou.c rng/knuthran2.c
            rng/ran0.c rng/randu.c rng/slatec.c rng/uni.c rng/default.c
            rng/knuthran.c rng/ran1.c rng/ranf.c rng/taus113.c rng/vax.c
            rng/file.c rng/lecuyer21.c rng/ran2.c rng/ranlux.c rng/taus.c
            rng/waterman14.c rng/fishman18.c rng/minstd.c rng/ran3.c rng/ranlxd.c
            rng/transputer.c rng/zuf.c rng/fishman20.c rng/mrg.c rng/rand48.c
            rng/ranlxs.c rng/tt.c randist/nbinomial.c randist/beta.c randist/exponential.c
            randist/geometric.c randist/binomial.c randist/poisson.c randist/rdgamma.c
            randist/chisq.c randist/gauss.c error.c randist/multinomial.c
    ''')],
		CCFLAGS = ['-O3', '-fPIC'],
		CPPPATH = ['.', '..'],
    )
    Alias('gsl', gsl)

env.Command('swigpyrun.h', None, ['swig -python -external-runtime $TARGET'])

#
DEF = {
    'std': {},
    'op': {'OPTIMIZED':None},
    'la': {'LONGALLELE':None},
    'laop': {'OPTIMIZED':None, 'LONGALLELE':None},
    'ba': {'BINARYALLELE':None},
    'baop': {'OPTIMIZED':None, 'BINARYALLELE':None},
# 	'mpi': {'SIMUMPI': None},
#     'opmpi': {'OPTIMIZED':None, 'SIMUMPI': None},
#     'lampi': {'LONGALLELE':None, 'SIMUMPI': None},
#     'laopmpi': {'OPTIMIZED':None, 'LONGALLELE':None, 'SIMUMPI': None},
#     'bampi': {'BINARYALLELE':None, 'SIMUMPI': None},
#     'baopmpi': {'OPTIMIZED':None, 'BINARYALLELE':None, 'SIMUMPI': None},
}
MODULES = []
 
 
for key in DEF.keys():
    DEF[key].update({'SIMUPOP_REV':'9990', 'SIMUPOP_VER':'9.9.9'})
    DEF[key].update(flags)
    if key in BUILD_TARGETS:
        MODULES.append(key)
if MODULES == [] or 'all' in BUILD_TARGETS:
    MODULES = DEF.keys()

src = Split('''utility migrator population simulator terminator
    individual mutator stator initializer operator recombinator
    mating outputer selector tagger''') 
# this is borrowed from pypar, since I do not have access to other
# MPI implementation, I use mpicc only.
def getMPIFlags():
    ''' get and parse result of mpiCC -showme or mpicc -show'''
    fin, fout, ferr = os.popen3('mpiCC -show')
    output = fout.read()
    fout.close()
    #
    if output == '':
        fin, fout, ferr = os.popen3('mpiCC -showme')
        output = fout.read()
        fout.close()
    if output == '':
        return {'mpi': False, 'inc_dirs': [], 'lib_dirs': [], 'libs': [],
            'def_macros': [], 'undef_macros': []}
    # now get the include, library dirs and the libs to link with.
    flags = output.split()
    inc_dirs = []
    lib_dirs = []
    libs = []
    def_macros = []
    undef_macros = []
    for f in flags:
        if f[:2] == '-I':
            inc_dirs.append(f[2:])
        elif f[:2] == '-L':
            lib_dirs.append(f[2:])
        elif f[:2] == '-l':
            libs.append(f[2:])
        elif f[:2] == '-U':
            undef_macros.append(f[2:])
        elif f[:2] == '-D':
            tmp = string.split(f[2:], '=')
            if len(tmp) == 1:
                def_macros.append((tmp[0], None))
            else:
                def_macros.append(tuple(tmp))
    return {'mpi': True, 'inc_dirs': inc_dirs, 'lib_dirs': lib_dirs, 'libs':libs,
            'def_macros': def_macros, 'undef_macros': undef_macros}


for mod in MODULES:
    for file in src:
        env.Command('$BDIR/%s_%s.cpp'%(file, mod), '%s.cpp'%file, [Copy('$TARGET', '$SOURCE')])
    # build shared library
	if 'mpi' in mod:
	    mpi_libs = getMPIFlags()['lib_dirs']
	else:
	    mpi_libs = []
    lib = env.SharedLibrary(
        target = '$BDIR/_simuPOP_%s.so'%mod,
        source = ['$BDIR/%s_%s.cpp' % (x, mod) for x in src] + ['$BDIR/simuPOP_%s.i'%mod],
        LIBS = ['boost_serialization-gcc-d', 'boost_iostreams-gcc-d', 'gsl', 'z', 'stdc++'] + mpi_libs,
        CC = cc,
		CXX = cxx,
        SHLINK = ldshared,
        SHLINKFLAGS = ['-Wl,--export-dynamic'],
        SHLIBPREFIX = "",
        SHLIBSUFFIX = so_ext,
        LIBPATH = [BDIR, '/usr/local/lib'],
        CPPPATH = [distutils.sysconfig.get_python_inc(), '.'],
        CPPDEFINES = DEF[mod],
        # do not put .. (boost etc) in CPPPATH
        # to speed up search
		CCFLAGS = ['-O3'] + ccflags,
		# for performance considerations, do not search boost
        CPPFLAGS = basicflags + " " + opt + ' -I.. -I/usr/include/boost-1_33_1'
    )
    env.Depends(['$BDIR/simuPOP_%s_wrap.cc'%mod, lib], 
        ['simupop_cfg.h', 'simuPOP_common.i', 'simuPOP_doc.i'] + \
        ['%s.h' % x for x in src])
    #
    Alias(mod, lib)
    Alias('all', lib)
    dp1 = env.InstallAs(os.path.join(dest_dir, 'simuPOP_%s.py'%mod),
		'$BDIR/simuPOP_%s.py' % mod)
    dp2 = env.InstallAs(os.path.join(dest_dir, '_simuPOP_%s.so'%mod), 
        lib)
    env.Depends(dp1, dp2)
    Alias('install', dp1)


for pyfile in ['simuRPy.py', 'simuUtil.py', 'simuViewPop.py', 'simuMatPlt.py',
    'simuPOP.py', 'simuOpt.py']:
    env.Install(dest_dir, pyfile)
    Alias('install', dest_dir)

# install to share directory, later.
Default('install')



