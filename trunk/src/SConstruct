# file SConstruct
#
# build simuPOP
#
# This is an alternative way to 'python setup.py build', using this
# can save some compile time.
# 
import os, sys

#NOTE:
# 
# scons is for quick recompile, so SIMUPOP_REV and SIMUPOP_VER IS NOT CHANGED
# so a re-compliaction is not needed after a svn commit.
#

opts = Options()
opts.AddOptions(
    BoolOption('debug', 'whether or not use debug version', False),
    PathOption('dbg_python_path', 'path to the debug version of python', 
        '/home/bpeng/PythonDebug/'),
    PathOption('dbg_python_inc_path', 'path to the include dir of the debug version of python',
        '/home/bpeng/PythonDebug/include/python2.4/'),
    PathOption('python_inc_path', 'path to the include dir of the non-debug version of python',
        '/usr/include/python2.3/')
)


env = Environment(options = opts, ENV={'PATH':os.environ['PATH']})

debug = env['debug']

if debug:
    BDIR = '../debug'
    python_path = env['dbg_python_path']
    pythonPaths = [env['dbg_python_inc_path'], '..', '.']
    flags = ['-DPy_REF_DEBUG']
    dest_dir = os.path.join(env['dbg_python_path'], 'lib',
        'python2.4', 'site-packages')
    share_dir = os.path.join(env['dbg_python_path'], 'share')
else:
    BDIR = '../release/build'
    pythonPaths = [env['python_inc_path'], '..', '.']
    flags = []
    # do not install...
    dest_dir = '../release'
    share_dir = '../release'

env.BuildDir(BDIR, '.', duplicate = 0)
env.Append(CPPPATH = pythonPaths)

env.Append(CCFLAGS = ['-Wall', '-pthread', '-fno-strict-aliasing', '-DNDEBUG', 
    '-O3', '-fPIC', \
    '-DSIMUPOP_REV=9990', '-DSIMUPOP_VER=9.9.9' ] + flags)
#    '-DSIMUPOP_REV=%s' % os.popen('svnversion ..').read().strip() ])

# for swig 1.3.28 cvs
SWIG = 'swig -O -templatereduce -shadow -python -keyword -nodefaultctor -c++ -w-503,-312,-511,-362,-383,-384,-389,-315,-525'

# build static libraries
if 'serial' in BUILD_TARGETS or not os.path.isfile(os.path.join(BDIR, 'libserial.a')):
    serial = env.StaticLibrary(
        target = os.path.join(BDIR, 'serial'),
        source = [os.path.join(BDIR, 'serialization/%s'%x) for x in Split('''
            basic_archive.cpp
            basic_xml_archive.cpp
            basic_iarchive.cpp
            basic_oarchive.cpp
            basic_serializer_map.cpp
            basic_text_iprimitive.cpp
            basic_text_oprimitive.cpp
            text_iarchive.cpp
            text_oarchive.cpp
            binary_iarchive.cpp
            binary_oarchive.cpp
            xml_grammar.cpp
            xml_iarchive.cpp
            xml_oarchive.cpp
            extended_type_info.cpp
            extended_type_info_no_rtti.cpp
            extended_type_info_typeid.cpp
            void_cast.cpp
            polymorphic_iarchive.cpp
            polymorphic_oarchive.cpp
            stl_port.cpp
            basic_pointer_iserializer.cpp
            basic_iserializer.cpp
            basic_oserializer.cpp
            basic_pointer_oserializer.cpp
            basic_archive_impl.cpp
        ''')]
    )
    Alias('serial', serial)
    
# iostreams
if 'iostreams' in BUILD_TARGETS or not os.path.isfile(os.path.join(BDIR, 'libiostreams.a')):
    iostreams = env.StaticLibrary(
        target = os.path.join(BDIR, 'iostreams'),
        source = [os.path.join(BDIR, 'iostreams/%s'%x) for x in ['file_descriptor.cpp', 'mapped_file.cpp', 'zlib.cpp']]
    )
    Alias('iostreams', iostreams)

# GSL
if 'gsl' in BUILD_TARGETS or not os.path.isfile(os.path.join(BDIR, 'libgsl.a')):
    gsl = env.StaticLibrary(
        target = os.path.join(BDIR, 'gsl'),
        source = ['../gsl/%s'%x for x in Split('''
            sys/infnan.c sys/coerce.c sys/fdiv.c sys/pow_int.c
            sys/fcmp.c specfunc/psi.c specfunc/trig.c specfunc/exp.c
            specfunc/log.c specfunc/erfc.c specfunc/zeta.c specfunc/elementary.c
            specfunc/gamma.c rng/borosh13.c rng/fishman2x.c rng/mt.c rng/rand.c
            rng/ranmar.c rng/types.c rng/cmrg.c rng/gfsr4.c rng/r250.c
            rng/random.c rng/rng.c rng/uni32.c rng/coveyou.c rng/knuthran2.c
            rng/ran0.c rng/randu.c rng/slatec.c rng/uni.c rng/default.c
            rng/knuthran.c rng/ran1.c rng/ranf.c rng/taus113.c rng/vax.c
            rng/file.c rng/lecuyer21.c rng/ran2.c rng/ranlux.c rng/taus.c
            rng/waterman14.c rng/fishman18.c rng/minstd.c rng/ran3.c rng/ranlxd.c
            rng/transputer.c rng/zuf.c rng/fishman20.c rng/mrg.c rng/rand48.c
            rng/ranlxs.c rng/tt.c randist/nbinomial.c randist/beta.c randist/exponential.c
            randist/geometric.c randist/binomial.c randist/poisson.c randist/rdgamma.c
            randist/chisq.c randist/gauss.c error.c randist/multinomial.c
    ''')]
    )
    Alias('gsl', gsl)

env.Command('swigpyrun.h', None, ['swig -python -external-runtime $TARGET'])

#
DEF = {
    'std': [],
    'op': ['-DOPTIMIZED'],
    'la': ['-DLONGALLELE'],
    'laop': ['-DOPTIMIZED', '-DLONGALLELE'],
    'ba': ['-DBINARYALLELE'],
    'baop': ['-DOPTIMIZED', '-DBINARYALLELE']
}
env_mod = {}
target_mod = {}
if 'all' in BUILD_TARGETS:
    build_mod = ['std', 'op', 'la', 'laop', 'ba', 'baop']
else:
    build_mod = []
    for m in  ['std', 'op', 'la', 'laop', 'ba', 'baop']:
        if m in BUILD_TARGETS:
            build_mod.append(m)
for mod in build_mod:
    env_mod[mod] = env.Copy()
    env_mod[mod].Append(CCFLAGS = DEF[mod])
    env_mod[mod].Append(LIBPATH = [BDIR])
    src = Split('''utility migrator population simulator terminator
                individual mutator stator initializer operator recombinator
                mating outputer selector tagger''') 
    for file in src:
        env.Command('%s/%s_%s.cpp'%(BDIR, file, mod), '%s.cpp'%file, [Copy('$TARGET', '$SOURCE')])
    env.Command([os.path.join(BDIR, x) for x in 
        ['simuPOP_%s_wrap.cpp'%mod, 'simuPOP_%s.py'%mod]], 
        'simuPOP_%s.i'%mod, 
        ['%s %s -o $TARGET $SOURCE'%(SWIG, ' '.join(DEF[mod]))])
    env.Depends(os.path.join(BDIR, 'simuPOP_%s_wrap.cpp'%mod), 
        ['simupop_cfg.h', 'simuPOP_common.i', 'simuPOP_doc.i', 
        os.path.join(BDIR, 'simuPOP_%s.i'%mod)] + \
        ['%s.h' % x for x in src])
    target_mod[mod] = env_mod[mod].SharedLibrary(
        target = os.path.join(BDIR, mod),
        source = [os.path.join(BDIR, '%s_%s.cpp' % (x, mod)) for x in src] 
            + [os.path.join(BDIR, 'simuPOP_%s_wrap.cpp'%mod)],
        LIBS = ['serial', 'iostreams', 'gsl', 'z'],
    )
    env.Command(os.path.join(BDIR, '_simuPOP_%s.so'%mod), 
        target_mod[mod], [Move('$TARGET', '$SOURCE')])
    Alias(mod, [os.path.join(BDIR, x) for x in ['_simuPOP_%s.so'%mod, 'simuPOP_%s.py'%mod]])
    Alias('all', [os.path.join(BDIR, '_simuPOP_%s.so'%mod), os.path.join(BDIR, 'simuPOP_%s.py'%mod)])
    for file in ['_simuPOP_%s.so'%mod, 'simuPOP_%s.py'%mod]:
        #env.InstallAs(os.path.join(dest_dir, file), os.path.join(BDIR, file))
        env.Command(os.path.join(dest_dir, file), os.path.join(BDIR, file),
			[Copy('$TARGET', '$SOURCE')])
        Alias('install', os.path.join(dest_dir, file))


for file in ['simuRPy.py', 'simuUtil.py', 'simuViewPop.py', 'simuMatPlt.py',
    'simuPOP.py', 'simuOpt.py']:
    env.InstallAs(os.path.join(dest_dir, file), file)
    Alias('install', os.path.join(dest_dir, file))

# install to share directory, later.

Default('install')
