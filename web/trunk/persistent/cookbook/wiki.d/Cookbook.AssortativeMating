version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.5) Gecko/2008120908 Red Hat/3.0.5-1.el5_2 Firefox/3.0.5
author=
charset=ISO-8859-1
csum=
ctime=1232383930
host=127.0.0.1
name=Cookbook.AssortativeMating
rev=6
targets=
text=(:title Positive assortative mating:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:assortativeMating.py | http://simupop.sourceforge.net/images/download.jpg]]|assortativeMating.py%0a%0aThis script demonstrates how to implement assortative mating, namely mating%0awith preference to individuals with similar phenotype.%0a%0aThe core of this script is a heteroMating mating scheme that use%0a- general random mating among all individuals%0a- random mating between individuals with homozygous wildtype allele (0, 0)%0a- random mating between individuals having at least one mutant (0, 1) or (1,1).%0a%0aA parameter w determines the proportion of offspring produced by the general%0arandom mating scheme. w = 1 means no assortative mating. The numbers of offspring%0aproduced by other two mating schemes are proportional to the size of the%0acorresponding virtual subpopulations in the parental generation. For example,%0aif the population size is 1000, w=0.5, and there are 200 homozygous wildtype%0aindividuals, the number of offspring produced by these three mating schemes%0awill be 500, 100 and 400. The size of virtual subpopulations will change%0aas a result of general random mating.%0a%0aDuring the evolution, number of individuals having genotype (0, 0), (0, 1)%0aand (1, 1) are printed, along with the frequency of allele 0.%0a%0aThe simulation confirms that positive assortative mating would lead to the%0aloss of heterozygotes.%0a%0a=python [=%0adef simuAssortativeMating(w, size, gen, vsp=[0, 4]):%0a    '''%0a        w       proportion of general random mating.%0a        size    population size%0a        gen     how many generation to run%0a        vsp     virtual subpopulations for assortative mating.%0a    '''%0a    pop = population(size, loci=[1])%0a    # define four virtual subpopulations. Individuals in the first three virtual%0a    # subpopulation have genotype (0, 0), (0, 1) or (1, 0), and (1, 1) respectively,%0a    # and have at leat one mutant (allele 1) in the last virtual subpopulation.%0a    pop.setVirtualSplitter(genotypeSplitter(loci=0,%0a        alleles=[[0, 0], [0, 1], [1, 1], [0, 0, 0, 1], [0, 1, 1, 1]]))%0a%0a    # Negative weight means fixed size (weight * current subpopulation size).%0a    # In the case of no positive weight, zero weights means proportional to%0a    # parental (virtual) subpopulation size.%0a    simu = simulator(pop, heteroMating([randomMating(weight = -1*w)] + \%0a        [randomMating(subPop=(0, x), weight = 0) for x in vsp]))%0a    #%0a    simu.evolve(%0a        preOps = [%0a            initByFreq([0.5, 0.5]),%0a            pyExec('AaNum=[]'),  # initialize a list in population's local dictionary%0a            ],%0a        ops = [%0a            # calculate virtual population sizes, and allele frequency at locus 0.%0a            stat(popSize=True, alleleFreq=[0], stage=PreMating),%0a            # print size of virtual populations and allele frequency%0a            pyEval(r"'#inds with genotype AA %254d, Aa %254d, aa %254d, freq of A: %25.1f\n' %25 "%0a                "(virtualPopSize[0][0], virtualPopSize[0][1], virtualPopSize[0][2],"%0a                "alleleFreq[0][0]*100)"),%0a            # append number of individuals with genotype Aa to list AaNum%0a            pyExec(r"AaNum.append(virtualPopSize[0][1])")%0a        ],%0a        gen = gen%0a    )%0a    return simu.dvars(0).AaNum%0a%0a=]
time=1232488443
title=Positive assortative mating
author:1232488443=
diff:1232488443:1232488051:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:assortativeMating.py | http://simupop.sourceforge.net/images/download.jpg]]|assortativeMating.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:assortativeMating.py | http://simupop.sourceforge.net/images/download.jpg]]|download assortativeMating.py%0a
host:1232488443=127.0.0.1
author:1232488051=
diff:1232488051:1232487969:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:assortativeMating.py | http://simupop.sourceforge.net/images/download.jpg]]|download assortativeMating.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:Mating_assortativeMating.py | http://simupop.sourceforge.net/images/download.jpg]]|download Mating_assortativeMating.py%0a
host:1232488051=127.0.0.1
author:1232487969=
diff:1232487969:1232487930:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:Mating_assortativeMating.py | http://simupop.sourceforge.net/images/download.jpg]]|download Mating_assortativeMating.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:Mating_assortative.py | http://simupop.sourceforge.net/images/download.jpg]]|download Mating_assortative.py%0a
host:1232487969=127.0.0.1
author:1232487930=
diff:1232487930:1232487723:=3,4c3,4%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:Mating_assortative.py | http://simupop.sourceforge.net/images/download.jpg]]|download Mating_assortative.py%0a%3c %0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a> %0a28a29,32%0a> #!/usr/bin/env python%0a> import sys%0a> from simuPOP import *%0a> %0a66a71,74%0a> %0a> %0a> if __name__ == '__main__':%0a>     simuAssortativeMating(0.1, 2000, 200)%0a
host:1232487930=127.0.0.1
author:1232487723=
diff:1232487723:1232383930:=1,4d0%0a%3c (:title Positive assortative mating:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a%3c %0a
host:1232487723=127.0.0.1
author:1232383930=
diff:1232383930:1232383930:=1,72d0%0a%3c This script demonstrates how to implement assortative mating, namely mating%0a%3c with preference to individuals with similar phenotype.%0a%3c %0a%3c The core of this script is a heteroMating mating scheme that use%0a%3c - general random mating among all individuals%0a%3c - random mating between individuals with homozygous wildtype allele (0, 0)%0a%3c - random mating between individuals having at least one mutant (0, 1) or (1,1).%0a%3c %0a%3c A parameter w determines the proportion of offspring produced by the general%0a%3c random mating scheme. w = 1 means no assortative mating. The numbers of offspring%0a%3c produced by other two mating schemes are proportional to the size of the%0a%3c corresponding virtual subpopulations in the parental generation. For example,%0a%3c if the population size is 1000, w=0.5, and there are 200 homozygous wildtype%0a%3c individuals, the number of offspring produced by these three mating schemes%0a%3c will be 500, 100 and 400. The size of virtual subpopulations will change%0a%3c as a result of general random mating.%0a%3c %0a%3c During the evolution, number of individuals having genotype (0, 0), (0, 1)%0a%3c and (1, 1) are printed, along with the frequency of allele 0.%0a%3c %0a%3c The simulation confirms that positive assortative mating would lead to the%0a%3c loss of heterozygotes.%0a%3c %0a%3c =python [=%0a%3c #!/usr/bin/env python%0a%3c import sys%0a%3c from simuPOP import *%0a%3c %0a%3c def simuAssortativeMating(w, size, gen, vsp=[0, 4]):%0a%3c     '''%0a%3c         w       proportion of general random mating.%0a%3c         size    population size%0a%3c         gen     how many generation to run%0a%3c         vsp     virtual subpopulations for assortative mating.%0a%3c     '''%0a%3c     pop = population(size, loci=[1])%0a%3c     # define four virtual subpopulations. Individuals in the first three virtual%0a%3c     # subpopulation have genotype (0, 0), (0, 1) or (1, 0), and (1, 1) respectively,%0a%3c     # and have at leat one mutant (allele 1) in the last virtual subpopulation.%0a%3c     pop.setVirtualSplitter(genotypeSplitter(loci=0,%0a%3c         alleles=[[0, 0], [0, 1], [1, 1], [0, 0, 0, 1], [0, 1, 1, 1]]))%0a%3c %0a%3c     # Negative weight means fixed size (weight * current subpopulation size).%0a%3c     # In the case of no positive weight, zero weights means proportional to%0a%3c     # parental (virtual) subpopulation size.%0a%3c     simu = simulator(pop, heteroMating([randomMating(weight = -1*w)] + \%0a%3c         [randomMating(subPop=(0, x), weight = 0) for x in vsp]))%0a%3c     #%0a%3c     simu.evolve(%0a%3c         preOps = [%0a%3c             initByFreq([0.5, 0.5]),%0a%3c             pyExec('AaNum=[]'),  # initialize a list in population's local dictionary%0a%3c             ],%0a%3c         ops = [%0a%3c             # calculate virtual population sizes, and allele frequency at locus 0.%0a%3c             stat(popSize=True, alleleFreq=[0], stage=PreMating),%0a%3c             # print size of virtual populations and allele frequency%0a%3c             pyEval(r"'#inds with genotype AA %254d, Aa %254d, aa %254d, freq of A: %25.1f\n' %25 "%0a%3c                 "(virtualPopSize[0][0], virtualPopSize[0][1], virtualPopSize[0][2],"%0a%3c                 "alleleFreq[0][0]*100)"),%0a%3c             # append number of individuals with genotype Aa to list AaNum%0a%3c             pyExec(r"AaNum.append(virtualPopSize[0][1])")%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a%3c     return simu.dvars(0).AaNum%0a%3c %0a%3c %0a%3c if __name__ == '__main__':%0a%3c     simuAssortativeMating(0.1, 2000, 200)%0a%3c %0a%3c =]%0a\ No newline at end of file%0a
host:1232383930=127.0.0.1
