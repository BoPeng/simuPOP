version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.6) Gecko/2009011913 Firefox/3.0.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1235966494
host=127.0.0.1
name=Cookbook.ChooseMarker
rev=2
targets=
text=(:title Chooser markers from a HapMap population. :)%0aThe following function creates a population from the HapMap data, using a subset of markers. The markers can be chosen from several chromosomes, using criteria including starting position, ending position, number of markers on each chromosome, minimal allele frequency, and can be picked from a given list of names such as those from a genotyping platform.%0a%0a=python [=%0adef getHapMapPop(HapMap_dir, names = [], chroms=[], hapmap_pop='CEU',%0a        startPos = [], endPos = [], numMarkers = [], minAF = 0):%0a    '''%0a    Return a population with specified HapMap markers.%0a%0a    HapMap_dir%0a        Directory where the HapMap data has been saved, using script%0a        loadHapMap_r22.py from the simuPOP cookbook.%0a%0a    names%0a        (Optional) A list of marker names. If given, only markers in this%0a        list will be selected.%0a%0a    chroms%0a        A list of chromosomes to look in. If empty, all 22 autosomes%0a        will be tried. Chromosome index starts from 1. (1, ..., 22).%0a%0a    hapmap_pop%0a        HapMap population to load, can be one of 'CEU' or 'YRI'.%0a%0a    startPos, endPos, numMarkers%0a        These list should be empty or match the length of ``chroms``.%0a        They specify the starting, ending position on each chromosome%0a        (in basepair), and number of markers to load.%0a%0a    minAF%0a        Minimal minor allele frequency%0a    '''%0a    if len(chroms) == 0:%0a        chroms = range(1, 23)%0a    # read in HapMap data file%0a    pop = None%0a    genDist = {}%0a    if len(startPos) > 0 and len(startPos) != len(chroms):%0a        raise ValueError("If used, please specify startPos for all chromosomes")%0a    if len(endPos) > 0 and len(endPos) != len(chroms):%0a        raise ValueError("If used, please specify endPos for all chromosomes")%0a    if len(numMarkers) > 0 and len(numMarkers) != len(chroms):%0a        raise ValueError("If used, please specify number of marker for all chromosomes")%0a    for chIdx, ch in enumerate(chroms):%0a        markers = []%0a        chPop = LoadPopulation(os.path.join(HapMap_dir, 'HapMap_%25s_chr%25d.pop' %25 \%0a            (hapmap_pop, ch)))%0a        # Trim markers by marker names%0a        if len(names) != 0:%0a            print "Select markers using a list of %25d markers from chromosome %25s..." %25 (len(names), ch)%0a            # the markers may not be in order...%0a            indexes = []%0a            for name in names:%0a                try:%0a                    idx = chPop.locusByName(name)%0a                    if not idx in indexes:%0a                        indexes.append(idx)%0a                except:%0a                    pass%0a            #indexes.sort()%0a            #print indexes[900:950]%0a            chPop.removeLoci(keep = indexes)%0a        #%0a        if chPop.totNumLoci() == 0:%0a            continue%0a        if minAF > 0:%0a            Stat(chPop, alleleFreq=range(chPop.totNumLoci()))%0a        # Trim by start, end position ...%0a        indexes = []%0a        for loc in range(chPop.totNumLoci()):%0a            pos = chPop.locusPos(loc)%0a            if len(startPos) > 0 and pos %3c startPos[chIdx]:%0a                continue%0a            if len(endPos) > 0 and pos > endPos[chIdx]:%0a                continue%0a            if minAF > 0:%0a                maf = chPop.dvars().alleleFreq[loc][0]%0a                maf = min(maf, 1 - maf)%0a                if maf > minAF:%0a                    continue%0a            if len(numMarkers) > 0 and len(indexes) >= numMarkers[chIdx]:%0a                break%0a            indexes.append(loc)%0a        if len(indexes) > 0:%0a            print '%25s markers are found on chromosome %25d ' %25 (len(indexes), ch)%0a            chPop.removeLoci(keep=indexes)%0a            genDist.update(chPop.dvars().genDist)%0a            chPop.vars().clear()%0a            if pop is None:%0a                pop = chPop%0a            else:%0a                pop.addChromFrom(chPop)%0a        else:%0a            print 'No qualified marker is found on chromosome %25d ' %25 ch%0a            del chPop%0a    pop.dvars().genDist = genDist%0a    return pop%0a=]
time=1235966576
title=Chooser markers from a HapMap population. 
author:1235966576=
diff:1235966576:1235966494:=1d0%0a%3c (:title Chooser markers from a HapMap population. :)%0a
host:1235966576=127.0.0.1
author:1235966494=
diff:1235966494:1235966494:=1,97d0%0a%3c The following function creates a population from the HapMap data, using a subset of markers. The markers can be chosen from several chromosomes, using criteria including starting position, ending position, number of markers on each chromosome, minimal allele frequency, and can be picked from a given list of names such as those from a genotyping platform.%0a%3c %0a%3c =python [=%0a%3c def getHapMapPop(HapMap_dir, names = [], chroms=[], hapmap_pop='CEU',%0a%3c         startPos = [], endPos = [], numMarkers = [], minAF = 0):%0a%3c     '''%0a%3c     Return a population with specified HapMap markers.%0a%3c %0a%3c     HapMap_dir%0a%3c         Directory where the HapMap data has been saved, using script%0a%3c         loadHapMap_r22.py from the simuPOP cookbook.%0a%3c %0a%3c     names%0a%3c         (Optional) A list of marker names. If given, only markers in this%0a%3c         list will be selected.%0a%3c %0a%3c     chroms%0a%3c         A list of chromosomes to look in. If empty, all 22 autosomes%0a%3c         will be tried. Chromosome index starts from 1. (1, ..., 22).%0a%3c %0a%3c     hapmap_pop%0a%3c         HapMap population to load, can be one of 'CEU' or 'YRI'.%0a%3c %0a%3c     startPos, endPos, numMarkers%0a%3c         These list should be empty or match the length of ``chroms``.%0a%3c         They specify the starting, ending position on each chromosome%0a%3c         (in basepair), and number of markers to load.%0a%3c %0a%3c     minAF%0a%3c         Minimal minor allele frequency%0a%3c     '''%0a%3c     if len(chroms) == 0:%0a%3c         chroms = range(1, 23)%0a%3c     # read in HapMap data file%0a%3c     pop = None%0a%3c     genDist = {}%0a%3c     if len(startPos) > 0 and len(startPos) != len(chroms):%0a%3c         raise ValueError("If used, please specify startPos for all chromosomes")%0a%3c     if len(endPos) > 0 and len(endPos) != len(chroms):%0a%3c         raise ValueError("If used, please specify endPos for all chromosomes")%0a%3c     if len(numMarkers) > 0 and len(numMarkers) != len(chroms):%0a%3c         raise ValueError("If used, please specify number of marker for all chromosomes")%0a%3c     for chIdx, ch in enumerate(chroms):%0a%3c         markers = []%0a%3c         chPop = LoadPopulation(os.path.join(HapMap_dir, 'HapMap_%25s_chr%25d.pop' %25 \%0a%3c             (hapmap_pop, ch)))%0a%3c         # Trim markers by marker names%0a%3c         if len(names) != 0:%0a%3c             print "Select markers using a list of %25d markers from chromosome %25s..." %25 (len(names), ch)%0a%3c             # the markers may not be in order...%0a%3c             indexes = []%0a%3c             for name in names:%0a%3c                 try:%0a%3c                     idx = chPop.locusByName(name)%0a%3c                     if not idx in indexes:%0a%3c                         indexes.append(idx)%0a%3c                 except:%0a%3c                     pass%0a%3c             #indexes.sort()%0a%3c             #print indexes[900:950]%0a%3c             chPop.removeLoci(keep = indexes)%0a%3c         #%0a%3c         if chPop.totNumLoci() == 0:%0a%3c             continue%0a%3c         if minAF > 0:%0a%3c             Stat(chPop, alleleFreq=range(chPop.totNumLoci()))%0a%3c         # Trim by start, end position ...%0a%3c         indexes = []%0a%3c         for loc in range(chPop.totNumLoci()):%0a%3c             pos = chPop.locusPos(loc)%0a%3c             if len(startPos) > 0 and pos %3c startPos[chIdx]:%0a%3c                 continue%0a%3c             if len(endPos) > 0 and pos > endPos[chIdx]:%0a%3c                 continue%0a%3c             if minAF > 0:%0a%3c                 maf = chPop.dvars().alleleFreq[loc][0]%0a%3c                 maf = min(maf, 1 - maf)%0a%3c                 if maf > minAF:%0a%3c                     continue%0a%3c             if len(numMarkers) > 0 and len(indexes) >= numMarkers[chIdx]:%0a%3c                 break%0a%3c             indexes.append(loc)%0a%3c         if len(indexes) > 0:%0a%3c             print '%25s markers are found on chromosome %25d ' %25 (len(indexes), ch)%0a%3c             chPop.removeLoci(keep=indexes)%0a%3c             genDist.update(chPop.dvars().genDist)%0a%3c             chPop.vars().clear()%0a%3c             if pop is None:%0a%3c                 pop = chPop%0a%3c             else:%0a%3c                 pop.addChromFrom(chPop)%0a%3c         else:%0a%3c             print 'No qualified marker is found on chromosome %25d ' %25 ch%0a%3c             del chPop%0a%3c     pop.dvars().genDist = genDist%0a%3c     return pop%0a%3c =]%0a\ No newline at end of file%0a
host:1235966494=127.0.0.1
