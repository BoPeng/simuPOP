version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5
author=
charset=ISO-8859-1
csum=
ctime=1232384034
host=127.0.0.1
name=Cookbook.ConsanguineousMating
rev=8
targets=
text=(:title Consanguineous mating between first cousin:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:consanguineousMating.py | http://simupop.sourceforge.net/images/download.jpg]]|consanguineousMating.py%0a%0aThis script demonstrates how to implement consanguineous mating, namely mating with preference to relatives of individuals.%0a%0aThe core of this script is a heteroMating mating scheme that use%0a# general random mating among all individuals%0a# consanguineous mating between first cousins%0a%0aI use two mating schemes because it is unlikely that all matings happens between relatives in a population.%0a%0aA parameter w determines the proportion of offspring produced by the general%0arandom mating scheme. w = 1 means no consanguineous mating. The numbers of offspring%0aproduced by other two mating schemes are proportional to the size of the%0acorresponding virtual subpopulations in the parental generation.%0a%0aThe most difficult part of such a mating scheme is to find relatives of each%0aindividual. Using a parentsTagger(), simuPOP would record the indexes of each%0aindividual's parents in information fields 'father_idx' and 'mother_idx'. However,%0agoing through the pedigree to locate relative can be tedious. Fortunately, simuPOP%0aprovides two functions that can hopefully reduce the troubles.%0a%0aSome minor points:%0a%0a* A population should keep at least two parental generations to locate first cousin, and more generations to locate more distance relatives. (c.f. parameter ancGen of the population() function).%0a%0a* If only one offspring is produced at each mating event, it would be extremely  difficult to find full siblings, and cousins in a population. Use numOffspring = 2 or more advanced offspring control schemes to increace relatives in a population.%0a%0a* For the first several generation where there are not enough ancestral generations, no relatives could be found and consanguineousMating would locate another parent from the whole population.%0a%0a* In this example, both mating schemes are applied to the whole population so there is no need to define virtual subpopulations.%0a%0a* Number of sibling and offspring vary from individual to individual due to chances. It is therefore difficult to estimate how many information fields are needed to store all siblings and offsprings. Big number is likely to slow down your simulation, and small number may limit the number of relatives you can locate.%0a%0aThe @@findCousin@@ function locates first cousin of everyone.%0a%0a=python [=%0adef findCousin(pop, fields):%0a    'Find cousins of each individual and put their indexes to cousinFields'%0a    # locate offsprings%0a    if pop.ancestralGens() %3c 1:%0a        return%0a    (parFields, sibFields, offFields, cousinFields) = fields%0a    # create a pedigree object from the population%0a    ped = pedigree(pop, infoFields=parFields + cousinFields)%0a    # add intermediate information fields%0a    ped.addInfoFields(sibFields + offFields)%0a    ped.locateRelatives(Offspring, offFields);%0a    ped.locateRelatives(FullSibling, sibFields);%0a    # Find parents -> siblings -> offspring%0a    # Another parameter pathSex can control the sex of each step.%0a    ped.traceRelatives(pathGen = [0, 1, 1, 0],%0a        pathFields = [parFields, sibFields, offFields],%0a        resultFields = cousinFields)%0a    # get indexes of cousins from the pedigree object%0a    pop.updateInfoFieldsFrom(cousinFields, ped)%0a%0a=]%0a%0aThe @@simuConsanguineousMating@@ function uses a @@consanguineousMating@@ function to perform the simulation.%0a%0a=python [=%0adef simuConsanguineousMating(w, size, gen, numFields=4):%0a    '''%0a        w       proportion of general random mating.%0a        size    population size%0a        gen     how many generation to run%0a    '''%0a    parFields = ['father_idx', 'mother_idx']%0a    sibFields = ['sibling%25d' %25 x for x in range(numFields)]%0a    offFields = ['offspring%25d' %25 x for x in range(numFields)]%0a    cousinFields = ['cousin%25d' %25 x for x in range(numFields)]%0a%0a    pop = population(size, loci=[1], ancGen=2, infoFields = parFields + cousinFields)%0a%0a    simu = simulator(pop, heteroMating([%0a        randomMating(numOffspring=2, weight = w),%0a        consanguineousMating(infoFields = cousinFields, func=findCousin,%0a            param = [parFields, sibFields, offFields, cousinFields],%0a            numOffspring = 2, weight = 1 - w)%0a        ])%0a    )%0a    #%0a    simu.evolve(%0a        preOps = [ initByFreq([0.5, 0.5]) ],%0a        ops = [%0a            parentsTagger(),%0a            pyEval(r'"%25d\n" %25 gen'),%0a        ],%0a        gen = gen%0a    )%0a    return True%0a%0a=]%0a%0aThe full recipe is available for download.%0a%0a
time=1233975709
title=Consanguineous mating between first cousin
author:1233975709=
diff:1233975709:1233975571:=63c63,64%0a%3c =python [=%0a---%0a> =python =[%0a> %0a
host:1233975709=127.0.0.1
author:1233975571=
diff:1233975571:1233975264:=64d63%0a%3c %0a95d93%0a%3c %0a
host:1233975571=127.0.0.1
author:1233975264=
diff:1233975264:1233720046:=
host:1233975264=127.0.0.1
author:1233720046=
diff:1233720046:1232488386:=8,9c8,9%0a%3c # general random mating among all individuals%0a%3c # consanguineous mating between first cousins%0a---%0a> 1. general random mating among all individuals%0a> 2. consanguineous mating between first cousins%0a
host:1233720046=127.0.0.1
author:1232488386=
diff:1232488386:1232488346:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:consanguineousMating.py | http://simupop.sourceforge.net/images/download.jpg]]|consanguineousMating.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:consanguineousMating.py | http://simupop.sourceforge.net/images/download.jpg]]|download consanguineousMating.py%0a
host:1232488386=127.0.0.1
author:1232488346=
diff:1232488346:1232384068:=1,6c1,3%0a%3c (:title Consanguineous mating between first cousin:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:consanguineousMating.py | http://simupop.sourceforge.net/images/download.jpg]]|download consanguineousMating.py%0a%3c %0a%3c This script demonstrates how to implement consanguineous mating, namely mating with preference to relatives of individuals.%0a%3c %0a---%0a> This script demonstrates how to implement consanguineous mating, namely mating%0a> with preference to relatives of individuals.%0a> %0a10,12c7,9%0a%3c %0a%3c I use two mating schemes because it is unlikely that all matings happens between relatives in a population.%0a%3c %0a---%0a> I use two mating schemes because it is unlikely that all matings happens%0a> between relatives in a population.%0a> %0a36,37d32%0a%3c The @@findCousin@@ function locates first cousin of everyone.%0a%3c %0a38a34,36%0a> import sys%0a> from simuPOP import *%0a> %0a59,63d56%0a%3c =]%0a%3c %0a%3c The @@simuConsanguineousMating@@ function uses a @@consanguineousMating@@ function to perform the simulation.%0a%3c %0a%3c =python =[%0a93a87,90%0a> %0a> %0a> if __name__ == '__main__':%0a>     simuConsanguineousMating(0.5, 2000, 20, 4)%0a95,97d91%0a%3c %0a%3c The full recipe is available for download.%0a%3c %0a
host:1232488346=127.0.0.1
author:1232384068=
diff:1232384068:1232384034:=32,91d31%0a%3c %0a%3c =python [=%0a%3c import sys%0a%3c from simuPOP import *%0a%3c %0a%3c def findCousin(pop, fields):%0a%3c     'Find cousins of each individual and put their indexes to cousinFields'%0a%3c     # locate offsprings%0a%3c     if pop.ancestralGens() %3c 1:%0a%3c         return%0a%3c     (parFields, sibFields, offFields, cousinFields) = fields%0a%3c     # create a pedigree object from the population%0a%3c     ped = pedigree(pop, infoFields=parFields + cousinFields)%0a%3c     # add intermediate information fields%0a%3c     ped.addInfoFields(sibFields + offFields)%0a%3c     ped.locateRelatives(Offspring, offFields);%0a%3c     ped.locateRelatives(FullSibling, sibFields);%0a%3c     # Find parents -> siblings -> offspring%0a%3c     # Another parameter pathSex can control the sex of each step.%0a%3c     ped.traceRelatives(pathGen = [0, 1, 1, 0],%0a%3c         pathFields = [parFields, sibFields, offFields],%0a%3c         resultFields = cousinFields)%0a%3c     # get indexes of cousins from the pedigree object%0a%3c     pop.updateInfoFieldsFrom(cousinFields, ped)%0a%3c %0a%3c def simuConsanguineousMating(w, size, gen, numFields=4):%0a%3c     '''%0a%3c         w       proportion of general random mating.%0a%3c         size    population size%0a%3c         gen     how many generation to run%0a%3c     '''%0a%3c     parFields = ['father_idx', 'mother_idx']%0a%3c     sibFields = ['sibling%25d' %25 x for x in range(numFields)]%0a%3c     offFields = ['offspring%25d' %25 x for x in range(numFields)]%0a%3c     cousinFields = ['cousin%25d' %25 x for x in range(numFields)]%0a%3c %0a%3c     pop = population(size, loci=[1], ancGen=2, infoFields = parFields + cousinFields)%0a%3c %0a%3c     simu = simulator(pop, heteroMating([%0a%3c         randomMating(numOffspring=2, weight = w),%0a%3c         consanguineousMating(infoFields = cousinFields, func=findCousin,%0a%3c             param = [parFields, sibFields, offFields, cousinFields],%0a%3c             numOffspring = 2, weight = 1 - w)%0a%3c         ])%0a%3c     )%0a%3c     #%0a%3c     simu.evolve(%0a%3c         preOps = [ initByFreq([0.5, 0.5]) ],%0a%3c         ops = [%0a%3c             parentsTagger(),%0a%3c             pyEval(r'"%25d\n" %25 gen'),%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a%3c     return True%0a%3c %0a%3c %0a%3c if __name__ == '__main__':%0a%3c     simuConsanguineousMating(0.5, 2000, 20, 4)%0a%3c =]%0a
host:1232384068=127.0.0.1
author:1232384034=
diff:1232384034:1232384034:=1,31d0%0a%3c This script demonstrates how to implement consanguineous mating, namely mating%0a%3c with preference to relatives of individuals.%0a%3c %0a%3c The core of this script is a heteroMating mating scheme that use%0a%3c 1. general random mating among all individuals%0a%3c 2. consanguineous mating between first cousins%0a%3c I use two mating schemes because it is unlikely that all matings happens%0a%3c between relatives in a population.%0a%3c %0a%3c A parameter w determines the proportion of offspring produced by the general%0a%3c random mating scheme. w = 1 means no consanguineous mating. The numbers of offspring%0a%3c produced by other two mating schemes are proportional to the size of the%0a%3c corresponding virtual subpopulations in the parental generation.%0a%3c %0a%3c The most difficult part of such a mating scheme is to find relatives of each%0a%3c individual. Using a parentsTagger(), simuPOP would record the indexes of each%0a%3c individual's parents in information fields 'father_idx' and 'mother_idx'. However,%0a%3c going through the pedigree to locate relative can be tedious. Fortunately, simuPOP%0a%3c provides two functions that can hopefully reduce the troubles.%0a%3c %0a%3c Some minor points:%0a%3c %0a%3c * A population should keep at least two parental generations to locate first cousin, and more generations to locate more distance relatives. (c.f. parameter ancGen of the population() function).%0a%3c %0a%3c * If only one offspring is produced at each mating event, it would be extremely  difficult to find full siblings, and cousins in a population. Use numOffspring = 2 or more advanced offspring control schemes to increace relatives in a population.%0a%3c %0a%3c * For the first several generation where there are not enough ancestral generations, no relatives could be found and consanguineousMating would locate another parent from the whole population.%0a%3c %0a%3c * In this example, both mating schemes are applied to the whole population so there is no need to define virtual subpopulations.%0a%3c %0a%3c * Number of sibling and offspring vary from individual to individual due to chances. It is therefore difficult to estimate how many information fields are needed to store all siblings and offsprings. Big number is likely to slow down your simulation, and small number may limit the number of relatives you can locate.%0a
host:1232384034=127.0.0.1
