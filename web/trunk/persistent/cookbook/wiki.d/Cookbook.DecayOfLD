version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1232383805
host=127.0.0.1
name=Cookbook.DecayOfLD
rev=15
targets=
text=(:title Decay of linkage disequilibrium due to recombination:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|simuLDDecay.py%0a%0aThis script demonstrates the decay of linkage disequilibrium due to recombination. Given population size, generations to evolve, recombinatin rate, number of replicates and method to measure linkage disequilibrium, the core part of this recipe is shown below. The full Python code is available for download.%0a%0a%0a=python [=%0a%0adef simuLDDecay(popSize, gen, recRate, numRep, method, saveFigure, useRPy):%0a    '''Simulate the decay of linkage disequilibrium as a result%0a    of recombination.%0a    '''%0a    # diploid population, one chromosome with 2 loci%0a    # random mating with sex%0a    simu = simulator(%0a        population(size=popSize, ploidy=2, loci=[2]),%0a        rep = numRep)%0a%0a    # get method value used to plot and evolve%0a    if method=="D'":%0a        methodplot = "LD_prime[0][1]"%0a        upperlim = 1%0a        methodeval = r"'%25.4f\t' %25 LD_prime[0][1]"%0a    elif method=='R2':%0a        methodplot = "R2[0][1]"%0a        upperlim = 1%0a        methodeval = r"'%25.4f\t' %25 R2[0][1]"%0a    else:%0a        methodplot = "LD[0][1]"%0a        upperlim = 0.25%0a        methodeval = r"'%25.4f\t' %25 LD[0][1]"%0a%0a    if useRPy:%0a        print saveFigure%0a        plotter = varPlotter(methodplot, %0a            ylim = [0, upperlim], saveAs=saveFigure,%0a            update = gen - 1, ylab=method,%0a            main="Decay of Linkage Disequilibrium r=%25f" %25 recRate)%0a    else:%0a        plotter = noneOp()%0a%0a    simu.evolve(%0a        # everyone will have the same genotype: 01/10%0a        initOps = [%0a            initSex(),%0a            initByValue([0,1,1,0])%0a        ],%0a        matingScheme = randomMating(ops=recombinator(rates = recRate)), %0a        postOps = [%0a            stat(alleleFreq=[0], LD=[0, 1]),%0a            pyEval(methodeval),%0a            pyOutput('\n', reps=-1),%0a            plotter%0a        ],%0a        gen = gen%0a    )%0a%0a%0a=]%0a%0aUsing option @@--saveFigure=decay.png@@, this script will produce figures such as%0a%0a%25width=600%25 Attach:decay_49.png%0a
time=1262473347
title=Decay of linkage disequilibrium due to recombination
author:1262473347=
diff:1262473347:1261111025:=9d8%0a%3c %0a18,19c17,18%0a%3c         rep = numRep)%0a%3c %0a---%0a>         randomMating(ops=recombinator(rates = recRate)), rep = numRep)%0a> %0a49d47%0a%3c         matingScheme = randomMating(ops=recombinator(rates = recRate)), %0a58,59d55%0a%3c %0a%3c %0a
host:1262473347=127.0.0.1
author:1261111025=
diff:1261111025:1244768900:=17,18c17,18%0a%3c         randomMating(ops=recombinator(rates = recRate)), rep = numRep)%0a%3c %0a---%0a>         randomMating(), rep = numRep)%0a> %0a44,48c44,46%0a%3c         initOps = [%0a%3c             initSex(),%0a%3c             initByValue([0,1,1,0])%0a%3c         ],%0a%3c         postOps = [%0a---%0a>         preOps = [initByValue([0,1,1,0])],%0a>         ops = [%0a>             recombinator(rates = recRate),%0a51c49%0a%3c             pyOutput('\n', reps=-1),%0a---%0a>             pyOutput('\n', rep=-1),%0a
host:1261111025=127.0.0.1
author:1244768900=
diff:1244768900:1242786832:=46c46%0a%3c             recombinator(rates = recRate),%0a---%0a>             recombinator(rate = recRate),%0a
host:1244768900=127.0.0.1
author:1242786832=
diff:1242786832:1242786830:=
host:1242786832=127.0.0.1
author:1242786830=
diff:1242786830:1242786615:=55,58d54%0a%3c %0a%3c Using option @@--saveFigure=decay.png@@, this script will produce figures such as%0a%3c %0a%3c %25width=600%25 Attach:decay_49.png%0a
host:1242786830=127.0.0.1
author:1242786615=
diff:1242786615:1232488405:=34,38c34,37%0a%3c         print saveFigure%0a%3c         plotter = varPlotter(methodplot, %0a%3c             ylim = [0, upperlim], saveAs=saveFigure,%0a%3c             update = gen - 1, ylab=method,%0a%3c             main="Decay of Linkage Disequilibrium r=%25f" %25 recRate)%0a---%0a>         plotter = varPlotter(methodplot, numRep=numRep, win=gen,%0a>             ylim = [0, upperlim], xlab="generation", saveAs=saveFigure,%0a>             update = gen - 1, ylab=method, col=range(1, numRep + 1),%0a>             title="Decay of Linkage Disequilibrium r=%25f" %25 recRate)%0a
host:1242786615=127.0.0.1
author:1232488405=
diff:1232488405:1232487457:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|simuLDDecay.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a
host:1232488405=127.0.0.1
author:1232487457=
diff:1232487457:1232487447:=1c1%0a%3c (:title Decay of linkage disequilibrium due to recombination:)%0a---%0a> (: Decay of linkage disequilibrium due to recombination:)%0a
host:1232487457=127.0.0.1
author:1232487447=
diff:1232487447:1232487387:=1,3c1%0a%3c (: Decay of linkage disequilibrium due to recombination:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a
host:1232487447=127.0.0.1
author:1232487387=
diff:1232487387:1232487264:=3,4c3%0a%3c This script demonstrates the decay of linkage disequilibrium due to recombination. Given population size, generations to evolve, recombinatin rate, number of replicates and method to measure linkage disequilibrium, the core part of this recipe is shown below. The full Python code is available for download.%0a%3c %0a---%0a> This script demonstrates the decay of linkage disequilibrium due to recombination. Given population size, generations to evolve, recombinatin rate, number of replicates and method to measure linkage disequilibrium, the core part of this recipe is%0a
host:1232487387=127.0.0.1
author:1232487264=
diff:1232487264:1232487121:=3,4c3,4%0a%3c This script demonstrates the decay of linkage disequilibrium due to recombination. Given population size, generations to evolve, recombinatin rate, number of replicates and method to measure linkage disequilibrium, the core part of this recipe is%0a%3c %0a---%0a> This script demonstrates the decay of linkage disequilibrium due to recombination.%0a> %0a6,49c6,163%0a%3c def simuLDDecay(popSize, gen, recRate, numRep, method, saveFigure, useRPy):%0a%3c     '''Simulate the decay of linkage disequilibrium as a result%0a%3c     of recombination.%0a%3c     '''%0a%3c     # diploid population, one chromosome with 2 loci%0a%3c     # random mating with sex%0a%3c     simu = simulator(%0a%3c         population(size=popSize, ploidy=2, loci=[2]),%0a%3c         randomMating(), rep = numRep)%0a%3c %0a%3c     # get method value used to plot and evolve%0a%3c     if method=="D'":%0a%3c         methodplot = "LD_prime[0][1]"%0a%3c         upperlim = 1%0a%3c         methodeval = r"'%25.4f\t' %25 LD_prime[0][1]"%0a%3c     elif method=='R2':%0a%3c         methodplot = "R2[0][1]"%0a%3c         upperlim = 1%0a%3c         methodeval = r"'%25.4f\t' %25 R2[0][1]"%0a%3c     else:%0a%3c         methodplot = "LD[0][1]"%0a%3c         upperlim = 0.25%0a%3c         methodeval = r"'%25.4f\t' %25 LD[0][1]"%0a%3c %0a%3c     if useRPy:%0a%3c         plotter = varPlotter(methodplot, numRep=numRep, win=gen,%0a%3c             ylim = [0, upperlim], xlab="generation", saveAs=saveFigure,%0a%3c             update = gen - 1, ylab=method, col=range(1, numRep + 1),%0a%3c             title="Decay of Linkage Disequilibrium r=%25f" %25 recRate)%0a%3c     else:%0a%3c         plotter = noneOp()%0a%3c %0a%3c     simu.evolve(%0a%3c         # everyone will have the same genotype: 01/10%0a%3c         preOps = [initByValue([0,1,1,0])],%0a%3c         ops = [%0a%3c             recombinator(rate = recRate),%0a%3c             stat(alleleFreq=[0], LD=[0, 1]),%0a%3c             pyEval(methodeval),%0a%3c             pyOutput('\n', rep=-1),%0a%3c             plotter%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a---%0a> #!/usr/bin/env python%0a> %0a> """%0a> This program demonstrate the decay of linkage disequilibrium due %0a> to recombination.%0a> """%0a> %0a> import simuOpt, os, sys, types, time%0a> %0a> options = [%0a>     {'arg':'h', %0a>      'longarg':'help', %0a>      'default':False, %0a>      'description':'Print this usage message.', %0a>      'jump':-1%0a>     },%0a>     {'arg':'s:', %0a>      'longarg':'size=', %0a>      'default':1000, %0a>      'label':'Population Size', %0a>      'allowedTypes':[types.IntType, types.LongType],%0a>      'validate':simuOpt.valueGT(0),%0a>      'description':'Population size'%0a>     },%0a>     {'arg':'e:', %0a>      'longarg':'gen=', %0a>      'default':50,%0a>      'allowedTypes':[types.IntType, types.LongType],%0a>      'label':'Generations to evolve', %0a>      'description':'Length of evolution',%0a>      'validate':simuOpt.valueGT(0)%0a>     },%0a>     {'arg':'r:', %0a>      'longarg':'recRate=', %0a>      'default':0.01,%0a>      'label':'Recombination Rate', %0a>      'allowedTypes':[types.FloatType],%0a>      'description':'Recombination rate',%0a>      'validate':simuOpt.valueBetween(0.,1.),     %0a>     },%0a>     {'arg':'n:', %0a>      'longarg':'replicate=', %0a>      'default':5, %0a>      'label':'Number of Replicate',%0a>      'allowedTypes':[types.IntType, types.LongType],%0a>      'description':'Number of replicates',%0a>      'validate':simuOpt.valueGT(0)%0a>     },%0a>     {'arg':'s:',%0a>      'longarg':'saveFigure=',%0a>      'label':'Save figure to filename',%0a>      'default':'',%0a>      'allowedTypes':[types.StringType],%0a>      'description':'file the last figure to this filenameXX.eps .'%0a>     },%0a>     {'longarg':'saveConfig=', %0a>      'default':'', %0a>      'allowedTypes':[types.StringType],%0a>      'description':'Save current paremeter set to specified file.'%0a>     },%0a>     {'longarg':'measure=', %0a>      'default':'D',%0a>      'label':'LD measure',%0a>      'description':'Choose linkage disequilibrium measure to be outputted.',%0a>      'chooseOneOf':['D', "D'", 'R2'],%0a>      'validate': simuOpt.valueOneOf(['D', "D'", 'R2']),%0a>     },%0a>     {'arg':'v', %0a>      'longarg':'verbose', %0a>      'default':False, %0a>      'description':'Verbose mode.'%0a>     },%0a> ]%0a> %0a> %0a> from simuPOP import *%0a> %0a> try:%0a>     from simuRPy import *%0a> except:%0a>     print "simuRPy import failed. Please check your rpy installation."%0a>     print "LD values will not be plotted"%0a>     useRPy = False%0a> else:%0a>     useRPy = True%0a> %0a> # get all parameters%0a> allParam = simuOpt.getParam(options, __doc__)%0a> %0a> if len(allParam) > 0:    # successfully get the params%0a>     (help, popSize, gen, recRate, numRep, saveFigure, %0a>     saveConfig, method, verbose) = allParam%0a> else:%0a>     sys.exit(0)%0a> %0a> if saveConfig != '':%0a>     simuOpt.saveConfig(options, saveConfig, allParam)%0a> %0a> if help:%0a>     print simuOpt.usage(options, __doc__)%0a>     sys.exit(1)%0a>     %0a> # print out info if in verbose mode%0a> if verbose:%0a>     print "Pop size: ", popSize%0a>     print "Generations: ", gen%0a>     print "Recombination rate: ", recRate%0a>     print "Number of replicates: ", numRep%0a>     print "Save figure to: ", saveFigure%0a>     %0a> # diploid population, one chromosome with 2 loci%0a> # random mating with sex%0a> simu = simulator(%0a>     population(size=popSize, ploidy=2, loci=[2]),%0a>     randomMating(),%0a>     rep = numRep)%0a> %0a> # get method value used to plot and evolve%0a> if method=="D'":%0a>     methodplot = "LD_prime[0][1]"%0a>     upperlim = 1%0a>     methodeval = r"'%25.4f\t' %25 LD_prime[0][1]"%0a> elif method=='R2':%0a>     methodplot = "R2[0][1]"%0a>     upperlim = 1%0a>     methodeval = r"'%25.4f\t' %25 R2[0][1]"%0a> else:%0a>     methodplot = "LD[0][1]"%0a>     upperlim = 0.25%0a>     methodeval = r"'%25.4f\t' %25 LD[0][1]"%0a> %0a> %0a> if useRPy:%0a>     plotter = varPlotter(methodplot, numRep=numRep, win=gen, %0a>         ylim = [0,upperlim], xlab="generation", saveAs=saveFigure, update=gen,%0a>         ylab=method, title="Decay of Linkage Disequilibrium r=%25.3f" %25 recRate)%0a> else:%0a>     plotter = noneOp()%0a>     %0a> # everyone will have the same genotype: 01/10%0a> simu.evolve(%0a>     preOps = [initByValue([0,1,1,0])],%0a>     ops = [%0a>         recombinator( rate = recRate),%0a>         stat( alleleFreq=[0], LD=[0,1] ),%0a>         pyEval(methodeval),%0a>         pyEval(r"'\n'", rep=-1),%0a>         plotter%0a>     ],%0a>     gen=gen%0a> )%0a> %0a> # wait five seconds before exit%0a> if useRPy:%0a>     print "Figure will be closed after five seconds."%0a>     time.sleep(5)%0a> %0a> %0a
host:1232487264=127.0.0.1
author:1232487121=
diff:1232487121:1232487063:=1c1%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a---%0a> %25rfloat%25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a
host:1232487121=127.0.0.1
author:1232487063=
diff:1232487063:1232486868:=1c1%0a%3c %25rfloat%25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|download simuLDDecay.py%0a---%0a> [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]%0a
host:1232487063=127.0.0.1
author:1232486868=
diff:1232486868:1232383805:=1,2d0%0a%3c [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]%0a%3c %0a
host:1232486868=127.0.0.1
author:1232383805=
diff:1232383805:1232383805:=1,162d0%0a%3c This script demonstrates the decay of linkage disequilibrium due to recombination.%0a%3c %0a%3c =python [=%0a%3c #!/usr/bin/env python%0a%3c %0a%3c """%0a%3c This program demonstrate the decay of linkage disequilibrium due %0a%3c to recombination.%0a%3c """%0a%3c %0a%3c import simuOpt, os, sys, types, time%0a%3c %0a%3c options = [%0a%3c     {'arg':'h', %0a%3c      'longarg':'help', %0a%3c      'default':False, %0a%3c      'description':'Print this usage message.', %0a%3c      'jump':-1%0a%3c     },%0a%3c     {'arg':'s:', %0a%3c      'longarg':'size=', %0a%3c      'default':1000, %0a%3c      'label':'Population Size', %0a%3c      'allowedTypes':[types.IntType, types.LongType],%0a%3c      'validate':simuOpt.valueGT(0),%0a%3c      'description':'Population size'%0a%3c     },%0a%3c     {'arg':'e:', %0a%3c      'longarg':'gen=', %0a%3c      'default':50,%0a%3c      'allowedTypes':[types.IntType, types.LongType],%0a%3c      'label':'Generations to evolve', %0a%3c      'description':'Length of evolution',%0a%3c      'validate':simuOpt.valueGT(0)%0a%3c     },%0a%3c     {'arg':'r:', %0a%3c      'longarg':'recRate=', %0a%3c      'default':0.01,%0a%3c      'label':'Recombination Rate', %0a%3c      'allowedTypes':[types.FloatType],%0a%3c      'description':'Recombination rate',%0a%3c      'validate':simuOpt.valueBetween(0.,1.),     %0a%3c     },%0a%3c     {'arg':'n:', %0a%3c      'longarg':'replicate=', %0a%3c      'default':5, %0a%3c      'label':'Number of Replicate',%0a%3c      'allowedTypes':[types.IntType, types.LongType],%0a%3c      'description':'Number of replicates',%0a%3c      'validate':simuOpt.valueGT(0)%0a%3c     },%0a%3c     {'arg':'s:',%0a%3c      'longarg':'saveFigure=',%0a%3c      'label':'Save figure to filename',%0a%3c      'default':'',%0a%3c      'allowedTypes':[types.StringType],%0a%3c      'description':'file the last figure to this filenameXX.eps .'%0a%3c     },%0a%3c     {'longarg':'saveConfig=', %0a%3c      'default':'', %0a%3c      'allowedTypes':[types.StringType],%0a%3c      'description':'Save current paremeter set to specified file.'%0a%3c     },%0a%3c     {'longarg':'measure=', %0a%3c      'default':'D',%0a%3c      'label':'LD measure',%0a%3c      'description':'Choose linkage disequilibrium measure to be outputted.',%0a%3c      'chooseOneOf':['D', "D'", 'R2'],%0a%3c      'validate': simuOpt.valueOneOf(['D', "D'", 'R2']),%0a%3c     },%0a%3c     {'arg':'v', %0a%3c      'longarg':'verbose', %0a%3c      'default':False, %0a%3c      'description':'Verbose mode.'%0a%3c     },%0a%3c ]%0a%3c %0a%3c %0a%3c from simuPOP import *%0a%3c %0a%3c try:%0a%3c     from simuRPy import *%0a%3c except:%0a%3c     print "simuRPy import failed. Please check your rpy installation."%0a%3c     print "LD values will not be plotted"%0a%3c     useRPy = False%0a%3c else:%0a%3c     useRPy = True%0a%3c %0a%3c # get all parameters%0a%3c allParam = simuOpt.getParam(options, __doc__)%0a%3c %0a%3c if len(allParam) > 0:    # successfully get the params%0a%3c     (help, popSize, gen, recRate, numRep, saveFigure, %0a%3c     saveConfig, method, verbose) = allParam%0a%3c else:%0a%3c     sys.exit(0)%0a%3c %0a%3c if saveConfig != '':%0a%3c     simuOpt.saveConfig(options, saveConfig, allParam)%0a%3c %0a%3c if help:%0a%3c     print simuOpt.usage(options, __doc__)%0a%3c     sys.exit(1)%0a%3c     %0a%3c # print out info if in verbose mode%0a%3c if verbose:%0a%3c     print "Pop size: ", popSize%0a%3c     print "Generations: ", gen%0a%3c     print "Recombination rate: ", recRate%0a%3c     print "Number of replicates: ", numRep%0a%3c     print "Save figure to: ", saveFigure%0a%3c     %0a%3c # diploid population, one chromosome with 2 loci%0a%3c # random mating with sex%0a%3c simu = simulator(%0a%3c     population(size=popSize, ploidy=2, loci=[2]),%0a%3c     randomMating(),%0a%3c     rep = numRep)%0a%3c %0a%3c # get method value used to plot and evolve%0a%3c if method=="D'":%0a%3c     methodplot = "LD_prime[0][1]"%0a%3c     upperlim = 1%0a%3c     methodeval = r"'%25.4f\t' %25 LD_prime[0][1]"%0a%3c elif method=='R2':%0a%3c     methodplot = "R2[0][1]"%0a%3c     upperlim = 1%0a%3c     methodeval = r"'%25.4f\t' %25 R2[0][1]"%0a%3c else:%0a%3c     methodplot = "LD[0][1]"%0a%3c     upperlim = 0.25%0a%3c     methodeval = r"'%25.4f\t' %25 LD[0][1]"%0a%3c %0a%3c %0a%3c if useRPy:%0a%3c     plotter = varPlotter(methodplot, numRep=numRep, win=gen, %0a%3c         ylim = [0,upperlim], xlab="generation", saveAs=saveFigure, update=gen,%0a%3c         ylab=method, title="Decay of Linkage Disequilibrium r=%25.3f" %25 recRate)%0a%3c else:%0a%3c     plotter = noneOp()%0a%3c     %0a%3c # everyone will have the same genotype: 01/10%0a%3c simu.evolve(%0a%3c     preOps = [initByValue([0,1,1,0])],%0a%3c     ops = [%0a%3c         recombinator( rate = recRate),%0a%3c         stat( alleleFreq=[0], LD=[0,1] ),%0a%3c         pyEval(methodeval),%0a%3c         pyEval(r"'\n'", rep=-1),%0a%3c         plotter%0a%3c     ],%0a%3c     gen=gen%0a%3c )%0a%3c %0a%3c # wait five seconds before exit%0a%3c if useRPy:%0a%3c     print "Figure will be closed after five seconds."%0a%3c     time.sleep(5)%0a%3c %0a%3c %0a%3c =]%0a
host:1232383805=127.0.0.1
