version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1238103697
host=127.0.0.1
name=Cookbook.ExportPOPGENE
rev=11
targets=
text=(:title Export POPGENE data file:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:ExportPOPGENE.py | http://simupop.sourceforge.net/images/download.jpg]]|ExportPOPGENE.py%0a%0aThis function allows you to export your simulated populations into a POPGENE readable data file.%0a%0aPOPGENE is a user-friendly Microsoft Window-based computer package for the analysis of genetic variation among and within natural populations using co-dominant and dominant markers and quantitative traits. It can be downloaded from:%0ahttp://www.ualberta.ca/~fyeh/index.htm%0a%0aInput file for POPGENE analysis consists of the header section and the data. The header section specifies %0a# a job title delimited by /* ... */; %0a# number of populations; %0a# number of loci and %0a# locus names. %0a%0aThe body of data starts with, for each population, population ID # (optional), population name (optional). If you do not give population ID # or population name, you must leave at least one blank line between populations and POPGENE will generate population ID # automatically for you. But if you do, your population ID # and population name must be unique for each population. The raw data, in free format and with or without one or more spaces between columns, immediately follow without blank lines in between. Missing values must be set to “ . ‘‘ for haploids and dominant markers such as RAPDs (i.e., one digit to score for presence or absence of allele) and “..” (i.e., two digits) for diploids co-dominant markers in your input file. %0a%0aUsing the following function,%0a %0a=python [=%0adef SavePOPGENEDatFile(pop, output='', title='', pad=1):%0a    '''%0a    Output a data file readable by POPGENE%0a    pad - shift genotype from 0 to pad, 1 to 1+pad...%0a          since POPGENE genotype can not be 0 %0a    '''%0a    if type(pop) == type(''):%0a        pop = LoadPopulation(pop)%0a    # open data file to write%0a    try:%0a        datOut = open(output, "w")%0a    except exceptions.IOError:%0a        raise exceptions.IOError, "Can not open file " + file + " to write."%0a    # header section of POPGENE data file, default to output%0a    if title != '':%0a        print >> datOut, '/* ' + title + ' */'%0a    else:%0a        print >> datOut, '/* ' + output + ' */'%0a    print >> datOut, 'Number of populations = %25d' %25 pop.numSubPop()%0a    print >> datOut, 'Number of loci = %25d' %25 pop.totNumLoci()%0a    print >> datOut, 'Locus name :'%0a    # output locus names%0a    print >> datOut, ' '.join(pop.lociNames()) + '\n'%0a    # output genotype, only handle haploid and diploid%0a    if pop.ploidy() == 1:%0a        for sp in range(0, pop.numSubPop()):%0a            gt = ''%0a            # obtain genotype%0a            # POPGENE genotype can not be 0, so transfer 0 to pad, 1 to 1+pad...%0a            for g in pop.genotype(sp):%0a                if len(pop.alleleNames()) == 0:%0a                    gt += '%25d' %25 (g + pad)%0a                else:%0a                    gt += pop.alleleName(g)%0a            # add space after each genotype%0a            gt = ' '.join(gt)%0a            # add enter after each individual%0a            gt = '\n'.join(gt[i:i+2*pop.totNumLoci()] for i in range(len(gt)) %0a                if i %25 (2*pop.totNumLoci()) == 0)%0a            print >> datOut, gt%0a            print >> datOut, '\n'%0a    elif pop.ploidy() == 2:%0a        for sp in range(0, pop.numSubPop()):%0a            for ind in pop.individuals(sp):%0a                gt = ''%0a                for loc in range(pop.totNumLoci()):%0a                    if len(pop.alleleNames()) == 0:%0a                        gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad,%0a                            ind.allele(loc, 1) + pad)%0a                    else:%0a                        gt += pop.alleleName(ind.allele(loc, 0)) + \%0a                            pop.alleleName(ind.allele(loc, 1))%0a                    gt += ' '%0a                print >> datOut, gt%0a            print >> datOut, '\n'%0a    else:%0a        raise exceptions.ValueError, "POPGENE only supports haploid and diploid."%0a    datOut.close()%0a=]%0a%0aif we define the population as %0a=python [=%0a    pop = population(size=[4, 5], ploidy=2, loci=[2, 4], alleleNames=['A','B'])%0a    InitByFreq(pop, [.3, .7])%0a=]%0awe may get the output file%0a=python [=%0a/* testing diploid */%0aNumber of populations = 2%0aNumber of loci = 6%0aLocus name :%0aloc1-1 loc1-2 loc2-1 loc2-2 loc2-3 loc2-4%0a%0aAB BA BA BB BB AB %0aBB AB BB AB BB BA %0aBB BB BA AA AB BB %0aAB BA AA AA BA BB %0a%0a%0aAA AB AB BA BB BA %0aBB AA AB BB AA BA %0aAA BB BB AB AA BB %0aAB BB BA BA BB BB %0aBB BB BB BB BB BA %0a%0a%0a=]%0a
time=1238117560
title=Export POPGENE data file
author:1238117560=
diff:1238117560:1238107960:=10,16c10%0a%3c Input file for POPGENE analysis consists of the header section and the data. The header section specifies %0a%3c # a job title delimited by /* ... */; %0a%3c # number of populations; %0a%3c # number of loci and %0a%3c # locus names. %0a%3c %0a%3c The body of data starts with, for each population, population ID # (optional), population name (optional). If you do not give population ID # or population name, you must leave at least one blank line between populations and POPGENE will generate population ID # automatically for you. But if you do, your population ID # and population name must be unique for each population. The raw data, in free format and with or without one or more spaces between columns, immediately follow without blank lines in between. Missing values must be set to “ . ‘‘ for haploids and dominant markers such as RAPDs (i.e., one digit to score for presence or absence of allele) and “..” (i.e., two digits) for diploids co-dominant markers in your input file. %0a---%0a> Input file for POPGENE analysis consists of the header section and the data. The header section specifies (1) a job title delimited by /* ... */; (2) number of populations; (3) number of loci and (4) locus names. The body of data starts with, for each population, population ID # (optional), population name (optional). If you do not give population ID # or population name, you must leave at least one blank line between populations and POPGENE will generate population ID # automatically for you. But if you do, your population ID # and population name must be unique for each population. The raw data, in free format and with or without one or more spaces between columns, immediately follow without blank lines in between. Missing values must be set to “ . ‘‘ for haploids and dominant markers such as RAPDs (i.e., one digit to score for presence or absence of allele) and “..” (i.e., two digits) for diploids co-dominant markers in your input file. %0a
host:1238117560=127.0.0.1
author:1238107960=Yaji Xu
diff:1238107960:1238107877:=81c81%0a%3c =python [=%0a---%0a> = python [=%0a98a99%0a> %0a
host:1238107960=127.0.0.1
author:1238107877=Yaji Xu
diff:1238107877:1238107804:=81c81%0a%3c = python [=%0a---%0a> [=%0a
host:1238107877=127.0.0.1
author:1238107804=Yaji Xu
diff:1238107804:1238107391:=12c12%0a%3c Using the following function,%0a---%0a> Using the following function and %0a13a14,15%0a> %0a> %0a73,102c75%0a%3c =]%0a%3c %0a%3c if we define the population as %0a%3c =python [=%0a%3c     pop = population(size=[4, 5], ploidy=2, loci=[2, 4], alleleNames=['A','B'])%0a%3c     InitByFreq(pop, [.3, .7])%0a%3c =]%0a%3c we may get the output file%0a%3c [=%0a%3c /* testing diploid */%0a%3c Number of populations = 2%0a%3c Number of loci = 6%0a%3c Locus name :%0a%3c loc1-1 loc1-2 loc2-1 loc2-2 loc2-3 loc2-4%0a%3c %0a%3c AB BA BA BB BB AB %0a%3c BB AB BB AB BB BA %0a%3c BB BB BA AA AB BB %0a%3c AB BA AA AA BA BB %0a%3c %0a%3c %0a%3c AA AB AB BA BB BA %0a%3c BB AA AB BB AA BA %0a%3c AA BB BB AB AA BB %0a%3c AB BB BA BA BB BB %0a%3c BB BB BB BB BB BA %0a%3c %0a%3c %0a%3c %0a%3c =]%0a---%0a> =]%0a\ No newline at end of file%0a
host:1238107804=127.0.0.1
author:1238107391=Yaji Xu
diff:1238107391:1238106811:=7,15c7%0a%3c POPGENE is a user-friendly Microsoft Window-based computer package for the analysis of genetic variation among and within natural populations using co-dominant and dominant markers and quantitative traits. It can be downloaded from:%0a%3c http://www.ualberta.ca/~fyeh/index.htm%0a%3c %0a%3c Input file for POPGENE analysis consists of the header section and the data. The header section specifies (1) a job title delimited by /* ... */; (2) number of populations; (3) number of loci and (4) locus names. The body of data starts with, for each population, population ID # (optional), population name (optional). If you do not give population ID # or population name, you must leave at least one blank line between populations and POPGENE will generate population ID # automatically for you. But if you do, your population ID # and population name must be unique for each population. The raw data, in free format and with or without one or more spaces between columns, immediately follow without blank lines in between. Missing values must be set to “ . ‘‘ for haploids and dominant markers such as RAPDs (i.e., one digit to score for presence or absence of allele) and “..” (i.e., two digits) for diploids co-dominant markers in your input file. %0a%3c %0a%3c Using the following function and %0a%3c  %0a%3c %0a%3c %0a---%0a> %0a74a67%0a> %0a
host:1238107391=127.0.0.1
author:1238106811=Yaji Xu
diff:1238106811:1238106610:=10,14c10%0a%3c     '''%0a%3c     Output a data file readable by POPGENE%0a%3c     pad - shift genotype from 0 to pad, 1 to 1+pad...%0a%3c           since POPGENE genotype can not be 0 %0a%3c     '''%0a---%0a>     '''Output a data file readable by POPGENE'''%0a16a13,16%0a>     if output != '':%0a>         file = output%0a>     else:%0a>         raise exceptions.ValueError, "Please specify output file."%0a19c19%0a%3c         datOut = open(output, "w")%0a---%0a>         datOut = open(file, "w")%0a39c39%0a%3c                 if len(pop.alleleNames()) == 0:%0a---%0a>                 if pop.alleleNames() == ():%0a55,56c55,56%0a%3c                     if len(pop.alleleNames()) == 0:%0a%3c                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad,%0a---%0a>                     if pop.alleleNames() == ():%0a>                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad, %0a59c59%0a%3c                         gt += pop.alleleName(ind.allele(loc, 0)) + \%0a---%0a>                         gt += pop.alleleName(ind.allele(loc, 0)) + %0a
host:1238106811=127.0.0.1
author:1238106610=Yaji Xu
diff:1238106610:1238104469:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:ExportPOPGENE.py | http://simupop.sourceforge.net/images/download.jpg]]|ExportPOPGENE.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:ExportPG.py | http://simupop.sourceforge.net/images/download.jpg]]|ExportPG.py%0a
host:1238106610=127.0.0.1
author:1238104469=Yaji Xu
diff:1238104469:1238104356:=56,57c56%0a%3c                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad, %0a%3c                             ind.allele(loc, 1) + pad)%0a---%0a>                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad, ind.allele(loc, 1) + pad)%0a59,60c58%0a%3c                         gt += pop.alleleName(ind.allele(loc, 0)) + %0a%3c                             pop.alleleName(ind.allele(loc, 1))%0a---%0a>                         gt += pop.alleleName(ind.allele(loc, 0)) + pop.alleleName(ind.allele(loc, 1))%0a
host:1238104469=127.0.0.1
author:1238104356=Yaji Xu
diff:1238104356:1238104205:=5,6c5%0a%3c This function allows you to export your simulated populations into a POPGENE readable data file.%0a%3c %0a---%0a> This function allows you to export your simulated population into a POPGENE readable data file.%0a
host:1238104356=127.0.0.1
author:1238104205=Yaji Xu
diff:1238104205:1238103697:=3,5c3,5%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:ExportPG.py | http://simupop.sourceforge.net/images/download.jpg]]|ExportPG.py%0a%3c %0a%3c This function allows you to export your simulated population into a POPGENE readable data file.%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:restartIfFailed.py | http://simupop.sourceforge.net/images/download.jpg]]|restartIfFailed.py%0a> %0a> This example is simple but can be easily applied to cases when continuing a forward-time simulation will not yield meaning results. One such example is a disease allele gets lost. Note that if you would like to control the allele frequency of an allele, [[Cookbook/ControlledRandomMating]] may be better.%0a
host:1238104205=127.0.0.1
author:1238103697=Yaji Xu
diff:1238103697:1238103697:=1,65d0%0a%3c (:title Export POPGENE data file:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:restartIfFailed.py | http://simupop.sourceforge.net/images/download.jpg]]|restartIfFailed.py%0a%3c %0a%3c This example is simple but can be easily applied to cases when continuing a forward-time simulation will not yield meaning results. One such example is a disease allele gets lost. Note that if you would like to control the allele frequency of an allele, [[Cookbook/ControlledRandomMating]] may be better.%0a%3c %0a%3c =python [=%0a%3c def SavePOPGENEDatFile(pop, output='', title='', pad=1):%0a%3c     '''Output a data file readable by POPGENE'''%0a%3c     if type(pop) == type(''):%0a%3c         pop = LoadPopulation(pop)%0a%3c     if output != '':%0a%3c         file = output%0a%3c     else:%0a%3c         raise exceptions.ValueError, "Please specify output file."%0a%3c     # open data file to write%0a%3c     try:%0a%3c         datOut = open(file, "w")%0a%3c     except exceptions.IOError:%0a%3c         raise exceptions.IOError, "Can not open file " + file + " to write."%0a%3c     # header section of POPGENE data file, default to output%0a%3c     if title != '':%0a%3c         print >> datOut, '/* ' + title + ' */'%0a%3c     else:%0a%3c         print >> datOut, '/* ' + output + ' */'%0a%3c     print >> datOut, 'Number of populations = %25d' %25 pop.numSubPop()%0a%3c     print >> datOut, 'Number of loci = %25d' %25 pop.totNumLoci()%0a%3c     print >> datOut, 'Locus name :'%0a%3c     # output locus names%0a%3c     print >> datOut, ' '.join(pop.lociNames()) + '\n'%0a%3c     # output genotype, only handle haploid and diploid%0a%3c     if pop.ploidy() == 1:%0a%3c         for sp in range(0, pop.numSubPop()):%0a%3c             gt = ''%0a%3c             # obtain genotype%0a%3c             # POPGENE genotype can not be 0, so transfer 0 to pad, 1 to 1+pad...%0a%3c             for g in pop.genotype(sp):%0a%3c                 if pop.alleleNames() == ():%0a%3c                     gt += '%25d' %25 (g + pad)%0a%3c                 else:%0a%3c                     gt += pop.alleleName(g)%0a%3c             # add space after each genotype%0a%3c             gt = ' '.join(gt)%0a%3c             # add enter after each individual%0a%3c             gt = '\n'.join(gt[i:i+2*pop.totNumLoci()] for i in range(len(gt)) %0a%3c                 if i %25 (2*pop.totNumLoci()) == 0)%0a%3c             print >> datOut, gt%0a%3c             print >> datOut, '\n'%0a%3c     elif pop.ploidy() == 2:%0a%3c         for sp in range(0, pop.numSubPop()):%0a%3c             for ind in pop.individuals(sp):%0a%3c                 gt = ''%0a%3c                 for loc in range(pop.totNumLoci()):%0a%3c                     if pop.alleleNames() == ():%0a%3c                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad, ind.allele(loc, 1) + pad)%0a%3c                     else:%0a%3c                         gt += pop.alleleName(ind.allele(loc, 0)) + pop.alleleName(ind.allele(loc, 1))%0a%3c                     gt += ' '%0a%3c                 print >> datOut, gt%0a%3c             print >> datOut, '\n'%0a%3c     else:%0a%3c         raise exceptions.ValueError, "POPGENE only supports haploid and diploid."%0a%3c     datOut.close()%0a%3c %0a%3c =]%0a\ No newline at end of file%0a
host:1238103697=127.0.0.1
