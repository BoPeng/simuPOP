version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1243551198
host=127.0.0.1
name=Cookbook.GeneticDrift
rev=8
targets=
text=(:title Changes of allele frequency due to genetic drift:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuGeneticDrift.py | http://simupop.sourceforge.net/images/download.jpg]]|simuGeneticDrift.py%0a%0aGiven population size, initial allele frequency, generations to evolve, number of replicates, this script demonstrates changes of allele frequency at single locus due to genetic drift. The core part of this function is shown below. %0aThe full Python code is available for download. %0a%0a%0a=python [=%0adef simuGeneticDrift(popSize=100, p=0.2, generations=100, replications=5):%0a    '''Simulate the Genetic Drift as a result of random mating.'''%0a    # diploid population, one chromosome with 1 locus%0a    # random mating with sex%0a    pop = population(size=popSize, loci=[1])%0a    simu=simulator(pop, rep=replications)%0a%0a    if useRPy:%0a        plotter = varPlotter('alleleFreq[0][0]', ylim=[0, 1], ylab='allele frequency',%0a            update=generations-1, saveAs='geneticDrift.png')%0a    else:%0a        plotter = noneOp()%0a%0a    # if number of generation is smaller than 200, step is 10 generations,%0a    # if it's between 200 and 500, set step to be 20 generations,%0a    # otherwise, step = 50 generations.%0a    if generations %3c= 200:%0a        s = 10%0a    elif 200 %3c generations %3c= 500:%0a        s = 20%0a    else:%0a        s = 50%0a        %0a    simu.evolve(%0a        # everyone initially will have the same allele frequency%0a        initOps = [%0a            initSex(),%0a            initByFreq([p, 1-p])%0a        ],%0a        matingScheme = randomMating(),%0a        postOps = [%0a            stat(alleleFreq=[0]),%0a            pyEval(r'"Generation %25d:\t" %25 gen', reps = 0, step = s),%0a	        pyEval(r"'%25.3f\t' %25 alleleFreq[0][0]", step = s),%0a	        pyOutput('\n', reps=-1, step = s),%0a	        plotter,%0a        ],%0a        gen = generations%0a    )%0a=]%0a%0aThis script will produce figures such as%0a%0a%25width=600%25 Attach:geneticDrift.png%0a
time=1262473215
title=Changes of allele frequency due to genetic drift
author:1262473215=
diff:1262473215:1261111126:=15,16c15,16%0a%3c     simu=simulator(pop, rep=replications)%0a%3c %0a---%0a>     simu=simulator(pop, randomMating(), rep=replications)%0a> %0a39d38%0a%3c         matingScheme = randomMating(),%0a
host:1262473215=127.0.0.1
author:1261111126=
diff:1261111126:1255149034:=35,45c35,41%0a%3c         initOps = [%0a%3c             initSex(),%0a%3c             initByFreq([p, 1-p])%0a%3c         ],%0a%3c         postOps = [%0a%3c             stat(alleleFreq=[0]),%0a%3c             pyEval(r'"Generation %25d:\t" %25 gen', reps = 0, step = s),%0a%3c 	        pyEval(r"'%25.3f\t' %25 alleleFreq[0][0]", step = s),%0a%3c 	        pyOutput('\n', reps=-1, step = s),%0a%3c 	        plotter,%0a%3c         ],%0a---%0a>         initOps=[initSex(), initByFreq([p, 1-p])],%0a>         postOps=[stat(alleleFreq=[0]),%0a>             pyEval(r'"Generation %25d:\t" %25 gen', rep = 0, step = s),%0a> 	    pyEval(r"'%25.3f\t' %25 alleleFreq[0][0]", step = s),%0a> 	    pyOutput('\n', rep=-1, step = s),%0a> 	    plotter,%0a>             ],%0a
host:1261111126=127.0.0.1
author:1255149034=
diff:1255149034:1253935081:=35,36c35,36%0a%3c         initOps=[initSex(), initByFreq([p, 1-p])],%0a%3c         postOps=[stat(alleleFreq=[0]),%0a---%0a>         preOps=[initSex(), initByFreq([p, 1-p])],%0a>         ops=[stat(alleleFreq=[0]),%0a
host:1255149034=127.0.0.1
author:1253935081=
diff:1253935081:1243606610:=35c35%0a%3c         preOps=[initSex(), initByFreq([p, 1-p])],%0a---%0a>         preOps=[initByFreq([p, 1-p])],%0a
host:1253935081=127.0.0.1
author:1243606610=
diff:1243606610:1243606498:=46,48c46,48%0a%3c This script will produce figures such as%0a%3c %0a%3c %25width=600%25 Attach:geneticDrift.png%0a---%0a> Using option @@--saveFigure=decay.png@@, this script will produce figures such as%0a> %0a> %25width=600%25 Attach:decay_49.png%0a
host:1243606610=127.0.0.1
author:1243606498=
diff:1243606498:1243551471:=10,43c10%0a%3c def simuGeneticDrift(popSize=100, p=0.2, generations=100, replications=5):%0a%3c     '''Simulate the Genetic Drift as a result of random mating.'''%0a%3c     # diploid population, one chromosome with 1 locus%0a%3c     # random mating with sex%0a%3c     pop = population(size=popSize, loci=[1])%0a%3c     simu=simulator(pop, randomMating(), rep=replications)%0a%3c %0a%3c     if useRPy:%0a%3c         plotter = varPlotter('alleleFreq[0][0]', ylim=[0, 1], ylab='allele frequency',%0a%3c             update=generations-1, saveAs='geneticDrift.png')%0a%3c     else:%0a%3c         plotter = noneOp()%0a%3c %0a%3c     # if number of generation is smaller than 200, step is 10 generations,%0a%3c     # if it's between 200 and 500, set step to be 20 generations,%0a%3c     # otherwise, step = 50 generations.%0a%3c     if generations %3c= 200:%0a%3c         s = 10%0a%3c     elif 200 %3c generations %3c= 500:%0a%3c         s = 20%0a%3c     else:%0a%3c         s = 50%0a%3c         %0a%3c     simu.evolve(%0a%3c         # everyone initially will have the same allele frequency%0a%3c         preOps=[initByFreq([p, 1-p])],%0a%3c         ops=[stat(alleleFreq=[0]),%0a%3c             pyEval(r'"Generation %25d:\t" %25 gen', rep = 0, step = s),%0a%3c 	    pyEval(r"'%25.3f\t' %25 alleleFreq[0][0]", step = s),%0a%3c 	    pyOutput('\n', rep=-1, step = s),%0a%3c 	    plotter,%0a%3c             ],%0a%3c         gen = generations%0a%3c     )%0a---%0a> %0a
host:1243606498=127.0.0.1
author:1243551471=
diff:1243551471:1243551198:=5,8c5,7%0a%3c Given population size, initial allele frequency, generations to evolve, number of replicates, this script demonstrates changes of allele frequency at single locus due to genetic drift. The core part of this function is shown below. %0a%3c The full Python code is available for download. %0a%3c %0a%3c %0a---%0a> This script demonstrates the decay of linkage disequilibrium due to recombination. Given population size, generations to evolve, recombinatin rate, number of replicates and method to measure linkage disequilibrium, the core part of this recipe is shown below. The full Python code is available for download.%0a> %0a> %0a10c9,53%0a%3c %0a---%0a> def simuLDDecay(popSize, gen, recRate, numRep, method, saveFigure, useRPy):%0a>     '''Simulate the decay of linkage disequilibrium as a result%0a>     of recombination.%0a>     '''%0a>     # diploid population, one chromosome with 2 loci%0a>     # random mating with sex%0a>     simu = simulator(%0a>         population(size=popSize, ploidy=2, loci=[2]),%0a>         randomMating(), rep = numRep)%0a> %0a>     # get method value used to plot and evolve%0a>     if method=="D'":%0a>         methodplot = "LD_prime[0][1]"%0a>         upperlim = 1%0a>         methodeval = r"'%25.4f\t' %25 LD_prime[0][1]"%0a>     elif method=='R2':%0a>         methodplot = "R2[0][1]"%0a>         upperlim = 1%0a>         methodeval = r"'%25.4f\t' %25 R2[0][1]"%0a>     else:%0a>         methodplot = "LD[0][1]"%0a>         upperlim = 0.25%0a>         methodeval = r"'%25.4f\t' %25 LD[0][1]"%0a> %0a>     if useRPy:%0a>         print saveFigure%0a>         plotter = varPlotter(methodplot, %0a>             ylim = [0, upperlim], saveAs=saveFigure,%0a>             update = gen - 1, ylab=method,%0a>             main="Decay of Linkage Disequilibrium r=%25f" %25 recRate)%0a>     else:%0a>         plotter = noneOp()%0a> %0a>     simu.evolve(%0a>         # everyone will have the same genotype: 01/10%0a>         preOps = [initByValue([0,1,1,0])],%0a>         ops = [%0a>             recombinator(rate = recRate),%0a>             stat(alleleFreq=[0], LD=[0, 1]),%0a>             pyEval(methodeval),%0a>             pyOutput('\n', rep=-1),%0a>             plotter%0a>         ],%0a>         gen = gen%0a>     )%0a
host:1243551471=127.0.0.1
author:1243551198=
diff:1243551198:1243551198:=1,58d0%0a%3c (:title Changes of allele frequency due to genetic drift:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuGeneticDrift.py | http://simupop.sourceforge.net/images/download.jpg]]|simuGeneticDrift.py%0a%3c %0a%3c This script demonstrates the decay of linkage disequilibrium due to recombination. Given population size, generations to evolve, recombinatin rate, number of replicates and method to measure linkage disequilibrium, the core part of this recipe is shown below. The full Python code is available for download.%0a%3c %0a%3c %0a%3c =python [=%0a%3c def simuLDDecay(popSize, gen, recRate, numRep, method, saveFigure, useRPy):%0a%3c     '''Simulate the decay of linkage disequilibrium as a result%0a%3c     of recombination.%0a%3c     '''%0a%3c     # diploid population, one chromosome with 2 loci%0a%3c     # random mating with sex%0a%3c     simu = simulator(%0a%3c         population(size=popSize, ploidy=2, loci=[2]),%0a%3c         randomMating(), rep = numRep)%0a%3c %0a%3c     # get method value used to plot and evolve%0a%3c     if method=="D'":%0a%3c         methodplot = "LD_prime[0][1]"%0a%3c         upperlim = 1%0a%3c         methodeval = r"'%25.4f\t' %25 LD_prime[0][1]"%0a%3c     elif method=='R2':%0a%3c         methodplot = "R2[0][1]"%0a%3c         upperlim = 1%0a%3c         methodeval = r"'%25.4f\t' %25 R2[0][1]"%0a%3c     else:%0a%3c         methodplot = "LD[0][1]"%0a%3c         upperlim = 0.25%0a%3c         methodeval = r"'%25.4f\t' %25 LD[0][1]"%0a%3c %0a%3c     if useRPy:%0a%3c         print saveFigure%0a%3c         plotter = varPlotter(methodplot, %0a%3c             ylim = [0, upperlim], saveAs=saveFigure,%0a%3c             update = gen - 1, ylab=method,%0a%3c             main="Decay of Linkage Disequilibrium r=%25f" %25 recRate)%0a%3c     else:%0a%3c         plotter = noneOp()%0a%3c %0a%3c     simu.evolve(%0a%3c         # everyone will have the same genotype: 01/10%0a%3c         preOps = [initByValue([0,1,1,0])],%0a%3c         ops = [%0a%3c             recombinator(rate = recRate),%0a%3c             stat(alleleFreq=[0], LD=[0, 1]),%0a%3c             pyEval(methodeval),%0a%3c             pyOutput('\n', rep=-1),%0a%3c             plotter%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a%3c =]%0a%3c %0a%3c Using option @@--saveFigure=decay.png@@, this script will produce figures such as%0a%3c %0a%3c %25width=600%25 Attach:decay_49.png%0a
host:1243551198=127.0.0.1
