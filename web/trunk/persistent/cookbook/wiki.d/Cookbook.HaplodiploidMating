version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.5) Gecko/2008120908 Red Hat/3.0.5-1.el5_2 Firefox/3.0.5
author=
charset=ISO-8859-1
csum=
ctime=1232490152
host=127.0.0.1
name=Cookbook.HaplodiploidMating
rev=1
targets=
text=(:title Recombination in haplodiploid populations:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:haplodiploid.py | http://simupop.sourceforge.net/images/download.jpg]]|haplodiploid.py%0a%0aThis script demonstrate how to construct a genotype transmitter (during mating operator) that can be used to handle recombination in a haplodiploid population.%0a%0aRecall that, in a haplodiploid population%0a%0a* Female individuals have two sets of homologous chromosomes.%0a%0a* Male individuals have one set of homologous chromosomes.%0a%0a* Female offspring get one set of chromosome from her mother (possibly  with recombination), and one set of chromosome from her father (no recombination).%0a%0a* Male offspring et on set of chromosome from his mother (possibly with recombination).%0a%0aThis is implemented in the following Python during-mating operator:%0a%0a=python [=%0aclass haplodiploidRecombinator(pyOperator):%0a    def __init__(self, intensity, rate, loci, convMode, *args, **kwargs):%0a        '''%0a        Create an instance of a Python operator, which will call%0a        ``self.transmitGenotype`` to create offspring. For performance%0a        considerations, this example uses two existing operators, namely%0a        ``recombinator`` and ``genoTransmitter`` to recombine and copy%0a        genotype. It is of course possible to use functions such as%0a        ``individual::setGenotype()`` directly if no existing operator%0a        fits your need.%0a        '''%0a        # This operator is used to recombine maternal chromosomes%0a        self.recombinator = recombinator(intensity, rate, loci, convMode)%0a        # this operator is used to copy paternal chromosomes%0a        self.copier = genoTransmitter()%0a        self.initialized = False%0a        # With no *param* and stage=DuringMating, this operator expects a function%0a        # in the form of ``(pop, off, dad, mom)``. If *param* is given, the%0a        # function should have the form ``(pop, off, dad, mom, param)``. If%0a        # *offspringOnly* is set to ``True``, the function can be simplied%0a        # to ``(off)`` or ``(off, param)``.%0a        pyOperator.__init__(self, func=self.transmitGenotype,%0a            stage=DuringMating, formOffGenotype=True, *args, **kwargs)%0a%0a    def transmitGenotype(self, pop, off, dad, mom):%0a        # Recombinator and copier needs to be initialized. Basically, they%0a        # cache some population properties to speed up genotype transmission.%0a        if not self.initialized:%0a            self.recombinator.initialize(pop)%0a            self.copier.initialize(pop)%0a            self.initialized = True%0a        # Form the first homologous copy of offspring.%0a        self.recombinator.transmitGenotype(mom, off, 0)%0a        # If the offspring is male, copy the second homologous copy from%0a        # her father. Male individuals only have one homologous set.%0a        if off.sex() == Female:%0a            self.copier.copyChromosomes(dad, 0, off, 1)%0a        return True%0a=]%0a%0aA mating scheme is defined as follows:%0a%0a=python [=%0adef haplodiploidRecMating(replacement=True, intensity=-1, rate=[], loci=[],%0a        convMode=NoConversion, numOffspring = 1., sexMode = RandomSex,%0a        ops = [], subPopSize = [], subPop = (), weight = 0):%0a    '''%0a    Return a mating scheme that uses random parents chooser and a customized%0a    during mating operator. A large number of parameters are provided to support%0a    number of offspring, sex-specification and population size changes. If none%0a    of these is needed, and you do not need a fancy recombinator, this function%0a    can be simplied to:%0a%0a    def haplodiploidRecMating(rate):%0a        return homoMating(%0a            chooser = randomParentsChooser(False),%0a            generator = offspringGenerator(%0a                ops = [haplodiploidRecombinator(rate=rate)]%0a            )%0a        )%0a    '''%0a    return homoMating(%0a        chooser = randomParentsChooser(replacement),%0a        generator = offspringGenerator(%0a            [haplodiploidRecombinator(intensity, rate, loci, convMode)],%0a            numOffspring, sexMode),%0a        subPopSize = subPopSize,%0a        subPop = subPop,%0a        weight = weight)%0a=]%0a%0aAnd an evolutionary process that makes use of such a mating scheme%0a%0a=python [=%0adef simuHaplodiploid(N, numMito=3, gen=10):%0a    '''%0a    The default genotype transmitter (haplodiploidGenoTransmitter used in%0a    mating cheme haplodiploidMaiting) does not support recombination.%0a    We cannot use a recombinator directly because it will also recombine%0a    maternal chromosomes. This example defines a Python during mating%0a    operator that actually uses a recombinator to recombine maternal%0a    chromosomes, and then a genoTransmitter to copy paternal chromosomes.%0a    '''%0a    pop = population(N, ploidy=Haplodiploid, loci=[20]*2,%0a        # record indexes of parents for verification purpose%0a        ancGen=1, infoFields=['father_idx', 'mother_idx'])%0a%0a    simu = simulator(pop, haplodiploidRecMating(rate=0.1))%0a%0a    simu.evolve(%0a        preOps=[%0a            # initialize alleles 0, 1, 2, 3 with different frequencies%0a            initByFreq([0.4] + [0.2]*3),%0a        ],%0a        ops=[%0a            parentsTagger(),%0a            dumper(structure=False),%0a        ],%0a        gen = gen%0a    )%0a    return simu.extract(0)%0a=]%0a%0aA possible output from this evolutionary process is%0a%0a%25define=box block bgcolor=#ddddff border="1px blue"%25%0a%0a%25box%25 [@%0aSubpopulation 0 (unnamed):%0a   0: MU 00120212010013211123 33003123030303201020 | ____________________ ____________________ |  9 3%0a   1: FU 22233212010013211033 01003123030303201002 | 20002010320030301002 30030021133211001113 |  5 3%0a   2: FU 00310232201103033000 00032103001203103020 | 00003100331001033002 30230200113331320030 |  4 1%0a   3: MU 00310232201103032000 01231103010103303021 | ____________________ ____________________ |  8 1%0a   4: FU 22233011331013211123 01003123030303201020 | 22010033023001203010 32132203031200003313 |  2 3%0a   5: FU 01033012330020032010 00032120010103132120 | 22010033023001203010 32132203031200003313 |  2 1%0a   6: MU 02233212010013211123 01003123030303201002 | ____________________ ____________________ |  6 3%0a   7: FU 02220212031220111030 33120123030303201020 | 00003100331001033002 30230200113331320030 |  4 3%0a   8: FU 00310212201120033000 01231320010103132120 | 00311103020110213030 30001033001002233012 |  7 1%0a   9: MU 22233011310010111033 33120102130323320002 | ____________________ ____________________ |  0 3%0aEnd of individual genotype.%0a%0aGenotype of individuals in the present generation:%0aSubpopulation 0 (unnamed):%0a   0: MU 20033210320030301002 30033123030303001113 | ____________________ ____________________ |  0 1%0a   1: FU 02220210331001033000 33120123030303200030 | 00310232201103032000 01231103010103303021 |  3 7%0a   2: MU 00020212031001033002 30120123030303200030 | ____________________ ____________________ |  6 7%0a   3: FU 00311103020110033000 01231323001002233122 | 02233212010013211123 01003123030303201002 |  6 8%0a   4: FU 00310232201103033000 30030200113203120020 | 00120212010013211123 33003123030303201020 |  0 2%0a   5: MU 00003100201103033000 30032103001203103020 | ____________________ ____________________ |  3 2%0a   6: FU 00010232201103033002 00230200113333103020 | 22233011310010111033 33120102130323320002 |  9 2%0a   7: MU 22010033023013203010 01003123030303201020 | ____________________ ____________________ |  0 4%0a   8: MU 22233010320030301002 00033121133211001113 | ____________________ ____________________ |  3 1%0a   9: FU 00310232201103033002 30232100113303103020 | 00310232201103032000 01231103010103303021 |  3 2%0aEnd of individual genotype.%0a%0a@]%0a
time=1232490152
title=Recombination in haplodiploid populations
author:1232490152=
diff:1232490152:1232490152:=1,155d0%0a%3c (:title Recombination in haplodiploid populations:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:haplodiploid.py | http://simupop.sourceforge.net/images/download.jpg]]|haplodiploid.py%0a%3c %0a%3c This script demonstrate how to construct a genotype transmitter (during mating operator) that can be used to handle recombination in a haplodiploid population.%0a%3c %0a%3c Recall that, in a haplodiploid population%0a%3c %0a%3c * Female individuals have two sets of homologous chromosomes.%0a%3c %0a%3c * Male individuals have one set of homologous chromosomes.%0a%3c %0a%3c * Female offspring get one set of chromosome from her mother (possibly  with recombination), and one set of chromosome from her father (no recombination).%0a%3c %0a%3c * Male offspring et on set of chromosome from his mother (possibly with recombination).%0a%3c %0a%3c This is implemented in the following Python during-mating operator:%0a%3c %0a%3c =python [=%0a%3c class haplodiploidRecombinator(pyOperator):%0a%3c     def __init__(self, intensity, rate, loci, convMode, *args, **kwargs):%0a%3c         '''%0a%3c         Create an instance of a Python operator, which will call%0a%3c         ``self.transmitGenotype`` to create offspring. For performance%0a%3c         considerations, this example uses two existing operators, namely%0a%3c         ``recombinator`` and ``genoTransmitter`` to recombine and copy%0a%3c         genotype. It is of course possible to use functions such as%0a%3c         ``individual::setGenotype()`` directly if no existing operator%0a%3c         fits your need.%0a%3c         '''%0a%3c         # This operator is used to recombine maternal chromosomes%0a%3c         self.recombinator = recombinator(intensity, rate, loci, convMode)%0a%3c         # this operator is used to copy paternal chromosomes%0a%3c         self.copier = genoTransmitter()%0a%3c         self.initialized = False%0a%3c         # With no *param* and stage=DuringMating, this operator expects a function%0a%3c         # in the form of ``(pop, off, dad, mom)``. If *param* is given, the%0a%3c         # function should have the form ``(pop, off, dad, mom, param)``. If%0a%3c         # *offspringOnly* is set to ``True``, the function can be simplied%0a%3c         # to ``(off)`` or ``(off, param)``.%0a%3c         pyOperator.__init__(self, func=self.transmitGenotype,%0a%3c             stage=DuringMating, formOffGenotype=True, *args, **kwargs)%0a%3c %0a%3c     def transmitGenotype(self, pop, off, dad, mom):%0a%3c         # Recombinator and copier needs to be initialized. Basically, they%0a%3c         # cache some population properties to speed up genotype transmission.%0a%3c         if not self.initialized:%0a%3c             self.recombinator.initialize(pop)%0a%3c             self.copier.initialize(pop)%0a%3c             self.initialized = True%0a%3c         # Form the first homologous copy of offspring.%0a%3c         self.recombinator.transmitGenotype(mom, off, 0)%0a%3c         # If the offspring is male, copy the second homologous copy from%0a%3c         # her father. Male individuals only have one homologous set.%0a%3c         if off.sex() == Female:%0a%3c             self.copier.copyChromosomes(dad, 0, off, 1)%0a%3c         return True%0a%3c =]%0a%3c %0a%3c A mating scheme is defined as follows:%0a%3c %0a%3c =python [=%0a%3c def haplodiploidRecMating(replacement=True, intensity=-1, rate=[], loci=[],%0a%3c         convMode=NoConversion, numOffspring = 1., sexMode = RandomSex,%0a%3c         ops = [], subPopSize = [], subPop = (), weight = 0):%0a%3c     '''%0a%3c     Return a mating scheme that uses random parents chooser and a customized%0a%3c     during mating operator. A large number of parameters are provided to support%0a%3c     number of offspring, sex-specification and population size changes. If none%0a%3c     of these is needed, and you do not need a fancy recombinator, this function%0a%3c     can be simplied to:%0a%3c %0a%3c     def haplodiploidRecMating(rate):%0a%3c         return homoMating(%0a%3c             chooser = randomParentsChooser(False),%0a%3c             generator = offspringGenerator(%0a%3c                 ops = [haplodiploidRecombinator(rate=rate)]%0a%3c             )%0a%3c         )%0a%3c     '''%0a%3c     return homoMating(%0a%3c         chooser = randomParentsChooser(replacement),%0a%3c         generator = offspringGenerator(%0a%3c             [haplodiploidRecombinator(intensity, rate, loci, convMode)],%0a%3c             numOffspring, sexMode),%0a%3c         subPopSize = subPopSize,%0a%3c         subPop = subPop,%0a%3c         weight = weight)%0a%3c =]%0a%3c %0a%3c And an evolutionary process that makes use of such a mating scheme%0a%3c %0a%3c =python [=%0a%3c def simuHaplodiploid(N, numMito=3, gen=10):%0a%3c     '''%0a%3c     The default genotype transmitter (haplodiploidGenoTransmitter used in%0a%3c     mating cheme haplodiploidMaiting) does not support recombination.%0a%3c     We cannot use a recombinator directly because it will also recombine%0a%3c     maternal chromosomes. This example defines a Python during mating%0a%3c     operator that actually uses a recombinator to recombine maternal%0a%3c     chromosomes, and then a genoTransmitter to copy paternal chromosomes.%0a%3c     '''%0a%3c     pop = population(N, ploidy=Haplodiploid, loci=[20]*2,%0a%3c         # record indexes of parents for verification purpose%0a%3c         ancGen=1, infoFields=['father_idx', 'mother_idx'])%0a%3c %0a%3c     simu = simulator(pop, haplodiploidRecMating(rate=0.1))%0a%3c %0a%3c     simu.evolve(%0a%3c         preOps=[%0a%3c             # initialize alleles 0, 1, 2, 3 with different frequencies%0a%3c             initByFreq([0.4] + [0.2]*3),%0a%3c         ],%0a%3c         ops=[%0a%3c             parentsTagger(),%0a%3c             dumper(structure=False),%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a%3c     return simu.extract(0)%0a%3c =]%0a%3c %0a%3c A possible output from this evolutionary process is%0a%3c %0a%3c %25define=box block bgcolor=#ddddff border="1px blue"%25%0a%3c %0a%3c %25box%25 [@%0a%3c Subpopulation 0 (unnamed):%0a%3c    0: MU 00120212010013211123 33003123030303201020 | ____________________ ____________________ |  9 3%0a%3c    1: FU 22233212010013211033 01003123030303201002 | 20002010320030301002 30030021133211001113 |  5 3%0a%3c    2: FU 00310232201103033000 00032103001203103020 | 00003100331001033002 30230200113331320030 |  4 1%0a%3c    3: MU 00310232201103032000 01231103010103303021 | ____________________ ____________________ |  8 1%0a%3c    4: FU 22233011331013211123 01003123030303201020 | 22010033023001203010 32132203031200003313 |  2 3%0a%3c    5: FU 01033012330020032010 00032120010103132120 | 22010033023001203010 32132203031200003313 |  2 1%0a%3c    6: MU 02233212010013211123 01003123030303201002 | ____________________ ____________________ |  6 3%0a%3c    7: FU 02220212031220111030 33120123030303201020 | 00003100331001033002 30230200113331320030 |  4 3%0a%3c    8: FU 00310212201120033000 01231320010103132120 | 00311103020110213030 30001033001002233012 |  7 1%0a%3c    9: MU 22233011310010111033 33120102130323320002 | ____________________ ____________________ |  0 3%0a%3c End of individual genotype.%0a%3c %0a%3c Genotype of individuals in the present generation:%0a%3c Subpopulation 0 (unnamed):%0a%3c    0: MU 20033210320030301002 30033123030303001113 | ____________________ ____________________ |  0 1%0a%3c    1: FU 02220210331001033000 33120123030303200030 | 00310232201103032000 01231103010103303021 |  3 7%0a%3c    2: MU 00020212031001033002 30120123030303200030 | ____________________ ____________________ |  6 7%0a%3c    3: FU 00311103020110033000 01231323001002233122 | 02233212010013211123 01003123030303201002 |  6 8%0a%3c    4: FU 00310232201103033000 30030200113203120020 | 00120212010013211123 33003123030303201020 |  0 2%0a%3c    5: MU 00003100201103033000 30032103001203103020 | ____________________ ____________________ |  3 2%0a%3c    6: FU 00010232201103033002 00230200113333103020 | 22233011310010111033 33120102130323320002 |  9 2%0a%3c    7: MU 22010033023013203010 01003123030303201020 | ____________________ ____________________ |  0 4%0a%3c    8: MU 22233010320030301002 00033121133211001113 | ____________________ ____________________ |  3 1%0a%3c    9: FU 00310232201103033002 30232100113303103020 | 00310232201103032000 01231103010103303021 |  3 2%0a%3c End of individual genotype.%0a%3c %0a%3c @]%0a
host:1232490152=127.0.0.1
