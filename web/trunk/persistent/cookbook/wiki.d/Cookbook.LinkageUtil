version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; GTB6; QQDownload 1.7; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30618; MAXTHON 2.0)
author=
charset=ISO-8859-1
csum=
ctime=1245946573
host=127.0.0.1
name=Cookbook.LinkageUtil
rev=10
targets=
text=(:title Export LINKAGE files:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:linkageUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|linkageUtil.py%0a%0a%25red%25 [+++Page and script currently under construction, please refer later.+++]%0a%0aThis function allows you to export your simulated populations into LINKAGE readable input files format. %0a%0aLINKAGE is a package with a series of programs for maximum likelihood estimation of recombination rates, calculation of lod score tables, and analysis of genetic risks. %0a%0aLinkage format is one of the oldest and most widely used format for genetic linkage studies. This format was designed for linkage studies of families and has many unneeded fields. The following functions try to fill these fields with reasonable default values. In most cases, you can specify values using additional keyword arguments.%0a%0aLinkage format consists of two files, a @@.dat@@ file and a @@.ped@@ file. The latter is usually given as a simplified @@.pre@@ file which can be converted to a @@.ped@@ file using program @@makeped@@. %0a%0aDescription of Loci (DATAFILE) %0a The information in this file is divided into four parts:%0a  1. general information on loci and locus order; %0a  2. description of loci; %0a  3. information on recombination; %0a  4. program-specific information. %0a%0aPedigree Information (PEDFILE)%0a Input of this file must contain the following information for each individual: %0a  * a pedigree number %0a  * an individual identification number, or id%0a  * father's id number %0a  * mother's id number %0a  * first offspring id number %0a  * next paternal sibling id number %0a  * next maternal sibling id number %0a  * sex %0a  * "proband status" %0a%0aPlease refer to the [[http://linkage.rockefeller.edu/soft/linkage/ | %25blue%25 Linkage documentation]] %25%25for a detailed description of this format.%0a%0a%0a%0aUsing the following function,%0a %0a=python [=%0adef SaveLinkage(pop, output='', loci=[], shift=1, combine=None,%0a        fields = [], recombination=0.00001, penetrance=[0,0.25,0.5],%0a        affectionCode=['1', '2'],  pre=True, daf=0.001):%0a    """%0a    save population in Linkage format. Currently only%0a    support affected sibpairs sampled with affectedSibpairSample%0a    operator.%0a%0a    pop%0a        population to be saved. Must have ancestralDepth 1.%0a        paired individuals are sibs. Parental population are corresponding%0a        parents. If pop is a filename, it will be loaded.%0a    output%0a        Output.dat and output.ped will be the data and pedigree file.%0a        You may need to rename them to be analyzed by LINKAGE. This allows%0a        saving multiple files.%0a    affectionCode%0a        default to '1': unaffected, '2': affected%0a    pre%0a        True. pedigree format to be fed to makeped. Non-pre format it is likely to%0a        be wrong now for non-sibpair families.%0a    Note%0a        the first child is always the proband.%0a    """%0a    if type(pop) == type(''):%0a        pop = LoadPopulation(pop)%0a    if output != '':%0a        file = output%0a    else:%0a        raise exceptions.ValueError, "Please specify output"%0a    # open data file and pedigree file to write.%0a    try:%0a        datOut = open(file + ".dat", "w")%0a        pedOut = open(file + ".ped", "w")%0a    except exceptions.IOError:%0a        raise exceptions.IOError, "Can not open file " + file + ".dat/.ped to write."%0a    #%0a    if loci == []:%0a        loci = range(pop.totNumLoci())%0a    datOut.write( '''%25d 0 0 5 %3c%3c nlocus, risklocus, sexlink, nprogram%0a0 0 0 0 %3c%3c mutsys, mutmale, mutfemale, disequil%0a'''    %25 (len(loci)+1) )%0a    # order of loci, allegro does not welcome comments after this line.%0a    # we need one more than the number of loci (including disease marker)%0a    datOut.write( ' '.join( [str(m+1) for m in range(len(loci) + 1)]) + "\n")%0a    # describe affected status%0a    datOut.write( "1 2 %3c%3c affection status code, number of alleles\n")%0a    datOut.write( "%25f %25f %3c%3c gene frequency\n" %25 ( 1-daf, daf) )%0a    datOut.write( "1 %3c%3c number of factors\n")%0a    datOut.write( "%25f %25f %25f %3c%3c penetrance\n" %25 tuple(penetrance) )%0a    # describe each locus%0a    Stat(pop, alleleFreq=loci)%0a    af = pop.dvars().alleleFreq%0a    for marker in loci:%0a        # now, 3 for numbered alleles%0a        numAllele = len(af[marker])%0a        print >> datOut, '3 %25d %3c%3c %25s' %25 (numAllele, pop.locusName(marker))%0a        datOut.write( ''.join(['%25.6f ' %25 af[marker][ale] for ale in range(numAllele)]) + ' %3c%3c gene frequencies\n' )%0a    # sex-difference%0a    # interference%0a    datOut.write('0 0 %3c%3c sex difference, interference\n')%0a    # recombination%0a    if type(recombination) in [type([]), type(())]:%0a        datOut.write( ' '.join(['%25f '%25 x for x in recombination]) + ' %3c%3c recombination rates \n ')%0a    else:%0a        datOut.write( ''.join(['%25f '%25recombination]*len(loci)) + ' %3c%3c recombination rates \n ')%0a    # I do not know what they are%0a    datOut.write( "1 0.1 0.1\n")%0a    # done!%0a    datOut.close()%0a    # write pedigree file (affected sibpairs)%0a    # sex: in linkage, male is 1, female is 2%0a    sexCode = {Male:1, Female:2}%0a    affectedCode = {False: affectionCode[0], True: affectionCode[1]}%0a    # alleles string, since simuPOP allele starts from 0, add 1 to avoid%0a    # being treated as missing data.%0a    pldy = pop.ploidy()%0a    def writeInd(ind, famID, id, fa, mo):%0a        if pre:%0a            print >> pedOut, '%25d %25d %25d %25d %25s %25s' %25 (famID, id, fa, mo, sexCode[ind.sex()], affectedCode[ind.affected()]),%0a        else:%0a            if fa == 0:%0a                print >> pedOut, '%25d %25d %25d 3 0 0 %25d %25s 0 %25s' %25 (famID, id, fa, mo, sexCode[ind.sex()], affectedCode[ind.affected()]),%0a            else:%0a                print >> pedOut, '%25d %25d %25d 0 4 4 %25d %25s 1 %25s' %25 (famID, id, fa, mo, sexCode[ind.sex()], affectedCode[ind.affected()]),%0a        for marker in loci:%0a            if combine is None:%0a                for p in range(pldy):%0a                    print >> pedOut, " %25d" %25 (ind.allele(marker, p) + shift),%0a            else:%0a                print >> pedOut, " %25d" %25 combine([ind.allele(marker, p) for p in range(pldy)]),%0a        print >> pedOut%0a    #%0a    # get unique pedgree id numbers%0a    from sets import Set%0a    peds = Set(pop.indInfo('pedindex'))%0a    # do not count peds%0a    peds.discard(-1)%0a    if len(peds) == 0:%0a        print 'Warning: no valid pedigree, please check the pedindex field of your population'%0a    #%0a    newPedIdx = 1%0a    for ped in peds:%0a        id = 1%0a        pastmap = {-1:0}%0a        # go from generation 2, 1, 0 (for example)%0a        for anc in range(pop.ancestralGens(), -1, -1):%0a            newmap = {-1:0}%0a            pop.useAncestralGen(anc)%0a            # find all individual in this pedigree%0a            for i in range(pop.popSize()):%0a                ind = pop.individual(i)%0a                if ind.info('pedindex') == ped:%0a                    dad = int(ind.info('father_idx'))%0a                    mom = int(ind.info('mother_idx'))%0a                    if dad == mom and dad != -1:%0a                        print "Something wrong with pedigree %25d, father and mother idx are the same: %25s" %25 \%0a                            (ped, dad)%0a                    writeInd(ind, newPedIdx, id, pastmap.setdefault(dad, 0), pastmap.setdefault(mom, 0))%0a                    newmap[i] = id%0a                    id += 1%0a            pastmap = newmap%0a        newPedIdx += 1%0a    pedOut.close()%0a=]%0a%0aif we define the population as %0a=python [=%0asimu = simulator(%0a    population(size=[10000,10000], ploidy=2, loci=[2, 3],%0a    lociNames=['loc1-1','loc1-2','loc2-1','loc2-2','loc2-3'],%0a    ancGen=3, infoFields=['fitness', 'father_idx', 'mother_idx', 'migrate_to']),%0a    randomMating(numOffspring=(UniformDistribution, 2, 8)))%0a    simu.evolve(%0a    [%0a        stat( alleleFreq=[0,1], genoFreq=[0,1]),%0a        migrator(rate=[[0.1,0.1],[0.1,0.1]]),%0a        mapPenetrance(loci=0, penetrance={'0-0':0,'0-1':.7,'1-1':1}),%0a        parentsTagger(),%0a    ],%0a    preOps=[%0a            initByFreq(alleleFreq=[.2, .8], loci=[0]),%0a            initByFreq(alleleFreq=[.2]*5, loci=range(1, simu.population(0).totNumLoci()))%0a    ],%0a    gen = 10%0a)%0alargepop = simu.extract(0)%0a(pedigree,) = LargePedigreeSample(largepop, size=1, minPedSize=3)%0a    =]%0awe may get the output file%0a=python [=%0a/* LINKAGE DATAFILE */%0a%0a6 0 0 5 %3c%3c nlocus, risklocus, sexlink, nprogram%0a0 0 0 0 %3c%3c mutsys, mutmale, mutfemale, disequil%0a1 2 3 4 5 6%0a1 2 %3c%3c affection status code, number of alleles%0a0.999000 0.001000 %3c%3c gene frequency%0a1 %3c%3c number of factors%0a0.000000 0.250000 0.500000 %3c%3c penetrance%0a3 2 %3c%3c loc1-1%0a0.166667 0.833333  %3c%3c gene frequencies%0a3 4 %3c%3c loc1-2%0a0.100000 0.133333 0.000000 0.633333  %3c%3c gene frequencies%0a3 5 %3c%3c loc2-1%0a0.500000 0.166667 0.200000 0.033333 0.100000  %3c%3c gene frequencies%0a3 5 %3c%3c loc2-2%0a0.300000 0.266667 0.066667 0.100000 0.266667  %3c%3c gene frequencies%0a3 4 %3c%3c loc2-3%0a0.000000 0.400000 0.100000 0.300000  %3c%3c gene frequencies%0a0 0 %3c%3c sex difference, interference%0a0.000010 0.000010 0.000010 0.000010 0.000010  %3c%3c recombination rates %0a 1 0.1 0.1%0a%0a/* LINKAGE PEDFILE */%0a1 1 0 0 1 2  2  2  5  4  1  2  1  2  2  5%0a1 2 0 0 2 1  1  2  1  2  1  2  3  5  4  4%0a1 3 0 0 1 2  2  2  2  4  1  4  2  3  5  5%0a1 4 0 0 2 2  2  2  4  4  5  1  2  5  3  5%0a1 5 0 0 1 1  2  1  5  4  3  3  2  4  2  4%0a1 6 1 2 2 2  1  2  1  4  2  2  5  2  4  5%0a1 7 1 2 1 2  2  2  2  4  2  1  5  1  4  2%0a1 8 1 2 1 2  2  2  2  5  1  2  3  2  4  5%0a1 9 1 2 2 2  2  2  2  5  1  2  3  2  4  5%0a1 10 1 2 2 2  1  2  1  4  1  1  3  1  4  2%0a1 11 7 4 1 2  2  2  4  2  5  2  2  5  3  4%0a1 12 7 4 2 2  2  2  4  4  1  1  5  1  5  2%0a1 13 7 4 2 2  2  2  4  2  1  1  5  1  5  2%0a1 14 7 4 2 2  2  2  4  4  1  1  5  1  5  2%0a1 15 7 4 2 2  2  2  4  4  5  2  2  5  3  4%0a1 16 7 4 2 2  2  2  4  2  5  1  2  1  3  2%0a1 17 5 10 1 1  2  1  4  4  1  3  3  2  4  2%0a1 18 5 10 1 2  1  2  1  5  1  3  1  2  2  2%0a1 19 5 10 1 1  1  1  1  4  1  3  1  4  2  4%0a1 20 5 10 1 2  1  2  1  5  1  3  1  2  2  2%0a1 21 5 10 2 2  2  2  4  5  1  3  1  4  2  4%0a1 22 5 10 1 2  2  2  4  5  1  3  1  4  2  4%0a1 23 3 6 2 2  2  2  4  4  2  1  5  2  4  5%0a1 24 3 6 1 2  2  2  4  4  2  4  5  3  4  5%0a1 25 3 6 2 2  2  2  4  2  2  1  5  2  4  5%0a=]%0a%0a%0a%0a%0a
time=1250666411
title=Export LINKAGE files
author:1250666411=
diff:1250666411:1250666377:=216,240c216,237%0a%3c 1 1 0 0 1 2  2  2  5  4  1  2  1  2  2  5%0a%3c 1 2 0 0 2 1  1  2  1  2  1  2  3  5  4  4%0a%3c 1 3 0 0 1 2  2  2  2  4  1  4  2  3  5  5%0a%3c 1 4 0 0 2 2  2  2  4  4  5  1  2  5  3  5%0a%3c 1 5 0 0 1 1  2  1  5  4  3  3  2  4  2  4%0a%3c 1 6 1 2 2 2  1  2  1  4  2  2  5  2  4  5%0a%3c 1 7 1 2 1 2  2  2  2  4  2  1  5  1  4  2%0a%3c 1 8 1 2 1 2  2  2  2  5  1  2  3  2  4  5%0a%3c 1 9 1 2 2 2  2  2  2  5  1  2  3  2  4  5%0a%3c 1 10 1 2 2 2  1  2  1  4  1  1  3  1  4  2%0a%3c 1 11 7 4 1 2  2  2  4  2  5  2  2  5  3  4%0a%3c 1 12 7 4 2 2  2  2  4  4  1  1  5  1  5  2%0a%3c 1 13 7 4 2 2  2  2  4  2  1  1  5  1  5  2%0a%3c 1 14 7 4 2 2  2  2  4  4  1  1  5  1  5  2%0a%3c 1 15 7 4 2 2  2  2  4  4  5  2  2  5  3  4%0a%3c 1 16 7 4 2 2  2  2  4  2  5  1  2  1  3  2%0a%3c 1 17 5 10 1 1  2  1  4  4  1  3  3  2  4  2%0a%3c 1 18 5 10 1 2  1  2  1  5  1  3  1  2  2  2%0a%3c 1 19 5 10 1 1  1  1  1  4  1  3  1  4  2  4%0a%3c 1 20 5 10 1 2  1  2  1  5  1  3  1  2  2  2%0a%3c 1 21 5 10 2 2  2  2  4  5  1  3  1  4  2  4%0a%3c 1 22 5 10 1 2  2  2  4  5  1  3  1  4  2  4%0a%3c 1 23 3 6 2 2  2  2  4  4  2  1  5  2  4  5%0a%3c 1 24 3 6 1 2  2  2  4  4  2  4  5  3  4  5%0a%3c 1 25 3 6 2 2  2  2  4  2  2  1  5  2  4  5%0a---%0a> 1 1 0 0 2 1  2  1  4  2  4  3  1  4  4  3%0a> 1 2 0 0 1 2  2  2  1  3  3  2  4  3  5  4%0a> 1 3 0 0 2 1  1  1  2  3  5  3  1  4  5  2%0a> 1 4 2 1 1 2  2  2  4  3  4  3  1  4  4  5%0a> 1 5 2 1 1 2  2  2  4  1  3  2  4  3  3  4%0a> 1 6 2 1 1 2  2  2  4  1  4  3  1  4  4  5%0a> 1 7 2 1 1 2  2  2  4  3  3  3  4  4  3  5%0a> 1 8 2 1 2 1  1  2  2  1  4  2  1  3  4  4%0a> 1 9 2 1 2 2  2  2  4  1  3  3  4  4  3  5%0a> 1 10 0 0 2 2  2  2  3  4  4  1  2  3  5  1%0a> 1 11 0 0 1 2  2  2  3  1  5  4  5  3  5  2%0a> 1 12 5 3 2 2  1  2  2  4  5  3  1  4  5  3%0a> 1 13 5 3 2 2  1  2  3  1  5  3  1  4  5  3%0a> 1 14 5 3 1 2  1  2  2  4  3  2  4  3  2  4%0a> 1 15 5 3 2 2  1  2  3  1  3  2  4  3  2  4%0a> 1 16 5 3 1 1  1  2  3  1  5  2  1  3  5  4%0a> 1 17 5 3 2 1  1  2  2  4  3  2  4  3  2  4%0a> 1 18 7 10 2 2  2  2  4  3  1  3  3  4  1  3%0a> 1 19 7 10 2 2  2  2  4  4  4  3  2  4  5  5%0a> 1 20 7 10 1 2  2  2  3  3  1  3  3  4  1  3%0a> 1 21 11 9 2 2  2  2  4  3  3  4  4  3  3  2%0a> 1 22 11 9 1 2  2  2  1  3  3  4  4  3  5  2%0a
host:1250666411=127.0.0.1
author:1250666377=
diff:1250666377:1250666262:=201,210c201,210%0a%3c 3 2 %3c%3c loc1-1%0a%3c 0.166667 0.833333  %3c%3c gene frequencies%0a%3c 3 4 %3c%3c loc1-2%0a%3c 0.100000 0.133333 0.000000 0.633333  %3c%3c gene frequencies%0a%3c 3 5 %3c%3c loc2-1%0a%3c 0.500000 0.166667 0.200000 0.033333 0.100000  %3c%3c gene frequencies%0a%3c 3 5 %3c%3c loc2-2%0a%3c 0.300000 0.266667 0.066667 0.100000 0.266667  %3c%3c gene frequencies%0a%3c 3 4 %3c%3c loc2-3%0a%3c 0.000000 0.400000 0.100000 0.300000  %3c%3c gene frequencies%0a---%0a> 3 2 %3c%3c %0a> 0.272727 0.727273  %3c%3c gene frequencies%0a> 3 4 %3c%3c %0a> 0.181818 0.136364 0.363636 0.318182  %3c%3c gene frequencies%0a> 3 5 %3c%3c %0a> 0.090909 0.181818 0.454545 0.136364 0.136364  %3c%3c gene frequencies%0a> 3 4 %3c%3c %0a> 0.136364 0.045455 0.363636 0.454545  %3c%3c gene frequencies%0a> 3 5 %3c%3c %0a> 0.090909 0.227273 0.227273 0.181818 0.272727  %3c%3c gene frequencies%0a
host:1250666377=127.0.0.1
author:1250666262=
diff:1250666262:1250666075:=169,188d168%0a%3c simu = simulator(%0a%3c     population(size=[10000,10000], ploidy=2, loci=[2, 3],%0a%3c     lociNames=['loc1-1','loc1-2','loc2-1','loc2-2','loc2-3'],%0a%3c     ancGen=3, infoFields=['fitness', 'father_idx', 'mother_idx', 'migrate_to']),%0a%3c     randomMating(numOffspring=(UniformDistribution, 2, 8)))%0a%3c     simu.evolve(%0a%3c     [%0a%3c         stat( alleleFreq=[0,1], genoFreq=[0,1]),%0a%3c         migrator(rate=[[0.1,0.1],[0.1,0.1]]),%0a%3c         mapPenetrance(loci=0, penetrance={'0-0':0,'0-1':.7,'1-1':1}),%0a%3c         parentsTagger(),%0a%3c     ],%0a%3c     preOps=[%0a%3c             initByFreq(alleleFreq=[.2, .8], loci=[0]),%0a%3c             initByFreq(alleleFreq=[.2]*5, loci=range(1, simu.population(0).totNumLoci()))%0a%3c     ],%0a%3c     gen = 10%0a%3c )%0a%3c largepop = simu.extract(0)%0a%3c (pedigree,) = LargePedigreeSample(largepop, size=1, minPedSize=3)%0a192,237c172%0a%3c /* LINKAGE DATAFILE */%0a%3c %0a%3c 6 0 0 5 %3c%3c nlocus, risklocus, sexlink, nprogram%0a%3c 0 0 0 0 %3c%3c mutsys, mutmale, mutfemale, disequil%0a%3c 1 2 3 4 5 6%0a%3c 1 2 %3c%3c affection status code, number of alleles%0a%3c 0.999000 0.001000 %3c%3c gene frequency%0a%3c 1 %3c%3c number of factors%0a%3c 0.000000 0.250000 0.500000 %3c%3c penetrance%0a%3c 3 2 %3c%3c %0a%3c 0.272727 0.727273  %3c%3c gene frequencies%0a%3c 3 4 %3c%3c %0a%3c 0.181818 0.136364 0.363636 0.318182  %3c%3c gene frequencies%0a%3c 3 5 %3c%3c %0a%3c 0.090909 0.181818 0.454545 0.136364 0.136364  %3c%3c gene frequencies%0a%3c 3 4 %3c%3c %0a%3c 0.136364 0.045455 0.363636 0.454545  %3c%3c gene frequencies%0a%3c 3 5 %3c%3c %0a%3c 0.090909 0.227273 0.227273 0.181818 0.272727  %3c%3c gene frequencies%0a%3c 0 0 %3c%3c sex difference, interference%0a%3c 0.000010 0.000010 0.000010 0.000010 0.000010  %3c%3c recombination rates %0a%3c  1 0.1 0.1%0a%3c %0a%3c /* LINKAGE PEDFILE */%0a%3c 1 1 0 0 2 1  2  1  4  2  4  3  1  4  4  3%0a%3c 1 2 0 0 1 2  2  2  1  3  3  2  4  3  5  4%0a%3c 1 3 0 0 2 1  1  1  2  3  5  3  1  4  5  2%0a%3c 1 4 2 1 1 2  2  2  4  3  4  3  1  4  4  5%0a%3c 1 5 2 1 1 2  2  2  4  1  3  2  4  3  3  4%0a%3c 1 6 2 1 1 2  2  2  4  1  4  3  1  4  4  5%0a%3c 1 7 2 1 1 2  2  2  4  3  3  3  4  4  3  5%0a%3c 1 8 2 1 2 1  1  2  2  1  4  2  1  3  4  4%0a%3c 1 9 2 1 2 2  2  2  4  1  3  3  4  4  3  5%0a%3c 1 10 0 0 2 2  2  2  3  4  4  1  2  3  5  1%0a%3c 1 11 0 0 1 2  2  2  3  1  5  4  5  3  5  2%0a%3c 1 12 5 3 2 2  1  2  2  4  5  3  1  4  5  3%0a%3c 1 13 5 3 2 2  1  2  3  1  5  3  1  4  5  3%0a%3c 1 14 5 3 1 2  1  2  2  4  3  2  4  3  2  4%0a%3c 1 15 5 3 2 2  1  2  3  1  3  2  4  3  2  4%0a%3c 1 16 5 3 1 1  1  2  3  1  5  2  1  3  5  4%0a%3c 1 17 5 3 2 1  1  2  2  4  3  2  4  3  2  4%0a%3c 1 18 7 10 2 2  2  2  4  3  1  3  3  4  1  3%0a%3c 1 19 7 10 2 2  2  2  4  4  4  3  2  4  5  5%0a%3c 1 20 7 10 1 2  2  2  3  3  1  3  3  4  1  3%0a%3c 1 21 11 9 2 2  2  2  4  3  3  4  4  3  3  2%0a%3c 1 22 11 9 1 2  2  2  1  3  3  4  4  3  5  2%0a---%0a> %0a
host:1250666262=127.0.0.1
author:1250666075=
diff:1250666075:1248278779:=41,164d40%0a%3c def SaveLinkage(pop, output='', loci=[], shift=1, combine=None,%0a%3c         fields = [], recombination=0.00001, penetrance=[0,0.25,0.5],%0a%3c         affectionCode=['1', '2'],  pre=True, daf=0.001):%0a%3c     """%0a%3c     save population in Linkage format. Currently only%0a%3c     support affected sibpairs sampled with affectedSibpairSample%0a%3c     operator.%0a%3c %0a%3c     pop%0a%3c         population to be saved. Must have ancestralDepth 1.%0a%3c         paired individuals are sibs. Parental population are corresponding%0a%3c         parents. If pop is a filename, it will be loaded.%0a%3c     output%0a%3c         Output.dat and output.ped will be the data and pedigree file.%0a%3c         You may need to rename them to be analyzed by LINKAGE. This allows%0a%3c         saving multiple files.%0a%3c     affectionCode%0a%3c         default to '1': unaffected, '2': affected%0a%3c     pre%0a%3c         True. pedigree format to be fed to makeped. Non-pre format it is likely to%0a%3c         be wrong now for non-sibpair families.%0a%3c     Note%0a%3c         the first child is always the proband.%0a%3c     """%0a%3c     if type(pop) == type(''):%0a%3c         pop = LoadPopulation(pop)%0a%3c     if output != '':%0a%3c         file = output%0a%3c     else:%0a%3c         raise exceptions.ValueError, "Please specify output"%0a%3c     # open data file and pedigree file to write.%0a%3c     try:%0a%3c         datOut = open(file + ".dat", "w")%0a%3c         pedOut = open(file + ".ped", "w")%0a%3c     except exceptions.IOError:%0a%3c         raise exceptions.IOError, "Can not open file " + file + ".dat/.ped to write."%0a%3c     #%0a%3c     if loci == []:%0a%3c         loci = range(pop.totNumLoci())%0a%3c     datOut.write( '''%25d 0 0 5 %3c%3c nlocus, risklocus, sexlink, nprogram%0a%3c 0 0 0 0 %3c%3c mutsys, mutmale, mutfemale, disequil%0a%3c '''    %25 (len(loci)+1) )%0a%3c     # order of loci, allegro does not welcome comments after this line.%0a%3c     # we need one more than the number of loci (including disease marker)%0a%3c     datOut.write( ' '.join( [str(m+1) for m in range(len(loci) + 1)]) + "\n")%0a%3c     # describe affected status%0a%3c     datOut.write( "1 2 %3c%3c affection status code, number of alleles\n")%0a%3c     datOut.write( "%25f %25f %3c%3c gene frequency\n" %25 ( 1-daf, daf) )%0a%3c     datOut.write( "1 %3c%3c number of factors\n")%0a%3c     datOut.write( "%25f %25f %25f %3c%3c penetrance\n" %25 tuple(penetrance) )%0a%3c     # describe each locus%0a%3c     Stat(pop, alleleFreq=loci)%0a%3c     af = pop.dvars().alleleFreq%0a%3c     for marker in loci:%0a%3c         # now, 3 for numbered alleles%0a%3c         numAllele = len(af[marker])%0a%3c         print >> datOut, '3 %25d %3c%3c %25s' %25 (numAllele, pop.locusName(marker))%0a%3c         datOut.write( ''.join(['%25.6f ' %25 af[marker][ale] for ale in range(numAllele)]) + ' %3c%3c gene frequencies\n' )%0a%3c     # sex-difference%0a%3c     # interference%0a%3c     datOut.write('0 0 %3c%3c sex difference, interference\n')%0a%3c     # recombination%0a%3c     if type(recombination) in [type([]), type(())]:%0a%3c         datOut.write( ' '.join(['%25f '%25 x for x in recombination]) + ' %3c%3c recombination rates \n ')%0a%3c     else:%0a%3c         datOut.write( ''.join(['%25f '%25recombination]*len(loci)) + ' %3c%3c recombination rates \n ')%0a%3c     # I do not know what they are%0a%3c     datOut.write( "1 0.1 0.1\n")%0a%3c     # done!%0a%3c     datOut.close()%0a%3c     # write pedigree file (affected sibpairs)%0a%3c     # sex: in linkage, male is 1, female is 2%0a%3c     sexCode = {Male:1, Female:2}%0a%3c     affectedCode = {False: affectionCode[0], True: affectionCode[1]}%0a%3c     # alleles string, since simuPOP allele starts from 0, add 1 to avoid%0a%3c     # being treated as missing data.%0a%3c     pldy = pop.ploidy()%0a%3c     def writeInd(ind, famID, id, fa, mo):%0a%3c         if pre:%0a%3c             print >> pedOut, '%25d %25d %25d %25d %25s %25s' %25 (famID, id, fa, mo, sexCode[ind.sex()], affectedCode[ind.affected()]),%0a%3c         else:%0a%3c             if fa == 0:%0a%3c                 print >> pedOut, '%25d %25d %25d 3 0 0 %25d %25s 0 %25s' %25 (famID, id, fa, mo, sexCode[ind.sex()], affectedCode[ind.affected()]),%0a%3c             else:%0a%3c                 print >> pedOut, '%25d %25d %25d 0 4 4 %25d %25s 1 %25s' %25 (famID, id, fa, mo, sexCode[ind.sex()], affectedCode[ind.affected()]),%0a%3c         for marker in loci:%0a%3c             if combine is None:%0a%3c                 for p in range(pldy):%0a%3c                     print >> pedOut, " %25d" %25 (ind.allele(marker, p) + shift),%0a%3c             else:%0a%3c                 print >> pedOut, " %25d" %25 combine([ind.allele(marker, p) for p in range(pldy)]),%0a%3c         print >> pedOut%0a%3c     #%0a%3c     # get unique pedgree id numbers%0a%3c     from sets import Set%0a%3c     peds = Set(pop.indInfo('pedindex'))%0a%3c     # do not count peds%0a%3c     peds.discard(-1)%0a%3c     if len(peds) == 0:%0a%3c         print 'Warning: no valid pedigree, please check the pedindex field of your population'%0a%3c     #%0a%3c     newPedIdx = 1%0a%3c     for ped in peds:%0a%3c         id = 1%0a%3c         pastmap = {-1:0}%0a%3c         # go from generation 2, 1, 0 (for example)%0a%3c         for anc in range(pop.ancestralGens(), -1, -1):%0a%3c             newmap = {-1:0}%0a%3c             pop.useAncestralGen(anc)%0a%3c             # find all individual in this pedigree%0a%3c             for i in range(pop.popSize()):%0a%3c                 ind = pop.individual(i)%0a%3c                 if ind.info('pedindex') == ped:%0a%3c                     dad = int(ind.info('father_idx'))%0a%3c                     mom = int(ind.info('mother_idx'))%0a%3c                     if dad == mom and dad != -1:%0a%3c                         print "Something wrong with pedigree %25d, father and mother idx are the same: %25s" %25 \%0a%3c                             (ped, dad)%0a%3c                     writeInd(ind, newPedIdx, id, pastmap.setdefault(dad, 0), pastmap.setdefault(mom, 0))%0a%3c                     newmap[i] = id%0a%3c                     id += 1%0a%3c             pastmap = newmap%0a%3c         newPedIdx += 1%0a%3c     pedOut.close()%0a
host:1250666075=127.0.0.1
author:1248278779=
diff:1248278779:1248197087:=5c5%0a%3c %25red%25 [+++Page and script currently under construction, please refer later.+++]%0a---%0a> %25red%25 [++Currently under construction, please refer later.++]%0a
host:1248278779=127.0.0.1
author:1248197087=
diff:1248197087:1248196878:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:linkageUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|linkageUtil.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:LinkageUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|LinkageUtil.py%0a
host:1248197087=127.0.0.1
author:1248196878=
diff:1248196878:1248196833:=
host:1248196878=127.0.0.1
author:1248196833=
diff:1248196833:1247641211:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:LinkageUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|LinkageUtil.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:ExportPOPGENE.py | http://simupop.sourceforge.net/images/download.jpg]]|ExportLINKAGE.py%0a
host:1248196833=127.0.0.1
author:1247641211=
diff:1247641211:1245946573:=1,53c1,2%0a%3c (:title Export LINKAGE files:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:ExportPOPGENE.py | http://simupop.sourceforge.net/images/download.jpg]]|ExportLINKAGE.py%0a%3c %0a%3c %25red%25 [++Currently under construction, please refer later.++]%0a%3c %0a%3c This function allows you to export your simulated populations into LINKAGE readable input files format. %0a%3c %0a%3c LINKAGE is a package with a series of programs for maximum likelihood estimation of recombination rates, calculation of lod score tables, and analysis of genetic risks. %0a%3c %0a%3c Linkage format is one of the oldest and most widely used format for genetic linkage studies. This format was designed for linkage studies of families and has many unneeded fields. The following functions try to fill these fields with reasonable default values. In most cases, you can specify values using additional keyword arguments.%0a%3c %0a%3c Linkage format consists of two files, a @@.dat@@ file and a @@.ped@@ file. The latter is usually given as a simplified @@.pre@@ file which can be converted to a @@.ped@@ file using program @@makeped@@. %0a%3c %0a%3c Description of Loci (DATAFILE) %0a%3c  The information in this file is divided into four parts:%0a%3c   1. general information on loci and locus order; %0a%3c   2. description of loci; %0a%3c   3. information on recombination; %0a%3c   4. program-specific information. %0a%3c %0a%3c Pedigree Information (PEDFILE)%0a%3c  Input of this file must contain the following information for each individual: %0a%3c   * a pedigree number %0a%3c   * an individual identification number, or id%0a%3c   * father's id number %0a%3c   * mother's id number %0a%3c   * first offspring id number %0a%3c   * next paternal sibling id number %0a%3c   * next maternal sibling id number %0a%3c   * sex %0a%3c   * "proband status" %0a%3c %0a%3c Please refer to the [[http://linkage.rockefeller.edu/soft/linkage/ | %25blue%25 Linkage documentation]] %25%25for a detailed description of this format.%0a%3c %0a%3c %0a%3c %0a%3c Using the following function,%0a%3c  %0a%3c =python [=%0a%3c =]%0a%3c %0a%3c if we define the population as %0a%3c =python [=%0a%3c     =]%0a%3c we may get the output file%0a%3c =python [=%0a%3c %0a%3c =]%0a%3c %0a%3c %0a%3c %0a%3c %0a---%0a> %0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:linkageUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|linkageUtil.py%0a\ No newline at end of file%0a
host:1247641211=127.0.0.1
author:1245946573=
diff:1245946573:1245946573:=1,2d0%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:linkageUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|linkageUtil.py%0a\ No newline at end of file%0a
host:1245946573=127.0.0.1
