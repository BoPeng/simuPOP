version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; GTB6; QQDownload 1.7; SLCC1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30618; MAXTHON 2.0)
author=
charset=ISO-8859-1
csum=
ctime=1245946713
host=127.0.0.1
name=Cookbook.MerlinUtil
rev=12
targets=
text=(:title Export MERLIN files in QTDT format:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:merlinUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|merlinUtil.py%0a%0a%25red%25 [+++Page and script currently under construction, please refer later.+++]%25%25%0a%0aThis function allows you to export your simulated populations into MERLIN readable files in QTDT format, which include a data file, a map file and a pedigree file.%0a%0aMERLIN performs common pedigree analyses. It uses sparse trees to represent gene flow in pedigrees and is one of the fastest pedigree analysis packages around. %0a%0aMERLIN Download: http://www.sph.umich.edu/csg/abecasis/Merlin/download/%0a%0aMERLIN Tutorial: http://www.sph.umich.edu/csg/abecasis/Merlin/tour/%0a%0aA MERLIN pedigree file consists all the information that is necessary to reconstruct individual relationships and can be summarized in five items: a family identifier, an individual identifier, a link to each parent (if available) and finally an indicator of each individual's sex. These key values constitute the first five columns of any pedigree file. Usually the five standard columns are followed by various types of genetic data, including phenotypes for discrete and quantitative traits and marker genotypes.%0a%0aA MERLIN data file is used to describe the pedigree file. It includes one row per data item in the pedigree file, indicating the data type (encoded as M - marker, A - affection status, T - Quantitative Trait and C - Covariate) and providing a one-word label for each item.%0a%0aA MERLIN map file provides required information on chromosomal location to analyze genetic markers. Using sex-average maps, this file has one line per marker with three columns, indicating chromosome, marker name and position (in centiMorgans). %0a%0aFor more detailed description of these MERLIN input files and some advanced features which require refined file formats, please refer to online MERLIN Tutorial/MERLIN Input Files: http://www.sph.umich.edu/csg/abecasis/Merlin/tour/input_files.html%0a%0aUsing the following function,%0a %0a=python [=%0adef SaveQTDT(pop, output='', loci=[], header=False,%0a    affectionCode=['U', 'A'], fields=[], combine=None, shift=1, **kwargs):%0a    """%0a    save population in Merlin/QTDT format. The population must have pedindex,%0a    father_idx and mother_idx information fields.%0a%0a    pop%0a        population to be saved. If pop is a filename, it will be loaded.%0a    output%0a        base filename.%0a    affectionCode%0a        code for unaffected and affected. '1', '2' are default,%0a        but 'U', and 'A' or others can be specified.%0a    loci%0a        loci to output%0a    header%0a        whether or not put head line in the ped file.%0a    fields%0a        information fields to output%0a    combine%0a        an optional function to combine two alleles of a diploid%0a        individual.%0a    shift%0a        if combine is not given, output two alleles directly, adding%0a        this value (default to 1).%0a    """%0a    if type(pop) == type(''):%0a        pop = LoadPopulation(pop)%0a    #%0a    if loci == []:%0a        loci = range(0, pop.totNumLoci())%0a    # write dat file%0a    if 'affection' in fields:%0a        outputAffection = True%0a        fields.remove('affection')%0a    else:%0a        outputAffection = False%0a    SaveMerlinDatFile(pop, output, loci, fields, outputAffection)%0a    # write map file%0a    SaveMerlinMapFile(pop, output, loci)%0a    # write ped file%0a    SaveMerlinPedFile(pop, output, loci, fields, header,%0a        outputAffection, affectionCode, combine, shift)%0a=]%0a%0aif we define the population in a simple way without infoFields or ancestral generations%0a=python [=%0a    pop = population(size=[2,3,4], loci=[1, 2])%0a    InitByFreq(pop, [.1, .2, .3, .4])%0a=]%0awe may get the output file%0a=python [=%0a/* MERLIN data file */%0aM	loc1-1%0aM	loc2-1%0aM	loc2-2%0a%0a/* MERLIN map file */%0aCHROMOSOME MARKER POSITION%0a1	loc1-1	1.000000%0a2	loc2-1	1.000000%0a2	loc2-2	2.000000%0a%0a/* MERLIN pedigree file */%0a1 1 0 0 2 4 3 2 3 4 3%0a1 2 0 0 2 4 2 2 4 4 4%0a1 3 0 0 2 4 2 3 4 1 4%0a1 4 0 0 1 3 3 3 4 4 4%0a1 5 0 0 2 2 4 4 3 3 4%0a1 6 0 0 2 3 3 3 4 2 1%0a1 7 0 0 2 1 3 1 3 3 3%0a1 8 0 0 2 2 3 4 2 4 3%0a1 9 0 0 1 4 3 2 2 2 2%0a=]%0a%0aif we define the population with required infoFields and several evolved generations%0a=python [=%0a    =]%0awe may get the output file%0a=python [=%0a=]%0a%0a%0a
time=1248278983
title=Export MERLIN files in QTDT format
author:1248278983=
diff:1248278983:1246906702:=5c5%0a%3c %25red%25 [+++Page and script currently under construction, please refer later.+++]%25%25%0a---%0a> %25red%25 [++Currently under construction, please refer later.++]%25%25%0a
host:1248278983=127.0.0.1
author:1246906702=
diff:1246906702:1246906605:=101c101%0a%3c if we define the population with required infoFields and several evolved generations%0a---%0a> if we define the population with required infoFiels and evolve several generations%0a
host:1246906702=127.0.0.1
author:1246906605=
diff:1246906605:1246906490:=26,51c26,31%0a%3c def SaveQTDT(pop, output='', loci=[], header=False,%0a%3c     affectionCode=['U', 'A'], fields=[], combine=None, shift=1, **kwargs):%0a%3c     """%0a%3c     save population in Merlin/QTDT format. The population must have pedindex,%0a%3c     father_idx and mother_idx information fields.%0a%3c %0a%3c     pop%0a%3c         population to be saved. If pop is a filename, it will be loaded.%0a%3c     output%0a%3c         base filename.%0a%3c     affectionCode%0a%3c         code for unaffected and affected. '1', '2' are default,%0a%3c         but 'U', and 'A' or others can be specified.%0a%3c     loci%0a%3c         loci to output%0a%3c     header%0a%3c         whether or not put head line in the ped file.%0a%3c     fields%0a%3c         information fields to output%0a%3c     combine%0a%3c         an optional function to combine two alleles of a diploid%0a%3c         individual.%0a%3c     shift%0a%3c         if combine is not given, output two alleles directly, adding%0a%3c         this value (default to 1).%0a%3c     """%0a---%0a> def SavePOPGENEDatFile(pop, output='', title='', pad=1):%0a>     '''%0a>     Output a data file readable by POPGENE%0a>     pad - shift genotype from 0 to pad, 1 to 1+pad...%0a>           since POPGENE genotype can not be 0 %0a>     '''%0a54,60c34,41%0a%3c     #%0a%3c     if loci == []:%0a%3c         loci = range(0, pop.totNumLoci())%0a%3c     # write dat file%0a%3c     if 'affection' in fields:%0a%3c         outputAffection = True%0a%3c         fields.remove('affection')%0a---%0a>     # open data file to write%0a>     try:%0a>         datOut = open(output, "w")%0a>     except exceptions.IOError:%0a>         raise exceptions.IOError, "Can not open file " + file + " to write."%0a>     # header section of POPGENE data file, default to output%0a>     if title != '':%0a>         print >> datOut, '/* ' + title + ' */'%0a62,68c43,83%0a%3c         outputAffection = False%0a%3c     SaveMerlinDatFile(pop, output, loci, fields, outputAffection)%0a%3c     # write map file%0a%3c     SaveMerlinMapFile(pop, output, loci)%0a%3c     # write ped file%0a%3c     SaveMerlinPedFile(pop, output, loci, fields, header,%0a%3c         outputAffection, affectionCode, combine, shift)%0a---%0a>         print >> datOut, '/* ' + output + ' */'%0a>     print >> datOut, 'Number of populations = %25d' %25 pop.numSubPop()%0a>     print >> datOut, 'Number of loci = %25d' %25 pop.totNumLoci()%0a>     print >> datOut, 'Locus name :'%0a>     # output locus names%0a>     print >> datOut, ' '.join(pop.lociNames()) + '\n'%0a>     # output genotype, only handle haploid and diploid%0a>     if pop.ploidy() == 1:%0a>         for sp in range(0, pop.numSubPop()):%0a>             gt = ''%0a>             # obtain genotype%0a>             # POPGENE genotype can not be 0, so transfer 0 to pad, 1 to 1+pad...%0a>             for g in pop.genotype(sp):%0a>                 if len(pop.alleleNames()) == 0:%0a>                     gt += '%25d' %25 (g + pad)%0a>                 else:%0a>                     gt += pop.alleleName(g)%0a>             # add space after each genotype%0a>             gt = ' '.join(gt)%0a>             # add enter after each individual%0a>             gt = '\n'.join(gt[i:i+2*pop.totNumLoci()] for i in range(len(gt)) %0a>                 if i %25 (2*pop.totNumLoci()) == 0)%0a>             print >> datOut, gt%0a>             print >> datOut, '\n'%0a>     elif pop.ploidy() == 2:%0a>         for sp in range(0, pop.numSubPop()):%0a>             for ind in pop.individuals(sp):%0a>                 gt = ''%0a>                 for loc in range(pop.totNumLoci()):%0a>                     if len(pop.alleleNames()) == 0:%0a>                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad,%0a>                             ind.allele(loc, 1) + pad)%0a>                     else:%0a>                         gt += pop.alleleName(ind.allele(loc, 0)) + \%0a>                             pop.alleleName(ind.allele(loc, 1))%0a>                     gt += ' '%0a>                 print >> datOut, gt%0a>             print >> datOut, '\n'%0a>     else:%0a>         raise exceptions.ValueError, "POPGENE only supports haploid and diploid."%0a>     datOut.close()%0a71c86%0a%3c if we define the population in a simple way without infoFields or ancestral generations%0a---%0a> if we define the population as %0a73,74c88,89%0a%3c     pop = population(size=[2,3,4], loci=[1, 2])%0a%3c     InitByFreq(pop, [.1, .2, .3, .4])%0a---%0a>     pop = population(size=[4, 5], ploidy=2, loci=[2, 4], alleleNames=['A','B'])%0a>     InitByFreq(pop, [.3, .7])%0a78,105c93,111%0a%3c /* MERLIN data file */%0a%3c M	loc1-1%0a%3c M	loc2-1%0a%3c M	loc2-2%0a%3c %0a%3c /* MERLIN map file */%0a%3c CHROMOSOME MARKER POSITION%0a%3c 1	loc1-1	1.000000%0a%3c 2	loc2-1	1.000000%0a%3c 2	loc2-2	2.000000%0a%3c %0a%3c /* MERLIN pedigree file */%0a%3c 1 1 0 0 2 4 3 2 3 4 3%0a%3c 1 2 0 0 2 4 2 2 4 4 4%0a%3c 1 3 0 0 2 4 2 3 4 1 4%0a%3c 1 4 0 0 1 3 3 3 4 4 4%0a%3c 1 5 0 0 2 2 4 4 3 3 4%0a%3c 1 6 0 0 2 3 3 3 4 2 1%0a%3c 1 7 0 0 2 1 3 1 3 3 3%0a%3c 1 8 0 0 2 2 3 4 2 4 3%0a%3c 1 9 0 0 1 4 3 2 2 2 2%0a%3c =]%0a%3c %0a%3c if we define the population with required infoFiels and evolve several generations%0a%3c =python [=%0a%3c     =]%0a%3c we may get the output file%0a%3c =python [=%0a---%0a> /* testing diploid */%0a> Number of populations = 2%0a> Number of loci = 6%0a> Locus name :%0a> loc1-1 loc1-2 loc2-1 loc2-2 loc2-3 loc2-4%0a> %0a> AB BA BA BB BB AB %0a> BB AB BB AB BB BA %0a> BB BB BA AA AB BB %0a> AB BA AA AA BA BB %0a> %0a> %0a> AA AB AB BA BB BA %0a> BB AA AB BB AA BA %0a> AA BB BB AB AA BB %0a> AB BB BA BA BB BB %0a> BB BB BB BB BB BA %0a> %0a> %0a
host:1246906605=127.0.0.1
author:1246906490=
diff:1246906490:1246904759:=15,112d14%0a%3c A MERLIN pedigree file consists all the information that is necessary to reconstruct individual relationships and can be summarized in five items: a family identifier, an individual identifier, a link to each parent (if available) and finally an indicator of each individual's sex. These key values constitute the first five columns of any pedigree file. Usually the five standard columns are followed by various types of genetic data, including phenotypes for discrete and quantitative traits and marker genotypes.%0a%3c %0a%3c A MERLIN data file is used to describe the pedigree file. It includes one row per data item in the pedigree file, indicating the data type (encoded as M - marker, A - affection status, T - Quantitative Trait and C - Covariate) and providing a one-word label for each item.%0a%3c %0a%3c A MERLIN map file provides required information on chromosomal location to analyze genetic markers. Using sex-average maps, this file has one line per marker with three columns, indicating chromosome, marker name and position (in centiMorgans). %0a%3c %0a%3c For more detailed description of these MERLIN input files and some advanced features which require refined file formats, please refer to online MERLIN Tutorial/MERLIN Input Files: http://www.sph.umich.edu/csg/abecasis/Merlin/tour/input_files.html%0a%3c %0a%3c Using the following function,%0a%3c  %0a%3c =python [=%0a%3c def SavePOPGENEDatFile(pop, output='', title='', pad=1):%0a%3c     '''%0a%3c     Output a data file readable by POPGENE%0a%3c     pad - shift genotype from 0 to pad, 1 to 1+pad...%0a%3c           since POPGENE genotype can not be 0 %0a%3c     '''%0a%3c     if type(pop) == type(''):%0a%3c         pop = LoadPopulation(pop)%0a%3c     # open data file to write%0a%3c     try:%0a%3c         datOut = open(output, "w")%0a%3c     except exceptions.IOError:%0a%3c         raise exceptions.IOError, "Can not open file " + file + " to write."%0a%3c     # header section of POPGENE data file, default to output%0a%3c     if title != '':%0a%3c         print >> datOut, '/* ' + title + ' */'%0a%3c     else:%0a%3c         print >> datOut, '/* ' + output + ' */'%0a%3c     print >> datOut, 'Number of populations = %25d' %25 pop.numSubPop()%0a%3c     print >> datOut, 'Number of loci = %25d' %25 pop.totNumLoci()%0a%3c     print >> datOut, 'Locus name :'%0a%3c     # output locus names%0a%3c     print >> datOut, ' '.join(pop.lociNames()) + '\n'%0a%3c     # output genotype, only handle haploid and diploid%0a%3c     if pop.ploidy() == 1:%0a%3c         for sp in range(0, pop.numSubPop()):%0a%3c             gt = ''%0a%3c             # obtain genotype%0a%3c             # POPGENE genotype can not be 0, so transfer 0 to pad, 1 to 1+pad...%0a%3c             for g in pop.genotype(sp):%0a%3c                 if len(pop.alleleNames()) == 0:%0a%3c                     gt += '%25d' %25 (g + pad)%0a%3c                 else:%0a%3c                     gt += pop.alleleName(g)%0a%3c             # add space after each genotype%0a%3c             gt = ' '.join(gt)%0a%3c             # add enter after each individual%0a%3c             gt = '\n'.join(gt[i:i+2*pop.totNumLoci()] for i in range(len(gt)) %0a%3c                 if i %25 (2*pop.totNumLoci()) == 0)%0a%3c             print >> datOut, gt%0a%3c             print >> datOut, '\n'%0a%3c     elif pop.ploidy() == 2:%0a%3c         for sp in range(0, pop.numSubPop()):%0a%3c             for ind in pop.individuals(sp):%0a%3c                 gt = ''%0a%3c                 for loc in range(pop.totNumLoci()):%0a%3c                     if len(pop.alleleNames()) == 0:%0a%3c                         gt += '%25d%25d' %25 (ind.allele(loc, 0) + pad,%0a%3c                             ind.allele(loc, 1) + pad)%0a%3c                     else:%0a%3c                         gt += pop.alleleName(ind.allele(loc, 0)) + \%0a%3c                             pop.alleleName(ind.allele(loc, 1))%0a%3c                     gt += ' '%0a%3c                 print >> datOut, gt%0a%3c             print >> datOut, '\n'%0a%3c     else:%0a%3c         raise exceptions.ValueError, "POPGENE only supports haploid and diploid."%0a%3c     datOut.close()%0a%3c =]%0a%3c %0a%3c if we define the population as %0a%3c =python [=%0a%3c     pop = population(size=[4, 5], ploidy=2, loci=[2, 4], alleleNames=['A','B'])%0a%3c     InitByFreq(pop, [.3, .7])%0a%3c =]%0a%3c we may get the output file%0a%3c =python [=%0a%3c /* testing diploid */%0a%3c Number of populations = 2%0a%3c Number of loci = 6%0a%3c Locus name :%0a%3c loc1-1 loc1-2 loc2-1 loc2-2 loc2-3 loc2-4%0a%3c %0a%3c AB BA BA BB BB AB %0a%3c BB AB BB AB BB BA %0a%3c BB BB BA AA AB BB %0a%3c AB BA AA AA BA BB %0a%3c %0a%3c %0a%3c AA AB AB BA BB BA %0a%3c BB AA AB BB AA BA %0a%3c AA BB BB AB AA BB %0a%3c AB BB BA BA BB BB %0a%3c BB BB BB BB BB BA %0a%3c %0a%3c %0a%3c =]%0a
host:1246906490=127.0.0.1
author:1246904759=
diff:1246904759:1246904724:=10d9%0a%3c %0a12d10%0a%3c %0a
host:1246904759=127.0.0.1
author:1246904724=
diff:1246904724:1246904705:=
host:1246904724=127.0.0.1
author:1246904705=
diff:1246904705:1246904340:=1,2c1,2%0a%3c (:title Export MERLIN files in QTDT format:)%0a%3c %0a---%0a> (:title Export Merlin files in QTDT format:)%0a> %0a7,14c7%0a%3c This function allows you to export your simulated populations into MERLIN readable files in QTDT format, which include a data file, a map file and a pedigree file.%0a%3c %0a%3c MERLIN performs common pedigree analyses. It uses sparse trees to represent gene flow in pedigrees and is one of the fastest pedigree analysis packages around. %0a%3c MERLIN Download: http://www.sph.umich.edu/csg/abecasis/Merlin/download/%0a%3c MERLIN Tutorial: http://www.sph.umich.edu/csg/abecasis/Merlin/tour/%0a%3c %0a%3c %0a%3c %0a---%0a> This function allows you to export your simulated populations into Merlin readable files in QTDT format, which include a data file, a map file and a pedigree file.%0a
host:1246904705=127.0.0.1
author:1246904340=
diff:1246904340:1246904088:=6,7d5%0a%3c %0a%3c This function allows you to export your simulated populations into Merlin readable files in QTDT format, which include a data file, a map file and a pedigree file.%0a
host:1246904340=127.0.0.1
author:1246904088=
diff:1246904088:1246904049:=3,4d2%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:merlinUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|merlinUtil.py%0a%3c %0a5a4,5%0a> %0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:merlinUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|merlinUtil.py%0a\ No newline at end of file%0a
host:1246904088=127.0.0.1
author:1246904049=
diff:1246904049:1246903983:=1,3c1%0a%3c (:title Export Merlin files in QTDT format:)%0a%3c %0a%3c %25red%25 [++Currently under construction, please refer later.++]%25%25%0a---%0a> (:title Export Merlin files in QTDT format/:)%0a
host:1246904049=127.0.0.1
author:1246903983=
diff:1246903983:1245946713:=1d0%0a%3c (:title Export Merlin files in QTDT format/:)%0a
host:1246903983=127.0.0.1
author:1245946713=
diff:1245946713:1245946713:=1,2d0%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:merlinUtil.py | http://simupop.sourceforge.net/images/download.jpg]]|merlinUtil.py%0a\ No newline at end of file%0a
host:1245946713=127.0.0.1
