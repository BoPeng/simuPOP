version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1243537930
host=127.0.0.1
name=Cookbook.Migration
rev=14
targets=
text=(:title Changes of allele frequencies among subpopulations due to migration:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMigration.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMigration.py%0a%0a%0aGiven subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrant, and such a migrant has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and  1, including 0 and 1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0aThe main part of this function is shown below.%0aThe full Python code is available for download.%0a%0a%0a=python [=%0adef simuMigration(subPopSize, numOfSubPops, m, generations):%0a    '''Simulate the change of allele frequencies among subpopulations as a result of migration.'''%0a    # diploid population, one chromosome with 1 locus%0a    # random mating with sex%0a    pop = Population(size=[subPopSize]*numOfSubPops, loci=[1], infoFields=['migrate_to'])%0a    # set initial allele frequencies to each subpopulation%0a    # Rule of initialization is to use a list of numbers, which have counts equal to number of%0a    # subpopulations and been set evenly distributed between 0 and 1.%0a    # Therefore, the average allele frequency named theoretical value among all subpopulations will be 0.5%0a    for i in range(numOfSubPops):%0a        initGenotype(pop, freq=[i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)], subPops=[i])%0a%0a    # check if plot%0a    if useRPy:%0a        plotter = VarPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops,%0a            ylim=[0, 1], update=generations-1, legend=['Theoretical'] + ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)],%0a	    xlab="generation", ylab="alleleFrequency", saveAs='migration.png')%0a    else:%0a        plotter = NoneOp()%0a        %0a    a=[]%0a    # set migration rate matrix a[]. Within each row i of matrix a[], all elements have the same value which is%0a    # m divided by number of subpopulations minus one, except the diagonal element, whose value is set to be 0.%0a    # This setting ensures that every individual in subpopulation i has probability m to become the Migrator,%0a    # and such a migrator.has equal possibility of entering any other subpopulation. %0a    for i in range(numOfSubPops):%0a        b=[];%0a        for j in range(numOfSubPops):%0a            if j==i:%0a                b.append(0)%0a            else:%0a                b.append(m/(numOfSubPops-1))%0a        a.append(b)%0a    # if number of generations is smaller than 200, step will be set to 10 generations, otherwise it will be 20.%0a    if generations %3c= 200:%0a        s = 10%0a    else:%0a        s = 20%0a    pop.evolve(%0a        initOps = InitSex(),%0a        preOps = [%0a            Stat(alleleFreq=[0], vars=['alleleFreq_sp']), %0a            PyEval(r'"Frequency at generation %25d: %25s\n" %25 (gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a                stmts = 'freq = [subPop[x]["alleleFreq"][0][0] for x in range(%25i)]' %25 numOfSubPops, step = s),%0a        ],%0a        matingScheme = RandomMating(),%0a        postOps = [%0a            Migrator(rate = a),%0a            plotter,%0a            ],%0a        gen = generations,%0a        )%0a=]%0a%0aThis script will produce figures such as%0a%0a%25width=600%25 Attach:migration.png%0a
time=1262665752
title=Changes of allele frequencies among subpopulations due to migration
author:1262665752=
diff:1262665752:1262473509:=16c16%0a%3c     pop = Population(size=[subPopSize]*numOfSubPops, loci=[1], infoFields=['migrate_to'])%0a---%0a>     pop = population(size=[subPopSize]*numOfSubPops, loci=[1], infoFields=['migrate_to'])%0a22,23c22,23%0a%3c         initGenotype(pop, freq=[i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)], subPops=[i])%0a%3c %0a---%0a>         InitByFreq(pop, [i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)], subPops=[i])%0a> %0a26c26%0a%3c         plotter = VarPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops,%0a---%0a>         plotter = varPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops,%0a30c30%0a%3c         plotter = NoneOp()%0a---%0a>         plotter = noneOp()%0a35,36c35,36%0a%3c     # This setting ensures that every individual in subpopulation i has probability m to become the Migrator,%0a%3c     # and such a migrator.has equal possibility of entering any other subpopulation. %0a---%0a>     # This setting ensures that every individual in subpopulation i has probability m to become the migrator,%0a>     # and such a migrator has equal possibility of entering any other subpopulation. %0a51c51%0a%3c         initOps = InitSex(),%0a---%0a>         initOps = initSex(),%0a53,54c53,54%0a%3c             Stat(alleleFreq=[0], vars=['alleleFreq_sp']), %0a%3c             PyEval(r'"Frequency at generation %25d: %25s\n" %25 (gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a---%0a>             stat(alleleFreq=[0], vars=['alleleFreq_sp']), %0a>             pyEval(r'"Frequency at generation %25d: %25s\n" %25 (gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a57c57%0a%3c         matingScheme = RandomMating(),%0a---%0a>         matingScheme = randomMating(),%0a59c59%0a%3c             Migrator(rate = a),%0a---%0a>             migrator(rate = a),%0a63a64%0a> %0a
host:1262665752=127.0.0.1
author:1262473509=
diff:1262473509:1261111548:=23c23,24%0a%3c %0a---%0a>     simu = simulator(pop, randomMating())%0a> %0a50c51%0a%3c     pop.evolve(%0a---%0a>     simu.evolve(%0a57d57%0a%3c         matingScheme = randomMating(),%0a64d63%0a%3c %0a
host:1262473509=127.0.0.1
author:1261111548=
diff:1261111548:1247081681:=13c13,14%0a%3c     '''Simulate the change of allele frequencies among subpopulations as a result of migration.'''%0a---%0a>     '''Simulate the change of allele frequencies among subpopulations as a result%0a>     of migration.'''%0a16c17,18%0a%3c     pop = population(size=[subPopSize]*numOfSubPops, loci=[1], infoFields=['migrate_to'])%0a---%0a>     pop = population(size=[subPopSize]*numOfSubPops, loci=[1],%0a>                      infoFields=['migrate_to'])%0a18,20c20,23%0a%3c     # Rule of initialization is to use a list of numbers, which have counts equal to number of%0a%3c     # subpopulations and been set evenly distributed between 0 and 1.%0a%3c     # Therefore, the average allele frequency named theoretical value among all subpopulations will be 0.5%0a---%0a>     # Rule of initialization is to use a list of numbers, which have counts equal%0a>     # to number of subpopulations and been set evenly distributed between 0 and 1.%0a>     # Therefore, the average allele frequency named theoretical value among all%0a>     # subpopulations will be 0.5%0a22c25,26%0a%3c         InitByFreq(pop, [i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)], subPops=[i])%0a---%0a>         InitByFreq(pop, [i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)],%0a>                    subPops=[i])%0a27,28c31,36%0a%3c         plotter = varPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops,%0a%3c             ylim=[0, 1], update=generations-1, legend=['Theoretical'] + ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)],%0a---%0a>         plotter = varPlotter(%0a>             '[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]'%0a>             %25 numOfSubPops,%0a>             ylim=[0, 1], update=generations-1,%0a>             legend=['Theoretical'] +%0a>             ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)],%0a34,37c42,47%0a%3c     # set migration rate matrix a[]. Within each row i of matrix a[], all elements have the same value which is%0a%3c     # m divided by number of subpopulations minus one, except the diagonal element, whose value is set to be 0.%0a%3c     # This setting ensures that every individual in subpopulation i has probability m to become the migrator,%0a%3c     # and such a migrator has equal possibility of entering any other subpopulation. %0a---%0a>     # set migration rate matrix a[]. Within each row i of matrix a[], all%0a>     # elements have the same value which is m divided by number of subpopulations%0a>     # minus one, except the diagonal element, whose value is set to be 0.%0a>     # This setting ensures that every individual in subpopulation i has%0a>     # probability m to become the migrant, and such a migrant has equal%0a>     # possibility of entering any other subpopulation. %0a46c56,57%0a%3c     # if number of generations is smaller than 200, step will be set to 10 generations, otherwise it will be 20.%0a---%0a>     # if number of generations is smaller than 200, step will be set to 10%0a>     # generations, otherwise it will be 20.%0a52,61d62%0a%3c         initOps = initSex(),%0a%3c         preOps = [%0a%3c             stat(alleleFreq=[0], vars=['alleleFreq_sp']), %0a%3c             pyEval(r'"Frequency at generation %25d: %25s\n" %25 (gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a%3c                 stmts = 'freq = [subPop[x]["alleleFreq"][0][0] for x in range(%25i)]' %25 numOfSubPops, step = s),%0a%3c         ],%0a%3c         postOps = [%0a%3c             migrator(rate = a),%0a%3c             plotter,%0a%3c             ],%0a62a64,73%0a>         ops = [%0a>             stat(alleleFreq=[0], stage=PreMating), %0a>             migrator(rate = a),%0a>             pyEval(%0a>                 r'"Frequency at generation %25d: %25s\n" %25(gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a>                 stmts =%0a>                    'freq = [subPop[x]["alleleFreq"][0][0] for x in range(%25i)]'%0a>                    %25 numOfSubPops, step = s, stage=PreMating),%0a>             plotter,%0a>             ],%0a
host:1261111548=127.0.0.1
author:1247081681=
diff:1247081681:1247081549:=6c6%0a%3c Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrant, and such a migrant has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and  1, including 0 and 1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a---%0a> Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrant, and such a migrant has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and  1, including 0 and1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a
host:1247081681=127.0.0.1
author:1247081549=
diff:1247081549:1247081477:=
host:1247081549=127.0.0.1
author:1247081477=
diff:1247081477:1243606751:=6c6%0a%3c Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrant, and such a migrant has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and  1, including 0 and1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a---%0a> Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrant, and such a migrant has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and 1, including 0 and1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a
host:1247081477=127.0.0.1
author:1243606751=
diff:1243606751:1243606707:=46c46%0a%3c     # probability m to become the migrant, and such a migrant has equal%0a---%0a>     # probability m to become the migrator, and such a migrator has equal%0a
host:1243606751=127.0.0.1
author:1243606707=
diff:1243606707:1243539007:=6c6%0a%3c Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrant, and such a migrant has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and 1, including 0 and1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a---%0a> Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrator, and such a migrator has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and 1, including 0 and1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a
host:1243606707=127.0.0.1
author:1243539007=
diff:1243539007:1243538536:=13,14c13%0a%3c     '''Simulate the change of allele frequencies among subpopulations as a result%0a%3c     of migration.'''%0a---%0a>     '''Simulate the change of allele frequencies among subpopulations as a result of migration.'''%0a17,18c16%0a%3c     pop = population(size=[subPopSize]*numOfSubPops, loci=[1],%0a%3c                      infoFields=['migrate_to'])%0a---%0a>     pop = population(size=[subPopSize]*numOfSubPops, loci=[1], infoFields=['migrate_to'])%0a20,23c18,20%0a%3c     # Rule of initialization is to use a list of numbers, which have counts equal%0a%3c     # to number of subpopulations and been set evenly distributed between 0 and 1.%0a%3c     # Therefore, the average allele frequency named theoretical value among all%0a%3c     # subpopulations will be 0.5%0a---%0a>     # Rule of initialization is to use a list of numbers, which have counts equal to number of%0a>     # subpopulations and been set evenly distributed between 0 and 1.%0a>     # Therefore, the average allele frequency named theoretical value among all subpopulations will be 0.5%0a25,26c22%0a%3c         InitByFreq(pop, [i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)],%0a%3c                    subPops=[i])%0a---%0a>         InitByFreq(pop, [i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)], subPops=[i])%0a31,37c27%0a%3c         plotter = varPlotter(%0a%3c             '[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]'%0a%3c             %25 numOfSubPops,%0a%3c             ylim=[0, 1], update=generations-1,%0a%3c             legend=['Theoretical'] +%0a%3c             ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)],%0a%3c 	    xlab="generation", ylab="alleleFrequency", saveAs='migration.png')%0a---%0a>         plotter = varPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops, ylim=[0, 1], update=generations-1, legend=['Theoretical'] + ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)], xlab="generation", ylab="alleleFrequency", saveAs='migration.png')%0a42,47c32,35%0a%3c     # set migration rate matrix a[]. Within each row i of matrix a[], all%0a%3c     # elements have the same value which is m divided by number of subpopulations%0a%3c     # minus one, except the diagonal element, whose value is set to be 0.%0a%3c     # This setting ensures that every individual in subpopulation i has%0a%3c     # probability m to become the migrator, and such a migrator has equal%0a%3c     # possibility of entering any other subpopulation. %0a---%0a>     # set migration rate matrix a[]. Within each row i of matrix a[], all elements have the same value which is%0a>     # m divided by number of subpopulations minus one, except the diagonal element, whose value is set to be 0.%0a>     # This setting ensures that every individual in subpopulation i has probability m to become the migrator,%0a>     # and such a migrator has equal possibility of entering any other subpopulation. %0a56,57c44%0a%3c     # if number of generations is smaller than 200, step will be set to 10%0a%3c     # generations, otherwise it will be 20.%0a---%0a>     # if number of generations is smaller than 200, step will be set to 10 generations, otherwise it will be 20.%0a67,71c54,55%0a%3c             pyEval(%0a%3c                 r'"Frequency at generation %25d: %25s\n" %25(gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a%3c                 stmts =%0a%3c                    'freq = [subPop[x]["alleleFreq"][0][0] for x in range(%25i)]'%0a%3c                    %25 numOfSubPops, step = s, stage=PreMating),%0a---%0a>             pyEval(r'"Frequency at generation %25d: %25s\n" %25 (gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a>                 stmts = 'freq = [subPop[x]["alleleFreq"][0][0] for x in range(%25i)]' %25 numOfSubPops, step = s, stage=PreMating),%0a
host:1243539007=127.0.0.1
author:1243538536=
diff:1243538536:1243538447:=27c27,29%0a%3c         plotter = varPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops, ylim=[0, 1], update=generations-1, legend=['Theoretical'] + ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)], xlab="generation", ylab="alleleFrequency", saveAs='migration.png')%0a---%0a>         plotter = varPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops,%0a>             ylim=[0, 1], update=generations-1, legend=['Theoretical'] + ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)],%0a> 	    xlab="generation", ylab="alleleFrequency", saveAs='migration.png')%0a
host:1243538536=127.0.0.1
author:1243538447=
diff:1243538447:1243538380:=3,4c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMigration.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMigration.py%0a%3c %0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 Attach: simuMigration.py%0a
host:1243538447=127.0.0.1
author:1243538380=
diff:1243538380:1243538272:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 Attach: simuMigration.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|simuLDDecay.py%0a
host:1243538380=127.0.0.1
author:1243538272=
diff:1243538272:1243537930:=64c64%0a%3c %25width=600%25 Attach:migration.png%0a---%0a> %25width=600%25 Attach:migration_199.png%0a
host:1243538272=127.0.0.1
author:1243537930=
diff:1243537930:1243537930:=1,64d0%0a%3c (:title Changes of allele frequencies among subpopulations due to migration:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuLDDecay.py | http://simupop.sourceforge.net/images/download.jpg]]|simuLDDecay.py%0a%3c %0a%3c Given subpopulation size, number of subpopulations, the migration rate m, generations to evolve, this script shows changes of allele frequencies among subpopulations at single locus, which results from the effect of migration. All subpopulations have equal number of individuals. Migration is depicted in the form of a N*N matrix, which is consisted with identical non-zero values at non-diagonal positions and zero on the diagonal line, where N is the number of subpopulations. Sum of values of elements on row i (i = 1, 2, …, N) of the migration matrix equals to the migration rate, thus it ensures that every individual in subpopulation i has probability m  to become a migrator, and such a migrator has equal possibility of entering any other subpopulation. Initialization of allele frequencies among subpopulations is to use a list of numbers, which have counts equal to number of subpopulations and been set evenly distributed between 0 and 1, including 0 and1. Therefore, the average allele frequency named theoretical value that all subpopulations share after a long term of evolution will be 0.5.  %0a%3c The main part of this function is shown below.%0a%3c The full Python code is available for download.%0a%3c %0a%3c %0a%3c =python [=%0a%3c def simuMigration(subPopSize, numOfSubPops, m, generations):%0a%3c     '''Simulate the change of allele frequencies among subpopulations as a result of migration.'''%0a%3c     # diploid population, one chromosome with 1 locus%0a%3c     # random mating with sex%0a%3c     pop = population(size=[subPopSize]*numOfSubPops, loci=[1], infoFields=['migrate_to'])%0a%3c     # set initial allele frequencies to each subpopulation%0a%3c     # Rule of initialization is to use a list of numbers, which have counts equal to number of%0a%3c     # subpopulations and been set evenly distributed between 0 and 1.%0a%3c     # Therefore, the average allele frequency named theoretical value among all subpopulations will be 0.5%0a%3c     for i in range(numOfSubPops):%0a%3c         InitByFreq(pop, [i*1./(numOfSubPops-1), 1 - i*1./(numOfSubPops-1)], subPops=[i])%0a%3c     simu = simulator(pop, randomMating())%0a%3c %0a%3c     # check if plot%0a%3c     if useRPy:%0a%3c         plotter = varPlotter('[0.5] + [subPop[i]["alleleFreq"][0][0] for i in range(%25d)]' %25 numOfSubPops,%0a%3c             ylim=[0, 1], update=generations-1, legend=['Theoretical'] + ['Allele freq at subpop %25d' %25 x for x in range(numOfSubPops)],%0a%3c 	    xlab="generation", ylab="alleleFrequency", saveAs='migration.png')%0a%3c     else:%0a%3c         plotter = noneOp()%0a%3c         %0a%3c     a=[]%0a%3c     # set migration rate matrix a[]. Within each row i of matrix a[], all elements have the same value which is%0a%3c     # m divided by number of subpopulations minus one, except the diagonal element, whose value is set to be 0.%0a%3c     # This setting ensures that every individual in subpopulation i has probability m to become the migrator,%0a%3c     # and such a migrator has equal possibility of entering any other subpopulation. %0a%3c     for i in range(numOfSubPops):%0a%3c         b=[];%0a%3c         for j in range(numOfSubPops):%0a%3c             if j==i:%0a%3c                 b.append(0)%0a%3c             else:%0a%3c                 b.append(m/(numOfSubPops-1))%0a%3c         a.append(b)%0a%3c     # if number of generations is smaller than 200, step will be set to 10 generations, otherwise it will be 20.%0a%3c     if generations %3c= 200:%0a%3c         s = 10%0a%3c     else:%0a%3c         s = 20%0a%3c     simu.evolve(%0a%3c         gen = generations,%0a%3c         ops = [%0a%3c             stat(alleleFreq=[0], stage=PreMating), %0a%3c             migrator(rate = a),%0a%3c             pyEval(r'"Frequency at generation %25d: %25s\n" %25 (gen, ", ".join(["%25.2f" %25 x for x in freq]))',%0a%3c                 stmts = 'freq = [subPop[x]["alleleFreq"][0][0] for x in range(%25i)]' %25 numOfSubPops, step = s, stage=PreMating),%0a%3c             plotter,%0a%3c             ],%0a%3c         )%0a%3c =]%0a%3c %0a%3c This script will produce figures such as%0a%3c %0a%3c %25width=600%25 Attach:migration_199.png%0a
host:1243537930=127.0.0.1
