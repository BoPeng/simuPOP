version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.11) Gecko/2009060215 Firefox/3.0.11
author=
charset=ISO-8859-1
csum=
ctime=1247517857
host=127.0.0.1
name=Cookbook.MutationSelectionEquilibrium
rev=11
targets=
text=(:title Mutation Selection Equilibrium:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMutationSelEquili.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMutationSelEquili.py%0a%0aGiven a population size, mutation rate, and generation to evolve, this program attempts to model the mutation selection equilibrium. Every so often a mutation occurs in a genome. Negative mutations are selectively removed. Eventually an equilibrium occurs where the rate at which mutations occur and which mutations are removed is reached.%0a%0aThis program applies a directional mutaton model to two loci, but with a purifying selection applied to the first locus. Because of the selection pressure, the frequency of allele 1 at the first locus does not increase indefinitely as allele 1 at the second locus.%0a%0a=python [=%0a#%0a# Demonstrate the change of allele frequencies among a population due to%0a# mutation.%0a#%0a%0a"""%0aThis programs attempts to model the frequency of allele change due to mutation%0aequilibrium.%0a"""%0a%0a%0aimport simuOpt, os, sys, types, time%0afrom simuPOP import *%0a%0a# start simuPOP program%0a%0aoptions = [%0a    {%0a     'longarg':'PopSize=',%0a     'default':2000,%0a     'label':'Population Size',%0a     'allowedTypes':[types.IntType, types.LongType],%0a     'validate':simuOpt.valueGT(0),%0a     },%0a    {%0a     'longarg':'m=',%0a     'default':0.001,%0a     'label':'Mutation Rate',%0a     'allowedTypes':[types.FloatType],%0a     'validate':simuOpt.valueBetween(0., 1.),%0a     },%0a    {%0a     'longarg':'generations=',%0a     'default':500,%0a     'label':'Generations to evolve',%0a     'description':'Length of evolution',%0a     'allowedTypes':[types.IntType, types.LongType],%0a     'validate':simuOpt.valueGT(0)%0a     },%0a    {%0a     'longarg':'step=',%0a     'default':100,%0a     'label':'Steps to take per generation',%0a     'description':'Values displayed per generation',%0a     'allowedTypes':[types.IntType, types.LongType],%0a     'validate':simuOpt.valueGT(0)%0a     },%0a]%0a%0adef simuMigration(PopSize, m, generations, step):%0a%0a    pop = population(size=[PopSize], loci=[1, 1], infoFields='fitness')%0a# initialize population%0a#   set population size%0a#   two loci of interest are looked at%0a#   create field at where fitness values can be stored%0a%0a    simu = simulator(pop, randomMating())%0a# simulate random mating within the population%0a%0a    simu.evolve(%0a        preOps = initSex(),%0a    # before evolve function takes place%0a    #   initiate population with males and females%0a        ops = [%0a        # begin evolve function%0a            snpMutator(u=m),%0a        # mutation function with rate for "A -> a" set earlier%0a            maSelector(loci=0, fitness=[1, 1-10*m, 1-10*2*m]),%0a        # apply a purifying selection pressure to the first locus%0a            stat(alleleFreq=[0, 1], step=step),%0a        # stat function taken set amount of steps%0a            pyEval(%0a                r"'Generation: %25.3f\n' %25 (gen)",%0a                step=step),%0a            pyEval(%0a                r"'frequency of allele at locus 1: %25.3f\n' %25 (alleleFreq[0][1])",%0a                step=step),%0a            pyEval(%0a                r"'frequency of allele at locus 2: %25.3f\n' %25 (alleleFreq[1][1])",%0a                step=step),%0a        # output freq of allele 1 at the first and second locus%0a        ],%0a        gen = generations%0a    # program run over set amount of generations%0a)%0a%0aif __name__ == '__main__':%0a    # get all parameters%0a    pars = simuOpt.simuOpt(options, __doc__)%0a    if not pars.getParam():%0a        sys.exit(0)%0a%0a    simuMigration(pars.PopSize, pars.m, pars.generations, pars.step)%0a    # wait five seconds before exit%0a%0a=]%0a%0aThe script will produce results similar to:%0a%0aGeneration: 0.000 \\%0afrequency of allele at locus 1: 0.001 \\%0afrequency of allele at locus 2: 0.001 \\%0aGeneration: 100.000 \\%0afrequency of allele at locus 1: 0.061 \\%0afrequency of allele at locus 2: 0.115 \\%0aGeneration: 200.000 \\%0afrequency of allele at locus 1: 0.084 \\%0afrequency of allele at locus 2: 0.213 \\%0aGeneration: 300.000 \\%0afrequency of allele at locus 1: 0.130 \\%0afrequency of allele at locus 2: 0.368 \\%0aGeneration: 400.000 \\%0afrequency of allele at locus 1: 0.170 \\%0afrequency of allele at locus 2: 0.416 \\%0a>>>
time=1248082480
title=Mutation Selection Equilibrium
author:1248082480=
diff:1248082480:1248082110:=3c3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMutationSelEquili.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMutationSelEquili.py%0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMutationSelEquil.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMutationSelEquil.py%0a
host:1248082480=127.0.0.1
author:1248082110=
diff:1248082110:1248082056:=124,125c124%0a%3c frequency of allele at locus 2: 0.416 \\%0a%3c >>>%0a\ No newline at end of file%0a---%0a> frequency of allele at locus 2: 0.416%0a\ No newline at end of file%0a
host:1248082110=127.0.0.1
author:1248082056=
diff:1248082056:1248081964:=124c124%0a%3c frequency of allele at locus 2: 0.416 %0a\ No newline at end of file%0a---%0a> frequency of allele at locus 2: 0.416 \\%0a\ No newline at end of file%0a
host:1248082056=127.0.0.1
author:1248081964=
diff:1248081964:1248081911:=110,124c110,124%0a%3c Generation: 0.000 \\%0a%3c frequency of allele at locus 1: 0.001 \\%0a%3c frequency of allele at locus 2: 0.001 \\%0a%3c Generation: 100.000 \\%0a%3c frequency of allele at locus 1: 0.061 \\%0a%3c frequency of allele at locus 2: 0.115 \\%0a%3c Generation: 200.000 \\%0a%3c frequency of allele at locus 1: 0.084 \\%0a%3c frequency of allele at locus 2: 0.213 \\%0a%3c Generation: 300.000 \\%0a%3c frequency of allele at locus 1: 0.130 \\%0a%3c frequency of allele at locus 2: 0.368 \\%0a%3c Generation: 400.000 \\%0a%3c frequency of allele at locus 1: 0.170 \\%0a%3c frequency of allele at locus 2: 0.416 \\%0a\ No newline at end of file%0a---%0a> Generation: 0.000 .3f\n%0a> frequency of allele at locus 1: 0.001%0a> frequency of allele at locus 2: 0.001%0a> Generation: 100.000%0a> frequency of allele at locus 1: 0.061%0a> frequency of allele at locus 2: 0.115%0a> Generation: 200.000%0a> frequency of allele at locus 1: 0.084%0a> frequency of allele at locus 2: 0.213%0a> Generation: 300.000%0a> frequency of allele at locus 1: 0.130%0a> frequency of allele at locus 2: 0.368%0a> Generation: 400.000%0a> frequency of allele at locus 1: 0.170%0a> frequency of allele at locus 2: 0.416%0a\ No newline at end of file%0a
host:1248081964=127.0.0.1
author:1248081911=
diff:1248081911:1248081706:=110c110,111%0a%3c Generation: 0.000 .3f\n%0a---%0a> Generation: 0.000%0a> %0a111a113%0a> %0a112a115%0a> %0a113a117%0a> %0a114a119%0a> %0a115a121%0a> %0a116a123%0a> %0a117a125%0a> %0a118a127%0a> %0a119a129%0a> %0a120a131%0a> %0a121a133%0a> %0a122a135%0a> %0a123a137%0a> %0a
host:1248081911=127.0.0.1
author:1248081706=
diff:1248081706:1248081549:=105a106,110%0a> %0a> %0a> %0a> %0a> %0a111d115%0a%3c %0a113d116%0a%3c %0a115d117%0a%3c %0a117d118%0a%3c %0a119d119%0a%3c %0a121d120%0a%3c %0a123d121%0a%3c %0a125d122%0a%3c %0a127d123%0a%3c %0a129d124%0a%3c %0a131d125%0a%3c %0a133d126%0a%3c %0a135d127%0a%3c %0a137,138c129%0a%3c %0a%3c frequency of allele at locus 2: 0.416%0a\ No newline at end of file%0a---%0a> frequency of allele at locus 2: 0.416%0a
host:1248081706=127.0.0.1
author:1248081549=
diff:1248081549:1248074760:=3,4c3,4%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMutationSelEquil.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMutationSelEquil.py%0a%3c %0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMutationSelection.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMutationSelection.py%0a> %0a7,8c7%0a%3c This program applies a directional mutaton model to two loci, but with a purifying selection applied to the first locus. Because of the selection pressure, the frequency of allele 1 at the first locus does not increase indefinitely as allele 1 at the second locus.%0a%3c %0a---%0a> %0a83,84c82%0a%3c                 r"'Generation: %25.3f\n' %25 (gen)",%0a%3c                 step=step),%0a---%0a>                 r"'Generation: %25.3f\n' %25 (gen)", step=step),%0a86,87c84%0a%3c                 r"'frequency of allele at locus 1: %25.3f\n' %25 (alleleFreq[0][1])",%0a%3c                 step=step),%0a---%0a>                 r"'frequency of allele at locus 1: %25.3f\n' %25 (alleleFreq[1][1])", step=step),%0a89,90c86%0a%3c                 r"'frequency of allele at locus 2: %25.3f\n' %25 (alleleFreq[1][1])",%0a%3c                 step=step),%0a---%0a>                 r"'frequency of allele at locus 2: %25.3f\n' %25 (alleleFreq[0][1])", step=step),%0a109,110d104%0a%3c %0a%3c %0a112,129d105%0a%3c %0a%3c The script will produce results similar to:%0a%3c %0a%3c Generation: 0.000%0a%3c frequency of allele at locus 1: 0.001%0a%3c frequency of allele at locus 2: 0.001%0a%3c Generation: 100.000%0a%3c frequency of allele at locus 1: 0.061%0a%3c frequency of allele at locus 2: 0.115%0a%3c Generation: 200.000%0a%3c frequency of allele at locus 1: 0.084%0a%3c frequency of allele at locus 2: 0.213%0a%3c Generation: 300.000%0a%3c frequency of allele at locus 1: 0.130%0a%3c frequency of allele at locus 2: 0.368%0a%3c Generation: 400.000%0a%3c frequency of allele at locus 1: 0.170%0a%3c frequency of allele at locus 2: 0.416%0a
host:1248081549=127.0.0.1
author:1248074760=
diff:1248074760:1247518316:=10,11c10%0a%3c # Demonstrate the change of allele frequencies among a population due to%0a%3c # mutation.%0a---%0a> # Mutation Selection Equilibrium Model%0a15,16c14%0a%3c This programs attempts to model the frequency of allele change due to mutation%0a%3c equilibrium.%0a---%0a> This programs attempts to model the mutation selection equilibrium.%0a22d19%0a%3c %0a27,29c24,26%0a%3c      'longarg':'PopSize=',%0a%3c      'default':2000,%0a%3c      'label':'Population Size',%0a---%0a>      'longarg':'subPopSize=',%0a>      'default':5000,%0a>      'label':'Subpopulation Size',%0a48,55d44%0a%3c     {%0a%3c      'longarg':'step=',%0a%3c      'default':100,%0a%3c      'label':'Steps to take per generation',%0a%3c      'description':'Values displayed per generation',%0a%3c      'allowedTypes':[types.IntType, types.LongType],%0a%3c      'validate':simuOpt.valueGT(0)%0a%3c      },%0a58,60c47,49%0a%3c def simuMigration(PopSize, m, generations, step):%0a%3c %0a%3c     pop = population(size=[PopSize], loci=[1, 1], infoFields='fitness')%0a---%0a> def simuMigration(subPopSize, m, generations):%0a> %0a>     pop = population(size=[subPopSize], loci=[1, 1], infoFields='fitness')%0a62,63c51,52%0a%3c #   set population size%0a%3c #   two loci of interest are looked at%0a---%0a> #   population size: 2000%0a> #   two loci%0a67,68c56,57%0a%3c # simulate random mating within the population%0a%3c %0a---%0a> # create random mating within the population%0a> %0a76,87c65,72%0a%3c         # mutation function with rate for "A -> a" set earlier%0a%3c             maSelector(loci=0, fitness=[1, 1-10*m, 1-10*2*m]),%0a%3c         # apply a purifying selection pressure to the first locus%0a%3c             stat(alleleFreq=[0, 1], step=step),%0a%3c         # stat function taken set amount of steps%0a%3c             pyEval(%0a%3c                 r"'Generation: %25.3f\n' %25 (gen)", step=step),%0a%3c             pyEval(%0a%3c                 r"'frequency of allele at locus 1: %25.3f\n' %25 (alleleFreq[1][1])", step=step),%0a%3c             pyEval(%0a%3c                 r"'frequency of allele at locus 2: %25.3f\n' %25 (alleleFreq[0][1])", step=step),%0a%3c         # output freq of allele 1 at the first and second locus%0a---%0a>         # mutation function where rate for "A -> a" is 0.001%0a>             maSelector(loci=0, fitness=[1, 0.99, 0.98]),%0a>         # select for those with a fitness of 1, 1-u, and 1-2u%0a>             stat(alleleFreq=[0, 1], step=100),%0a>         # stat function taken in steps of 100 generations%0a>             pyEval(r"'%25.3f\t%25.3f\n' %25 (alleleFreq[0][1], alleleFreq[1][1])",%0a>                 step=100),%0a>         # output freq of individuals every 100 generations%0a90c75%0a%3c     # program run over set amount of generations%0a---%0a>     # program run over 500 generations%0a99,102c84,85%0a%3c     simuMigration(pars.PopSize, pars.m, pars.generations, pars.step)%0a%3c     # wait five seconds before exit%0a%3c %0a%3c %0a---%0a>     simuMigration(pars.subPopSize, pars.m, pars.generations)%0a>     #wait five seconds before exit%0a
host:1248074760=127.0.0.1
author:1247518316=
diff:1247518316:1247518280:=72c72%0a%3c         # output freq of individuals every 100 generations%0a---%0a>         # output freq of individuals who have allele frequencies AA, Aa, and aa every 100 generations%0a
host:1247518316=127.0.0.1
author:1247518280=
diff:1247518280:1247517857:=5,7c5,8%0a%3c Given a population size, mutation rate, and generation to evolve, this program attempts to model the mutation selection equilibrium. Every so often a mutation occurs in a genome. Negative mutations are selectively removed. Eventually an equilibrium occurs where the rate at which mutations occur and which mutations are removed is reached.%0a%3c %0a%3c %0a---%0a> Given population size, initial allele frequency, generations to evolve, number of replicates, this script demonstrates changes of allele frequency at single locus due to genetic drift. The core part of this function is shown below. %0a> The full Python code is available for download. %0a> %0a> %0a14c15,16%0a%3c This programs attempts to model the mutation selection equilibrium.%0a---%0a> This programs attempts to model the frequency of allele change due to mutation%0a> equilibrium.%0a88a91,94%0a> %0a> This script will produce figures such as%0a> %0a> %25width=600%25 Attach:geneticDrift.png%0a
host:1247518280=127.0.0.1
author:1247517857=
diff:1247517857:1247517857:=1,94d0%0a%3c (:title Mutation Selection Equilibrium:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuMutationSelection.py | http://simupop.sourceforge.net/images/download.jpg]]|simuMutationSelection.py%0a%3c %0a%3c Given population size, initial allele frequency, generations to evolve, number of replicates, this script demonstrates changes of allele frequency at single locus due to genetic drift. The core part of this function is shown below. %0a%3c The full Python code is available for download. %0a%3c %0a%3c %0a%3c =python [=%0a%3c #%0a%3c # Mutation Selection Equilibrium Model%0a%3c #%0a%3c %0a%3c """%0a%3c This programs attempts to model the frequency of allele change due to mutation%0a%3c equilibrium.%0a%3c """%0a%3c %0a%3c %0a%3c import simuOpt, os, sys, types, time%0a%3c from simuPOP import *%0a%3c # start simuPOP program%0a%3c %0a%3c options = [%0a%3c     {%0a%3c      'longarg':'subPopSize=',%0a%3c      'default':5000,%0a%3c      'label':'Subpopulation Size',%0a%3c      'allowedTypes':[types.IntType, types.LongType],%0a%3c      'validate':simuOpt.valueGT(0),%0a%3c      },%0a%3c     {%0a%3c      'longarg':'m=',%0a%3c      'default':0.001,%0a%3c      'label':'Mutation Rate',%0a%3c      'allowedTypes':[types.FloatType],%0a%3c      'validate':simuOpt.valueBetween(0., 1.),%0a%3c      },%0a%3c     {%0a%3c      'longarg':'generations=',%0a%3c      'default':500,%0a%3c      'label':'Generations to evolve',%0a%3c      'description':'Length of evolution',%0a%3c      'allowedTypes':[types.IntType, types.LongType],%0a%3c      'validate':simuOpt.valueGT(0)%0a%3c      },%0a%3c ]%0a%3c %0a%3c def simuMigration(subPopSize, m, generations):%0a%3c %0a%3c     pop = population(size=[subPopSize], loci=[1, 1], infoFields='fitness')%0a%3c # initialize population%0a%3c #   population size: 2000%0a%3c #   two loci%0a%3c #   create field at where fitness values can be stored%0a%3c %0a%3c     simu = simulator(pop, randomMating())%0a%3c # create random mating within the population%0a%3c %0a%3c     simu.evolve(%0a%3c         preOps = initSex(),%0a%3c     # before evolve function takes place%0a%3c     #   initiate population with males and females%0a%3c         ops = [%0a%3c         # begin evolve function%0a%3c             snpMutator(u=m),%0a%3c         # mutation function where rate for "A -> a" is 0.001%0a%3c             maSelector(loci=0, fitness=[1, 0.99, 0.98]),%0a%3c         # select for those with a fitness of 1, 1-u, and 1-2u%0a%3c             stat(alleleFreq=[0, 1], step=100),%0a%3c         # stat function taken in steps of 100 generations%0a%3c             pyEval(r"'%25.3f\t%25.3f\n' %25 (alleleFreq[0][1], alleleFreq[1][1])",%0a%3c                 step=100),%0a%3c         # output freq of individuals who have allele frequencies AA, Aa, and aa every 100 generations%0a%3c         ],%0a%3c         gen = generations%0a%3c     # program run over 500 generations%0a%3c )%0a%3c %0a%3c if __name__ == '__main__':%0a%3c     # get all parameters%0a%3c     pars = simuOpt.simuOpt(options, __doc__)%0a%3c     if not pars.getParam():%0a%3c         sys.exit(0)%0a%3c %0a%3c     simuMigration(pars.subPopSize, pars.m, pars.generations)%0a%3c     #wait five seconds before exit%0a%3c %0a%3c %0a%3c =]%0a%3c %0a%3c This script will produce figures such as%0a%3c %0a%3c %25width=600%25 Attach:geneticDrift.png%0a
host:1247517857=127.0.0.1
