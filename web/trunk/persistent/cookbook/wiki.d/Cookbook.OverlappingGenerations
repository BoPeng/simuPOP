version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1232384147
host=127.0.0.1
name=Cookbook.OverlappingGenerations
rev=8
targets=
text=(:title Simulation of overlapping generations:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:overlappingGeneration.py | http://simupop.sourceforge.net/images/download.jpg]]|overlappingGeneration.py%0a%0aThis script demonstrates how to implement overlapping generation and age-structured population, using a non-random mating scheme.%0a%0aIndividuals in this population has an information field @@age@@, which is manipulated as follows:%0a%0a* Individuals are initialized with random ages between 0 and maxAge.%0a* At each generation, individual ages are increased by 1.%0a* Individuals with age over maxAge are not involved in mating. (died)%0a* Individuals not in mating ages are copied to the next generation.%0a* Individuals in mating ages performs rangom mating and produce offspring with age 0.%0a* Repeat from step 2 for desired generations.%0a%0a=python [=%0a%0afrom simuPOP import *%0a%0aimport random%0a%0adef simuOverlappingGeneration(size, maxAge, minMatingAge, maxMatingAge, gen):%0a    '''%0a    size         population size.%0a    maxAge       maximum age. Individuals with age > maxAge will die.%0a    minMatingAge minimal mating age.%0a    maxMatingAge maximal mating age.%0a    gen          generations to simulate%0a    '''%0a    pop = population(size, loci=[2], infoFields=['age'])%0a    pop.setIndInfo([random.randint(0, maxAge) for x in range(size)], 'age')%0a    # define virtual subpopulations%0a    # age %3c minMatingAge%0a    # age >= minMatingAge and age %3c maxMatingAge + 0.1 (age %3c= maxMatingAge)%0a    # age >= maxMatingAge + 0.1 and age %3c maxAge + 0.1 (maxMatingAge %3c age %3c= maxAge)%0a    # age >= maxAge + 0.1 (age > maxAge)%0a    #%0a    # Note that we use a cutoff infoSplitter here, it is also possible to%0a    # provide a list of values, each corresponding to a virtual subpopulation.%0a    pop.setVirtualSplitter(infoSplitter('age',%0a      def simuOverlappingGeneration(size, maxAge, minMatingAge, maxMatingAge, gen):%0a    '''%0a    size         population size.%0a    maxAge       maximum age. individuals with age > maxAge will die.%0a    minMatingAge minimal mating age.%0a    maxMatingAge maximal mating age.%0a    gen          generations to simulate%0a    '''%0a    pop = Population(size, loci=[2], infoFields=['age'])%0a    pop.setIndInfo([random.randint(0, maxAge) for x in range(size)], 'age')%0a    # define virtual subpopulations%0a    # age %3c minMatingAge%0a    # age >= minMatingAge and age %3c maxMatingAge + 0.1 (age %3c= maxMatingAge)%0a    # age >= maxMatingAge + 0.1 and age %3c maxAge + 0.1 (maxMatingAge %3c age %3c= maxAge)%0a    # age >= maxAge + 0.1 (age > maxAge)%0a    #%0a    # Note that we use a cutoff InfoSplitter here, it is also possible to%0a    # provide a list of values, each corresponding to a virtual subpopulation.%0a    pop.setVirtualSplitter(InfoSplitter('age',%0a        cutoff=[minMatingAge, maxMatingAge + 0.1, maxAge + 0.1]))%0a    #%0a    pop.evolve(%0a        initOps = [%0a            InitSex(),%0a            InitGenotype(freq=[0.5, 0.5])%0a        ],%0a            # increase age by 1%0a        preOps = InfoExec('age += 1'),%0a        matingScheme = HeteroMating(%0a            # age %3c= maxAge, copy to the next generation (weight=-1)%0a            [CloneMating(subPops=[(0, x) for x in (0, 1, 2)], weight=-1),%0a            # random mating for individuals in mating ages%0a            RandomMating(subPops=[(0, 1)])]),%0a        postOps = [%0a            # count the individuals in each virtual subpopulation%0a            Stat(popSize=True, subPops=[(0,0), (0,1), (0,2), (0,3)]),%0a            # print virtual subpopulation sizes (there is no individual with age > maxAge after mating)%0a            PyEval(r"'Size of age groups: %25s\n' %25 (','.join(['%25d' %25 x for x in subPopSize]))")%0a        ],%0a        gen = gen%0a    )%0a%0a=]%0a%0a%0a
time=1262665990
title=Simulation of overlapping generations
author:1262665990=
diff:1262665990:1257432150:=41,55c41%0a%3c       def simuOverlappingGeneration(size, maxAge, minMatingAge, maxMatingAge, gen):%0a%3c     '''%0a%3c     size         population size.%0a%3c     maxAge       maximum age. individuals with age > maxAge will die.%0a%3c     minMatingAge minimal mating age.%0a%3c     maxMatingAge maximal mating age.%0a%3c     gen          generations to simulate%0a%3c     '''%0a%3c     pop = Population(size, loci=[2], infoFields=['age'])%0a%3c     pop.setIndInfo([random.randint(0, maxAge) for x in range(size)], 'age')%0a%3c     # define virtual subpopulations%0a%3c     # age %3c minMatingAge%0a%3c     # age >= minMatingAge and age %3c maxMatingAge + 0.1 (age %3c= maxMatingAge)%0a%3c     # age >= maxMatingAge + 0.1 and age %3c maxAge + 0.1 (maxMatingAge %3c age %3c= maxAge)%0a%3c     # age >= maxAge + 0.1 (age > maxAge)%0a---%0a>         cutoff=[minMatingAge, maxMatingAge + 0.1, maxAge + 0.1]))%0a57,62c43,49%0a%3c     # Note that we use a cutoff InfoSplitter here, it is also possible to%0a%3c     # provide a list of values, each corresponding to a virtual subpopulation.%0a%3c     pop.setVirtualSplitter(InfoSplitter('age',%0a%3c         cutoff=[minMatingAge, maxMatingAge + 0.1, maxAge + 0.1]))%0a%3c     #%0a%3c     pop.evolve(%0a---%0a>     simu = simulator(pop, heteroMating(%0a>         # age %3c= maxAge, copy to the next generation (weight=-1)%0a>         [cloneMating(subPops=[(0, x) for x in (0, 1, 2)], weight=-1),%0a>         # random mating for individuals in mating ages%0a>         randomMating(subPops=[(0, 1)])])%0a>     )%0a>     simu.evolve(%0a64,65c51,52%0a%3c             InitSex(),%0a%3c             InitGenotype(freq=[0.5, 0.5])%0a---%0a>             initSex(),%0a>             initByFreq([0.5, 0.5])%0a68,73c55%0a%3c         preOps = InfoExec('age += 1'),%0a%3c         matingScheme = HeteroMating(%0a%3c             # age %3c= maxAge, copy to the next generation (weight=-1)%0a%3c             [CloneMating(subPops=[(0, x) for x in (0, 1, 2)], weight=-1),%0a%3c             # random mating for individuals in mating ages%0a%3c             RandomMating(subPops=[(0, 1)])]),%0a---%0a>         preOps = infoExec('age += 1'),%0a76c58%0a%3c             Stat(popSize=True, subPops=[(0,0), (0,1), (0,2), (0,3)]),%0a---%0a>             stat(popSize=True, subPops=[(0,0), (0,1), (0,2), (0,3)]),%0a78c60%0a%3c             PyEval(r"'Size of age groups: %25s\n' %25 (','.join(['%25d' %25 x for x in subPopSize]))")%0a---%0a>             pyEval(r"'Size of age groups: %25s\n' %25 (','.join(['%25d' %25 x for x in subPopSize]))")%0a82a65,66%0a> if __name__ == '__main__':%0a>     simuOverlappingGeneration(2000, 10, 4, 6, 100)%0a
host:1262665990=127.0.0.1
author:1257432150=
diff:1257432150:1255016383:=45c45,48%0a%3c         [cloneMating(subPops=[(0, x) for x in (0, 1, 2)], weight=-1),%0a---%0a>         [cloneMating(subPop=(0, x), weight=-1,%0a>             ops=[%0a>                 inheritTagger(mode=Paternal, infoFields=['age']),%0a>                 cloneGenoTransmitter()]) for x in (0, 1, 2)] +%0a47c50%0a%3c         randomMating(subPops=[(0, 1)])])%0a---%0a>         [randomMating(subPop=(0, 1))])%0a50c53%0a%3c         initOps = [%0a---%0a>         preOps = [%0a53a57%0a>         ops = [%0a55,56c59%0a%3c         preOps = infoExec('age += 1'),%0a%3c         postOps = [%0a---%0a>             infoExec('age += 1', stage=PreMating),%0a66a70%0a> %0a
host:1257432150=127.0.0.1
author:1255016383=
diff:1255016383:1233548386:=17d16%0a%3c %0a46,48c45%0a%3c             ops=[%0a%3c                 inheritTagger(mode=Paternal, infoFields=['age']),%0a%3c                 cloneGenoTransmitter()]) for x in (0, 1, 2)] +%0a---%0a>             ops=[inheritTagger(infoFields=['age'])]) for x in (0, 1, 2)] +%0a53,56c50%0a%3c         preOps = [%0a%3c             initSex(),%0a%3c             initByFreq([0.5, 0.5])%0a%3c         ],%0a---%0a>         preOps = [initByFreq([0.5, 0.5])],%0a61c55%0a%3c             stat(popSize=True, subPops=[(0,0), (0,1), (0,2), (0,3)]),%0a---%0a>             stat(popSize=True),%0a63c57%0a%3c             pyEval(r"'Size of age groups: %25s\n' %25 (','.join(['%25d' %25 x for x in subPopSize]))")%0a---%0a>             pyEval(r"'Size of age groups: %25s\n' %25 (','.join(['%25d' %25 x for x in virtualPopSize[0]]))")%0a70d63%0a%3c %0a
host:1255016383=127.0.0.1
author:1233548386=blah
diff:1233548386:1233548351:=65a66,71%0a> %0a> !!!!%25block class=messagehead%2502 February 2009%0a> %0a> >>message%3c%3c%0a> !04:19 by '''[[~blah]]'''!test comment%0a> >>%3c%3c%0a
host:1233548386=127.0.0.1
author:1233548351=blah
diff:1233548351:1233548333:=65,72d64%0a%3c %0a%3c %0a%3c !!!!%25block class=messagehead%2502 February 2009%0a%3c %0a%3c >>message%3c%3c%0a%3c !04:19 by '''[[~blah]]'''!test comment%0a%3c >>%3c%3c%0a%3c %0a
host:1233548351=127.0.0.1
author:1233548333=blah
diff:1233548333:1232488488:=16a17,18%0a> %0a> %0a
host:1233548333=127.0.0.1
author:1232488488=
diff:1232488488:1232384147:=1,4d0%0a%3c (:title Simulation of overlapping generations:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:overlappingGeneration.py | http://simupop.sourceforge.net/images/download.jpg]]|overlappingGeneration.py%0a%3c %0a
host:1232488488=127.0.0.1
author:1232384147=
diff:1232384147:1232384147:=1,62d0%0a%3c This script demonstrates how to implement overlapping generation and age-structured population, using a non-random mating scheme.%0a%3c %0a%3c Individuals in this population has an information field @@age@@, which is manipulated as follows:%0a%3c %0a%3c * Individuals are initialized with random ages between 0 and maxAge.%0a%3c * At each generation, individual ages are increased by 1.%0a%3c * Individuals with age over maxAge are not involved in mating. (died)%0a%3c * Individuals not in mating ages are copied to the next generation.%0a%3c * Individuals in mating ages performs rangom mating and produce offspring with age 0.%0a%3c * Repeat from step 2 for desired generations.%0a%3c %0a%3c =python [=%0a%3c %0a%3c %0a%3c from simuPOP import *%0a%3c %0a%3c import random%0a%3c %0a%3c def simuOverlappingGeneration(size, maxAge, minMatingAge, maxMatingAge, gen):%0a%3c     '''%0a%3c     size         population size.%0a%3c     maxAge       maximum age. Individuals with age > maxAge will die.%0a%3c     minMatingAge minimal mating age.%0a%3c     maxMatingAge maximal mating age.%0a%3c     gen          generations to simulate%0a%3c     '''%0a%3c     pop = population(size, loci=[2], infoFields=['age'])%0a%3c     pop.setIndInfo([random.randint(0, maxAge) for x in range(size)], 'age')%0a%3c     # define virtual subpopulations%0a%3c     # age %3c minMatingAge%0a%3c     # age >= minMatingAge and age %3c maxMatingAge + 0.1 (age %3c= maxMatingAge)%0a%3c     # age >= maxMatingAge + 0.1 and age %3c maxAge + 0.1 (maxMatingAge %3c age %3c= maxAge)%0a%3c     # age >= maxAge + 0.1 (age > maxAge)%0a%3c     #%0a%3c     # Note that we use a cutoff infoSplitter here, it is also possible to%0a%3c     # provide a list of values, each corresponding to a virtual subpopulation.%0a%3c     pop.setVirtualSplitter(infoSplitter('age',%0a%3c         cutoff=[minMatingAge, maxMatingAge + 0.1, maxAge + 0.1]))%0a%3c     #%0a%3c     simu = simulator(pop, heteroMating(%0a%3c         # age %3c= maxAge, copy to the next generation (weight=-1)%0a%3c         [cloneMating(subPop=(0, x), weight=-1,%0a%3c             ops=[inheritTagger(infoFields=['age'])]) for x in (0, 1, 2)] +%0a%3c         # random mating for individuals in mating ages%0a%3c         [randomMating(subPop=(0, 1))])%0a%3c     )%0a%3c     simu.evolve(%0a%3c         preOps = [initByFreq([0.5, 0.5])],%0a%3c         ops = [%0a%3c             # increase age by 1%0a%3c             infoExec('age += 1', stage=PreMating),%0a%3c             # count the individuals in each virtual subpopulation%0a%3c             stat(popSize=True),%0a%3c             # print virtual subpopulation sizes (there is no individual with age > maxAge after mating)%0a%3c             pyEval(r"'Size of age groups: %25s\n' %25 (','.join(['%25d' %25 x for x in virtualPopSize[0]]))")%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a%3c %0a%3c if __name__ == '__main__':%0a%3c     simuOverlappingGeneration(2000, 10, 4, 6, 100)%0a%3c =]%0a
host:1232384147=127.0.0.1
