version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.11) Gecko/2009060215 Firefox/3.0.11
author=
charset=ISO-8859-1
csum=
ctime=1246713616
host=127.0.0.1
name=Cookbook.Performance
rev=6
targets=
text=(:title How to make your scripts run faster?:)%0a%0a(:toc:)%0a%0aThis page lists a few performance tricks that might make your script run faster.%0a%0a!!!! Use optimized modules%0a%0aAll simuPOP modules (short, long, binary) have their corresponding optimized versions. ([[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]]). By%0asetting environmental variable @@SIMUOPTIMIZED@@ (system dependent), using commandline option @@--optimized@@ (if your script uses the @@simuOpt@@ module, or using @@simuOpt.setOptions(optimized=True)@@, your script will use an optimized version of simuPOP that will run anyway from 0%25 50 30%25 faster, at a cost of no runtime boundary and type check.%0a%0a!!!! Use a simuPOP module with the right allele size%0a%0a->If your simulation only handles diallelic markers (e.g. SNP), it makes sense to use binary module, which might run faster and/or use less memory. [[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]])%0a%0a!!!! Use @@infoIdx@@ to locate information field by index.%0aIf you access individual information field repeatedly in a loop, rather than doing%0a%0a=python [=%0afor sp in range(pop.numSubPop()):%0a    for ind in pop.individuals(sp):%0a        ind.setInfo(sp, 'blah')%0a=]%0a%0aGetting the index of the information field using function @@infoIdx@@ and use indexes to access information field might be faster ([[http://simupop.sourceforge.net/manual/build/2_refManual.html#class-individual | doc]]), e.g.%0a%0a=python [=%0afield = pop.infoIdx('blah')%0afor sp in range(pop.numSubPop()):%0a    for ind in pop.individuals(sp):%0a        ind.setInfo(sp, field)%0a=]%0a%0aHowever, in this particular case (and perhaps in your case), using batch-access will be much faster.%0a=python [=%0afor sp in range(pop.numSubPop()):%0a    pop.setIndInfo(sp, 'blah', subPop=sp)%0a=]%0a%0aIn this case, using name of index to locate 'blah' does not really matter.%0a%0a!!!!Calculate statistics less often%0a%0aIt is nice to monitor the evolution of your process closely using a bunch of @@stat@@ and @@pyEval@@ operators. However, statistics calculation takes time and you may not want to calculate allele frequency etc at every generation. For example, instead of doing%0a=python [=%0astat(alleleFreq=range(pop.totNumLoci()))%0a=]%0ayou can try%0a=python [=%0astat(alleleFreq=range(pop.totNumLoci()), step=100)%0a=].%0a%0aIf you have to do that at every generation, you can try to reduce the calculations by not calculating all statistics and limit @@stat@@ output. For example,%0a=python [=%0astat(alleleFreq=range(pop.totNumLoci()), vars=['alleleFreq'])%0a=]%0awill not calculate allele frequencies in any subpopulations, and will not output variable @@alleleNum@@.%0a%0a
time=1246818015
title=How to make your scripts run faster?
author:1246818015=
diff:1246818015:1246714791:=55c55%0a%3c stat(alleleFreq=range(pop.totNumLoci()), vars=['alleleFreq'])%0a---%0a> stat(alleleFreq=range(pop.totNumLoci()), subPops=-1, vars=['alleleFreq'])%0a
host:1246818015=127.0.0.1
author:1246714791=
diff:1246714791:1246714496:=33a34,35%0a> %0a> %0a41,58d42%0a%3c %0a%3c !!!!Calculate statistics less often%0a%3c %0a%3c It is nice to monitor the evolution of your process closely using a bunch of @@stat@@ and @@pyEval@@ operators. However, statistics calculation takes time and you may not want to calculate allele frequency etc at every generation. For example, instead of doing%0a%3c =python [=%0a%3c stat(alleleFreq=range(pop.totNumLoci()))%0a%3c =]%0a%3c you can try%0a%3c =python [=%0a%3c stat(alleleFreq=range(pop.totNumLoci()), step=100)%0a%3c =].%0a%3c %0a%3c If you have to do that at every generation, you can try to reduce the calculations by not calculating all statistics and limit @@stat@@ output. For example,%0a%3c =python [=%0a%3c stat(alleleFreq=range(pop.totNumLoci()), subPops=-1, vars=['alleleFreq'])%0a%3c =]%0a%3c will not calculate allele frequencies in any subpopulations, and will not output variable @@alleleNum@@.%0a%3c %0a
host:1246714791=127.0.0.1
author:1246714496=
diff:1246714496:1246714369:=2,3d1%0a%3c %0a%3c (:toc:)%0a
host:1246714496=127.0.0.1
author:1246714369=
diff:1246714369:1246714310:=5,7c5,7%0a%3c !!!! Use optimized modules%0a%3c %0a%3c All simuPOP modules (short, long, binary) have their corresponding optimized versions. ([[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]]). By%0a---%0a> * Use optimized modules%0a> %0a> ->All simuPOP modules (short, long, binary) have their corresponding optimized versions. ([[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]]). By%0a10,11c10,11%0a%3c !!!! Use a simuPOP module with the right allele size%0a%3c %0a---%0a> * Use a simuPOP module with the right allele size%0a> %0a14,16c14,16%0a%3c !!!! Use @@infoIdx@@ to locate information field by index.%0a%3c If you access individual information field repeatedly in a loop, rather than doing%0a%3c %0a---%0a> * Use @@infoIdx@@ to locate information field by index.%0a> ->If you access individual information field repeatedly in a loop, rather than doing%0a> %0a23,24c23,24%0a%3c Getting the index of the information field using function @@infoIdx@@ and use indexes to access information field might be faster ([[http://simupop.sourceforge.net/manual/build/2_refManual.html#class-individual | doc]]), e.g.%0a%3c %0a---%0a> Getting the index of the information field using function @@infoIdx@@ and use indexes to access information field might be faster, e.g.%0a> %0a32c32%0a%3c %0a---%0a> ([[http://simupop.sourceforge.net/manual/build/2_refManual.html#class-individual | doc]]).%0a
host:1246714369=127.0.0.1
author:1246714310=
diff:1246714310:1246713616:=7,40c7,8%0a%3c ->All simuPOP modules (short, long, binary) have their corresponding optimized versions. ([[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]]). By%0a%3c setting environmental variable @@SIMUOPTIMIZED@@ (system dependent), using commandline option @@--optimized@@ (if your script uses the @@simuOpt@@ module, or using @@simuOpt.setOptions(optimized=True)@@, your script will use an optimized version of simuPOP that will run anyway from 0%25 50 30%25 faster, at a cost of no runtime boundary and type check.%0a%3c %0a%3c * Use a simuPOP module with the right allele size%0a%3c %0a%3c ->If your simulation only handles diallelic markers (e.g. SNP), it makes sense to use binary module, which might run faster and/or use less memory. [[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]])%0a%3c %0a%3c * Use @@infoIdx@@ to locate information field by index.%0a%3c ->If you access individual information field repeatedly in a loop, rather than doing%0a%3c %0a%3c =python [=%0a%3c for sp in range(pop.numSubPop()):%0a%3c     for ind in pop.individuals(sp):%0a%3c         ind.setInfo(sp, 'blah')%0a%3c =]%0a%3c %0a%3c Getting the index of the information field using function @@infoIdx@@ and use indexes to access information field might be faster, e.g.%0a%3c %0a%3c =python [=%0a%3c field = pop.infoIdx('blah')%0a%3c for sp in range(pop.numSubPop()):%0a%3c     for ind in pop.individuals(sp):%0a%3c         ind.setInfo(sp, field)%0a%3c =]%0a%3c %0a%3c ([[http://simupop.sourceforge.net/manual/build/2_refManual.html#class-individual | doc]]).%0a%3c %0a%3c However, in this particular case (and perhaps in your case), using batch-access will be much faster.%0a%3c =python [=%0a%3c for sp in range(pop.numSubPop()):%0a%3c     pop.setIndInfo(sp, 'blah', subPop=sp)%0a%3c =]%0a%3c %0a%3c In this case, using name of index to locate 'blah' does not really matter.%0a---%0a> All simuPOP modules (short, long, binary) have their corresponding optimized versions. ([[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]]). By%0a> setting environmental variable @@SIMUOPTIMIZED@@ (system dependent), using commandline option @@--optimized@@ (if your script uses the @@simuOpt@@ module, or using @@simuOpt.setOptions(optimized=True)@@, your script will use an optimized version of simuPOP that will run anyway from 0%25 50 30%25 faster, at a cost of no runtime boundary and type check.%0a\ No newline at end of file%0a
host:1246714310=127.0.0.1
author:1246713616=
diff:1246713616:1246713616:=1,8d0%0a%3c (:title How to make your scripts run faster?:)%0a%3c %0a%3c This page lists a few performance tricks that might make your script run faster.%0a%3c %0a%3c * Use optimized modules%0a%3c %0a%3c All simuPOP modules (short, long, binary) have their corresponding optimized versions. ([[http://simupop.sourceforge.net/manual/build/3_userGuide.html#short-long-and-binary-modules-and-their-optimized-versions|doc]]). By%0a%3c setting environmental variable @@SIMUOPTIMIZED@@ (system dependent), using commandline option @@--optimized@@ (if your script uses the @@simuOpt@@ module, or using @@simuOpt.setOptions(optimized=True)@@, your script will use an optimized version of simuPOP that will run anyway from 0%25 50 30%25 faster, at a cost of no runtime boundary and type check.%0a\ No newline at end of file%0a
host:1246713616=127.0.0.1
