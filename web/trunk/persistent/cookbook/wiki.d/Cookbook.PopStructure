version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1249587006
host=127.0.0.1
name=Cookbook.PopStructure
rev=24
targets=
text=(:title Population structure, Fst and Gst :)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:popStructure.py | http://simupop.sourceforge.net/images/download.jpg]]|popStructure.py%0a%0aThis script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_{st}$} (Weir and Cockerham, 1984) and {$G_{st}$} (Nei 1973) statistics using the @@stat@@ operator. This recipe is related to [[http://evol.mcmaster.ca/~brian/evoldir/Answers/Calculating.multiallele.Fst.answers | an evoldir post]] about which statistic to use for population-based simulations.%0a%0aThe simulator is created by a population with three subpopulations, each has 10k individuals. Individuals in this population have five unlinked loci (five loci on five chromosomes). The population is initialized by random alleles, with specified frequencies.%0a%0aAt every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The {$F_{st}$} and {$G_{st}$} statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a%0aThere are several interesting points about this simulation:%0a%0a# Population and sample {$F_{st}$} and {$G_{st}$} statistics are different. Because the Weir and Cockerham 1984 estimator of {$F_{st}$} is designed to estimate {$F_{st}$} from random samples of larger populations (it corrects for sampling error), we are supposed to trust {$G_{st}$} for  population estimation, and {$F_{st}$} for sample estimation. It can be interesting to see if {$F_{st}$} estimated from the random sample performs better than the corresponding {$G_{st}$} estimators, by comparing them with the population {$G_{st}$} statistics.%0a%0a# This simulation uses random mating, constant population size, equal subpopulation size, and no migration. Changes in these factors may lead to interesting findings.%0a%0a=python [=%0adef calcFst(pop):%0a    'Calculate Fst and Gst for the whole population and a random sample'%0a    Stat(pop, structure=range(5), vars=['F_st', 'G_st'])%0a    sample = drawRandomSample(pop, sizes=[500]*pop.numSubPop())%0a    Stat(sample, structure=range(5), vars=['F_st', 'G_st'])%0a    print 'Gen: %253d Gst: %25.6f (all), %25.6f (sample) Fst: %25.6f (all) %25.6f (sample)' \%0a        %25 (pop.dvars().gen,%0a           pop.dvars().G_st, sample.dvars().G_st,%0a           pop.dvars().F_st, sample.dvars().F_st)%0a    return True%0a%0apop = population([10000]*2, loci=[1]*5, infoFields='migrate_to')%0apop.evolve(%0a    initOps = [%0a        initSex(),%0a        initByFreq([0.5, 0.5], loci=[0, 2]),%0a        initByFreq([0.2, 0.4, 0.4], loci=[1, 3, 4]),%0a    ],%0a    matingScheme = randomMating(),%0a    postOps = [%0a        # migrator(rate=migrIslandRates(0.01, 3)),%0a        pyOperator(func=calcFst, step=20),%0a    ],%0a    gen = 500%0a)%0a=]%0a%0aThe following is one of the possible outputs of the above script:%0a%0a%25define=box block bgcolor=#ddddff border="1px blue"%25%0a%25box%25 [@%0aGen:   0 Gst: 0.000050 (all), 0.000545 (sample) Fst: 0.000025 (all) -0.000189 (sample)%0aGen:  20 Gst: 0.000233 (all), 0.001049 (sample) Fst: 0.000300 (all) 0.000586 (sample)%0aGen:  40 Gst: 0.001564 (all), 0.001374 (sample) Fst: 0.002294 (all) 0.001064 (sample)%0aGen:  60 Gst: 0.002097 (all), 0.002351 (sample) Fst: 0.003092 (all) 0.002522 (sample)%0aGen:  80 Gst: 0.002803 (all), 0.002345 (sample) Fst: 0.004149 (all) 0.002512 (sample)%0aGen: 100 Gst: 0.003123 (all), 0.003653 (sample) Fst: 0.004627 (all) 0.004473 (sample)%0aGen: 120 Gst: 0.004032 (all), 0.003035 (sample) Fst: 0.005986 (all) 0.003551 (sample)%0aGen: 140 Gst: 0.004738 (all), 0.006816 (sample) Fst: 0.007041 (all) 0.009195 (sample)%0aGen: 160 Gst: 0.004622 (all), 0.007112 (sample) Fst: 0.006867 (all) 0.009641 (sample)%0aGen: 180 Gst: 0.005747 (all), 0.006117 (sample) Fst: 0.008547 (all) 0.008170 (sample)%0aGen: 200 Gst: 0.006219 (all), 0.006300 (sample) Fst: 0.009250 (all) 0.008449 (sample)%0aGen: 220 Gst: 0.007188 (all), 0.007680 (sample) Fst: 0.010693 (all) 0.010477 (sample)%0aGen: 240 Gst: 0.008256 (all), 0.006324 (sample) Fst: 0.012284 (all) 0.008466 (sample)%0aGen: 260 Gst: 0.008396 (all), 0.008324 (sample) Fst: 0.012492 (all) 0.011446 (sample)%0aGen: 280 Gst: 0.009328 (all), 0.008011 (sample) Fst: 0.013878 (all) 0.010963 (sample)%0aGen: 300 Gst: 0.008824 (all), 0.008966 (sample) Fst: 0.013129 (all) 0.012396 (sample)%0aGen: 320 Gst: 0.010391 (all), 0.009601 (sample) Fst: 0.015457 (all) 0.013354 (sample)%0aGen: 340 Gst: 0.010343 (all), 0.010922 (sample) Fst: 0.015385 (all) 0.015310 (sample)%0aGen: 360 Gst: 0.010145 (all), 0.009684 (sample) Fst: 0.015091 (all) 0.013466 (sample)%0aGen: 380 Gst: 0.012994 (all), 0.014168 (sample) Fst: 0.019316 (all) 0.020123 (sample)%0aGen: 400 Gst: 0.012513 (all), 0.012029 (sample) Fst: 0.018604 (all) 0.016972 (sample)%0aGen: 420 Gst: 0.014496 (all), 0.016989 (sample) Fst: 0.021538 (all) 0.024289 (sample)%0aGen: 440 Gst: 0.012049 (all), 0.011997 (sample) Fst: 0.017916 (all) 0.016896 (sample)%0aGen: 460 Gst: 0.010773 (all), 0.014430 (sample) Fst: 0.016024 (all) 0.020513 (sample)%0aGen: 480 Gst: 0.009734 (all), 0.010997 (sample) Fst: 0.014481 (all) 0.015440 (sample)%0a%0a@]%0a%0aIf we increase the number of subpopulations, the difference between {$G_{st}$} and {$F_{st}$} becomes smaller. The following is a possible output when we use 10 subpopulations instead of 3 (each of size 10000):%0a%0a%25box%25 [@%0aGen:   0 Gst: 0.000104 (all), 0.001035 (sample) Fst: 0.000066 (all) 0.000152 (sample)%0aGen:  20 Gst: 0.000910 (all), 0.001926 (sample) Fst: 0.000961 (all) 0.001134 (sample)%0aGen:  40 Gst: 0.001595 (all), 0.002844 (sample) Fst: 0.001722 (all) 0.002156 (sample)%0aGen:  60 Gst: 0.002499 (all), 0.002543 (sample) Fst: 0.002726 (all) 0.001830 (sample)%0aGen:  80 Gst: 0.003286 (all), 0.004476 (sample) Fst: 0.003600 (all) 0.003974 (sample)%0aGen: 100 Gst: 0.004412 (all), 0.004964 (sample) Fst: 0.004850 (all) 0.004521 (sample)%0aGen: 120 Gst: 0.005066 (all), 0.006313 (sample) Fst: 0.005575 (all) 0.006010 (sample)%0aGen: 140 Gst: 0.006552 (all), 0.007172 (sample) Fst: 0.007225 (all) 0.006972 (sample)%0aGen: 160 Gst: 0.007599 (all), 0.008516 (sample) Fst: 0.008386 (all) 0.008455 (sample)%0aGen: 180 Gst: 0.009159 (all), 0.010090 (sample) Fst: 0.010117 (all) 0.010206 (sample)%0aGen: 200 Gst: 0.009225 (all), 0.010739 (sample) Fst: 0.010190 (all) 0.010924 (sample)%0aGen: 220 Gst: 0.011350 (all), 0.011179 (sample) Fst: 0.012546 (all) 0.011421 (sample)%0aGen: 240 Gst: 0.011750 (all), 0.013076 (sample) Fst: 0.012989 (all) 0.013533 (sample)%0aGen: 260 Gst: 0.012848 (all), 0.014396 (sample) Fst: 0.014206 (all) 0.014974 (sample)%0aGen: 280 Gst: 0.014376 (all), 0.015611 (sample) Fst: 0.015899 (all) 0.016332 (sample)%0aGen: 300 Gst: 0.014542 (all), 0.015677 (sample) Fst: 0.016083 (all) 0.016394 (sample)%0aGen: 320 Gst: 0.017318 (all), 0.018611 (sample) Fst: 0.019156 (all) 0.019651 (sample)%0aGen: 340 Gst: 0.019126 (all), 0.019498 (sample) Fst: 0.021157 (all) 0.020635 (sample)%0aGen: 360 Gst: 0.020142 (all), 0.022216 (sample) Fst: 0.022281 (all) 0.023654 (sample)%0aGen: 380 Gst: 0.021645 (all), 0.022353 (sample) Fst: 0.023944 (all) 0.023788 (sample)%0aGen: 400 Gst: 0.022627 (all), 0.023709 (sample) Fst: 0.025030 (all) 0.025303 (sample)%0aGen: 420 Gst: 0.022979 (all), 0.022245 (sample) Fst: 0.025419 (all) 0.023679 (sample)%0aGen: 440 Gst: 0.023283 (all), 0.024036 (sample) Fst: 0.025755 (all) 0.025663 (sample)%0aGen: 460 Gst: 0.023463 (all), 0.024456 (sample) Fst: 0.025954 (all) 0.026116 (sample)%0aGen: 480 Gst: 0.024137 (all), 0.025089 (sample) Fst: 0.026699 (all) 0.026822 (sample)%0a@]%0a%0a%0a%0a%0a%0a%0a!!!!%25block class=messagehead%2520 August 2009%0a%0a>>message%3c%3c%0a!19:46 by '''[[http://www.sbcs.qmul.ac.uk/people/|Richard Nichols, Professor of Genetics]]'''!I think I understand the difference between Fst and Gst you report in your Evoldir post.%0a%0aIt relates to the reason that we divide by (n-1) to obtain an estimate for a standard deviation, rather than n.  If we have only, say, 3 observations in a sample, our estimate of the mean will be biased towards the values in the sample, so the squared deviations around this mean will tend to be smaller than the true variance of the whole population around the true mean.%0a%0aThe difference between W&C and Nei is down to a philosophical difference over what the TRUE mean is in a genetic sample- I don't think either of them are in error, within their own world-view.%0a%0aIf you take the W&C view, the 3 subpopulations in your simulation only provide an ESTIMATE of the true global allele frequencies (or the frequencies that would have been obtained over many re-runs of evolution)... hence when Fst is estimated, it must compensate for the systematic error in the estimate of allele frequencies (because the variance around the global frequencies will tend to be larger than the raw estimate from the data - as in the case of estimating SD).%0a%0aIf you take the Nei view, the frequencies in the 3 subpopulations ARE the global frequencies - so there is no need for this compensation (although I think Nei still allows for sampling error).%0a%0aI predict that you will be able to demonstrate that this is the cause of the difference by running your simulation with more subpopuations:  %0aas the number of subpopulations increases I would expect the W&C estimate to come down to the Gst estimate.%0a%0a>>%3c%3c%0a%0a
time=1262473545
title=Population structure, Fst and Gst 
author:1262473545=
diff:1262473545:1261111624:=21c21%0a%3c     sample = drawRandomSample(pop, sizes=[500]*pop.numSubPop())%0a---%0a>     sample = DrawRandomSample(pop, sizes=[500]*pop.numSubPop())%0a29,30c29,31%0a%3c pop = population([10000]*2, loci=[1]*5, infoFields='migrate_to')%0a%3c pop.evolve(%0a---%0a> simu = simulator(population([10000]*2, loci=[1]*5, infoFields='migrate_to'),%0a>     randomMating())%0a> simu.evolve(%0a36d36%0a%3c     matingScheme = randomMating(),%0a38c38%0a%3c         # migrator(rate=migrIslandRates(0.01, 3)),%0a---%0a>         # migrator(rate=MigrIslandRates(0.01, 3)),%0a
host:1262473545=127.0.0.1
author:1261111624=
diff:1261111624:1250870711:=17a18,22%0a> #!/usr/bin/env python%0a> from simuPOP import *%0a> from simuUtil import MigrIslandRates%0a> %0a> %0a21c26%0a%3c     sample = DrawRandomSample(pop, sizes=[500]*pop.numSubPop())%0a---%0a>     sample = RandomSample(pop, size=[500]*pop.numSubPop())[0]%0a29c34%0a%3c simu = simulator(population([10000]*2, loci=[1]*5, infoFields='migrate_to'),%0a---%0a> simu = simulator(population([10000]*3, loci=[1]*5, infoFields='migrate_to'),%0a32,33c37%0a%3c     initOps = [%0a%3c         initSex(),%0a---%0a>     preOps = [%0a37c41%0a%3c     postOps = [%0a---%0a>     ops = [%0a
host:1261111624=127.0.0.1
author:1250870711=
diff:1250870711:1250869933:=5c5%0a%3c This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_{st}$} (Weir and Cockerham, 1984) and {$G_{st}$} (Nei 1973) statistics using the @@stat@@ operator. This recipe is related to [[http://evol.mcmaster.ca/~brian/evoldir/Answers/Calculating.multiallele.Fst.answers | an evoldir post]] about which statistic to use for population-based simulations.%0a---%0a> This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_{st}$} (Weir and Cockerham, 1984) and {$G_{st}$} (Nei 1973) statistics using the @@stat@@ operator. This recipe is related to [[http://evol.mcmaster.ca/~brian/evoldir/Answers/Calculating.multiallele.Fst.answers | a evoldir post]] about which statistic to use for population-based simulations.%0a
host:1250870711=127.0.0.1
author:1250869933=
diff:1250869933:1250797875:=119,120c119,120%0a%3c !19:46 by '''[[http://www.sbcs.qmul.ac.uk/people/|Richard Nichols, Professor of Genetics]]'''!I think I understand the difference between Fst and Gst you report in your Evoldir post.%0a%3c %0a---%0a> !19:46 by '''[[~Richard]]'''!I think I understand the difference between Fst and Gst you report in your Evoldir post.%0a> %0a125c125%0a%3c If you take the W&C view, the 3 subpopulations in your simulation only provide an ESTIMATE of the true global allele frequencies (or the frequencies that would have been obtained over many re-runs of evolution)... hence when Fst is estimated, it must compensate for the systematic error in the estimate of allele frequencies (because the variance around the global frequencies will tend to be larger than the raw estimate from the data - as in the case of estimating SD).%0a---%0a> If you take the W&C view, the 3 subpopulations in your simulation are only provide an ESTIMATE of the true global allele frequencies (or the frequencies that would have been obtained over many re-runs of evolution)... hence when Fst is estimated, it must compensate for the systematic error in the estimate of allele frequencies (because the variance around the global frequencies will tend to be larger than the raw estimate from the data - as in the case of estimating SD).%0a
host:1250869933=127.0.0.1
author:1250797875=Richard
diff:1250797875:1250797819:=
host:1250797875=127.0.0.1
author:1250797819=Richard
diff:1250797819:1250797695:=5c5%0a%3c This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_{st}$} (Weir and Cockerham, 1984) and {$G_{st}$} (Nei 1973) statistics using the @@stat@@ operator. This recipe is related to [[http://evol.mcmaster.ca/~brian/evoldir/Answers/Calculating.multiallele.Fst.answers | a evoldir post]] about which statistic to use for population-based simulations.%0a---%0a> This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_{st}$} (Weir and Cockerham, 1984) and {$G_{st}$} (Nei 1973) statistics using the @@stat@@ operator.%0a
host:1250797819=127.0.0.1
author:1250797695=Richard
diff:1250797695:1250797584:=81c81%0a%3c If we increase the number of subpopulations, the difference between {$G_{st}$} and {$F_{st}$} becomes smaller. The following is a possible output when we use 10 subpopulations instead of 3 (each of size 10000):%0a---%0a> If we increase the number of subpopulations, the difference between {$G_{st}$} and {$F_{st}$} becomes smaller. That is to say, if we use 10 subpopulations with size 10000, the output can be:%0a
host:1250797695=127.0.0.1
author:1250797584=Richard
diff:1250797584:1250797458:=113,132d112%0a%3c %0a%3c %0a%3c %0a%3c !!!!%25block class=messagehead%2520 August 2009%0a%3c %0a%3c >>message%3c%3c%0a%3c !19:46 by '''[[~Richard]]'''!I think I understand the difference between Fst and Gst you report in your Evoldir post.%0a%3c %0a%3c It relates to the reason that we divide by (n-1) to obtain an estimate for a standard deviation, rather than n.  If we have only, say, 3 observations in a sample, our estimate of the mean will be biased towards the values in the sample, so the squared deviations around this mean will tend to be smaller than the true variance of the whole population around the true mean.%0a%3c %0a%3c The difference between W&C and Nei is down to a philosophical difference over what the TRUE mean is in a genetic sample- I don't think either of them are in error, within their own world-view.%0a%3c %0a%3c If you take the W&C view, the 3 subpopulations in your simulation are only provide an ESTIMATE of the true global allele frequencies (or the frequencies that would have been obtained over many re-runs of evolution)... hence when Fst is estimated, it must compensate for the systematic error in the estimate of allele frequencies (because the variance around the global frequencies will tend to be larger than the raw estimate from the data - as in the case of estimating SD).%0a%3c %0a%3c If you take the Nei view, the frequencies in the 3 subpopulations ARE the global frequencies - so there is no need for this compensation (although I think Nei still allows for sampling error).%0a%3c %0a%3c I predict that you will be able to demonstrate that this is the cause of the difference by running your simulation with more subpopuations:  %0a%3c as the number of subpopulations increases I would expect the W&C estimate to come down to the Gst estimate.%0a%3c %0a%3c >>%3c%3c%0a
host:1250797584=127.0.0.1
author:1250797458=
diff:1250797458:1250797317:=84,108c84,108%0a%3c Gen:   0 Gst: 0.000104 (all), 0.001035 (sample) Fst: 0.000066 (all) 0.000152 (sample)%0a%3c Gen:  20 Gst: 0.000910 (all), 0.001926 (sample) Fst: 0.000961 (all) 0.001134 (sample)%0a%3c Gen:  40 Gst: 0.001595 (all), 0.002844 (sample) Fst: 0.001722 (all) 0.002156 (sample)%0a%3c Gen:  60 Gst: 0.002499 (all), 0.002543 (sample) Fst: 0.002726 (all) 0.001830 (sample)%0a%3c Gen:  80 Gst: 0.003286 (all), 0.004476 (sample) Fst: 0.003600 (all) 0.003974 (sample)%0a%3c Gen: 100 Gst: 0.004412 (all), 0.004964 (sample) Fst: 0.004850 (all) 0.004521 (sample)%0a%3c Gen: 120 Gst: 0.005066 (all), 0.006313 (sample) Fst: 0.005575 (all) 0.006010 (sample)%0a%3c Gen: 140 Gst: 0.006552 (all), 0.007172 (sample) Fst: 0.007225 (all) 0.006972 (sample)%0a%3c Gen: 160 Gst: 0.007599 (all), 0.008516 (sample) Fst: 0.008386 (all) 0.008455 (sample)%0a%3c Gen: 180 Gst: 0.009159 (all), 0.010090 (sample) Fst: 0.010117 (all) 0.010206 (sample)%0a%3c Gen: 200 Gst: 0.009225 (all), 0.010739 (sample) Fst: 0.010190 (all) 0.010924 (sample)%0a%3c Gen: 220 Gst: 0.011350 (all), 0.011179 (sample) Fst: 0.012546 (all) 0.011421 (sample)%0a%3c Gen: 240 Gst: 0.011750 (all), 0.013076 (sample) Fst: 0.012989 (all) 0.013533 (sample)%0a%3c Gen: 260 Gst: 0.012848 (all), 0.014396 (sample) Fst: 0.014206 (all) 0.014974 (sample)%0a%3c Gen: 280 Gst: 0.014376 (all), 0.015611 (sample) Fst: 0.015899 (all) 0.016332 (sample)%0a%3c Gen: 300 Gst: 0.014542 (all), 0.015677 (sample) Fst: 0.016083 (all) 0.016394 (sample)%0a%3c Gen: 320 Gst: 0.017318 (all), 0.018611 (sample) Fst: 0.019156 (all) 0.019651 (sample)%0a%3c Gen: 340 Gst: 0.019126 (all), 0.019498 (sample) Fst: 0.021157 (all) 0.020635 (sample)%0a%3c Gen: 360 Gst: 0.020142 (all), 0.022216 (sample) Fst: 0.022281 (all) 0.023654 (sample)%0a%3c Gen: 380 Gst: 0.021645 (all), 0.022353 (sample) Fst: 0.023944 (all) 0.023788 (sample)%0a%3c Gen: 400 Gst: 0.022627 (all), 0.023709 (sample) Fst: 0.025030 (all) 0.025303 (sample)%0a%3c Gen: 420 Gst: 0.022979 (all), 0.022245 (sample) Fst: 0.025419 (all) 0.023679 (sample)%0a%3c Gen: 440 Gst: 0.023283 (all), 0.024036 (sample) Fst: 0.025755 (all) 0.025663 (sample)%0a%3c Gen: 460 Gst: 0.023463 (all), 0.024456 (sample) Fst: 0.025954 (all) 0.026116 (sample)%0a%3c Gen: 480 Gst: 0.024137 (all), 0.025089 (sample) Fst: 0.026699 (all) 0.026822 (sample)%0a---%0a> Gen:   0 Gst: 8.414e-05 (all), 9.376e-04 (sample) Fst: 4.357e-05 (all) 4.894e-05 (sample)%0a> Gen:  20 Gst: 8.674e-04 (all), 1.579e-03 (sample) Fst: 9.139e-04 (all) 7.598e-04 (sample)%0a> Gen:  40 Gst: 1.776e-03 (all), 2.679e-03 (sample) Fst: 1.923e-03 (all) 1.981e-03 (sample)%0a> Gen:  60 Gst: 2.436e-03 (all), 2.808e-03 (sample) Fst: 2.656e-03 (all) 2.122e-03 (sample)%0a> Gen:  80 Gst: 3.866e-03 (all), 4.863e-03 (sample) Fst: 4.243e-03 (all) 4.405e-03 (sample)%0a> Gen: 100 Gst: 4.709e-03 (all), 6.395e-03 (sample) Fst: 5.180e-03 (all) 6.110e-03 (sample)%0a> Gen: 120 Gst: 6.458e-03 (all), 7.017e-03 (sample) Fst: 7.121e-03 (all) 6.800e-03 (sample)%0a> Gen: 140 Gst: 8.277e-03 (all), 1.010e-02 (sample) Fst: 9.139e-03 (all) 1.022e-02 (sample)%0a> Gen: 160 Gst: 1.015e-02 (all), 1.081e-02 (sample) Fst: 1.121e-02 (all) 1.101e-02 (sample)%0a> Gen: 180 Gst: 1.122e-02 (all), 1.383e-02 (sample) Fst: 1.240e-02 (all) 1.435e-02 (sample)%0a> Gen: 200 Gst: 1.456e-02 (all), 1.562e-02 (sample) Fst: 1.611e-02 (all) 1.633e-02 (sample)%0a> Gen: 220 Gst: 1.452e-02 (all), 1.477e-02 (sample) Fst: 1.605e-02 (all) 1.540e-02 (sample)%0a> Gen: 240 Gst: 1.397e-02 (all), 1.492e-02 (sample) Fst: 1.545e-02 (all) 1.556e-02 (sample)%0a> Gen: 260 Gst: 1.594e-02 (all), 1.894e-02 (sample) Fst: 1.764e-02 (all) 2.002e-02 (sample)%0a> Gen: 280 Gst: 1.756e-02 (all), 1.842e-02 (sample) Fst: 1.942e-02 (all) 1.944e-02 (sample)%0a> Gen: 300 Gst: 1.735e-02 (all), 1.724e-02 (sample) Fst: 1.919e-02 (all) 1.813e-02 (sample)%0a> Gen: 320 Gst: 1.823e-02 (all), 1.904e-02 (sample) Fst: 2.017e-02 (all) 2.013e-02 (sample)%0a> Gen: 340 Gst: 1.992e-02 (all), 2.121e-02 (sample) Fst: 2.204e-02 (all) 2.253e-02 (sample)%0a> Gen: 360 Gst: 2.086e-02 (all), 2.174e-02 (sample) Fst: 2.307e-02 (all) 2.312e-02 (sample)%0a> Gen: 380 Gst: 2.216e-02 (all), 2.219e-02 (sample) Fst: 2.451e-02 (all) 2.363e-02 (sample)%0a> Gen: 400 Gst: 2.188e-02 (all), 2.397e-02 (sample) Fst: 2.421e-02 (all) 2.558e-02 (sample)%0a> Gen: 420 Gst: 2.270e-02 (all), 2.261e-02 (sample) Fst: 2.511e-02 (all) 2.409e-02 (sample)%0a> Gen: 440 Gst: 2.376e-02 (all), 2.341e-02 (sample) Fst: 2.628e-02 (all) 2.498e-02 (sample)%0a> Gen: 460 Gst: 2.374e-02 (all), 2.317e-02 (sample) Fst: 2.626e-02 (all) 2.471e-02 (sample)%0a> Gen: 480 Gst: 2.690e-02 (all), 2.696e-02 (sample) Fst: 2.975e-02 (all) 2.890e-02 (sample)%0a
host:1250797458=127.0.0.1
author:1250797317=
diff:1250797317:1250796210:=22d21%0a%3c %0a26c25%0a%3c     sample = RandomSample(pop, size=[500]*pop.numSubPop())[0]%0a---%0a>     sample = RandomSample(pop, size=[500, 500, 500])[0]%0a29,30c28%0a%3c         %25 (pop.dvars().gen,%0a%3c            pop.dvars().G_st, sample.dvars().G_st,%0a---%0a>         %25 (pop.dvars().gen, pop.dvars().G_st, sample.dvars().G_st,%0a
host:1250797317=127.0.0.1
author:1250796210=
diff:1250796210:1249587745:=78,111d77%0a%3c %0a%3c If we increase the number of subpopulations, the difference between {$G_{st}$} and {$F_{st}$} becomes smaller. That is to say, if we use 10 subpopulations with size 10000, the output can be:%0a%3c %0a%3c %25box%25 [@%0a%3c Gen:   0 Gst: 8.414e-05 (all), 9.376e-04 (sample) Fst: 4.357e-05 (all) 4.894e-05 (sample)%0a%3c Gen:  20 Gst: 8.674e-04 (all), 1.579e-03 (sample) Fst: 9.139e-04 (all) 7.598e-04 (sample)%0a%3c Gen:  40 Gst: 1.776e-03 (all), 2.679e-03 (sample) Fst: 1.923e-03 (all) 1.981e-03 (sample)%0a%3c Gen:  60 Gst: 2.436e-03 (all), 2.808e-03 (sample) Fst: 2.656e-03 (all) 2.122e-03 (sample)%0a%3c Gen:  80 Gst: 3.866e-03 (all), 4.863e-03 (sample) Fst: 4.243e-03 (all) 4.405e-03 (sample)%0a%3c Gen: 100 Gst: 4.709e-03 (all), 6.395e-03 (sample) Fst: 5.180e-03 (all) 6.110e-03 (sample)%0a%3c Gen: 120 Gst: 6.458e-03 (all), 7.017e-03 (sample) Fst: 7.121e-03 (all) 6.800e-03 (sample)%0a%3c Gen: 140 Gst: 8.277e-03 (all), 1.010e-02 (sample) Fst: 9.139e-03 (all) 1.022e-02 (sample)%0a%3c Gen: 160 Gst: 1.015e-02 (all), 1.081e-02 (sample) Fst: 1.121e-02 (all) 1.101e-02 (sample)%0a%3c Gen: 180 Gst: 1.122e-02 (all), 1.383e-02 (sample) Fst: 1.240e-02 (all) 1.435e-02 (sample)%0a%3c Gen: 200 Gst: 1.456e-02 (all), 1.562e-02 (sample) Fst: 1.611e-02 (all) 1.633e-02 (sample)%0a%3c Gen: 220 Gst: 1.452e-02 (all), 1.477e-02 (sample) Fst: 1.605e-02 (all) 1.540e-02 (sample)%0a%3c Gen: 240 Gst: 1.397e-02 (all), 1.492e-02 (sample) Fst: 1.545e-02 (all) 1.556e-02 (sample)%0a%3c Gen: 260 Gst: 1.594e-02 (all), 1.894e-02 (sample) Fst: 1.764e-02 (all) 2.002e-02 (sample)%0a%3c Gen: 280 Gst: 1.756e-02 (all), 1.842e-02 (sample) Fst: 1.942e-02 (all) 1.944e-02 (sample)%0a%3c Gen: 300 Gst: 1.735e-02 (all), 1.724e-02 (sample) Fst: 1.919e-02 (all) 1.813e-02 (sample)%0a%3c Gen: 320 Gst: 1.823e-02 (all), 1.904e-02 (sample) Fst: 2.017e-02 (all) 2.013e-02 (sample)%0a%3c Gen: 340 Gst: 1.992e-02 (all), 2.121e-02 (sample) Fst: 2.204e-02 (all) 2.253e-02 (sample)%0a%3c Gen: 360 Gst: 2.086e-02 (all), 2.174e-02 (sample) Fst: 2.307e-02 (all) 2.312e-02 (sample)%0a%3c Gen: 380 Gst: 2.216e-02 (all), 2.219e-02 (sample) Fst: 2.451e-02 (all) 2.363e-02 (sample)%0a%3c Gen: 400 Gst: 2.188e-02 (all), 2.397e-02 (sample) Fst: 2.421e-02 (all) 2.558e-02 (sample)%0a%3c Gen: 420 Gst: 2.270e-02 (all), 2.261e-02 (sample) Fst: 2.511e-02 (all) 2.409e-02 (sample)%0a%3c Gen: 440 Gst: 2.376e-02 (all), 2.341e-02 (sample) Fst: 2.628e-02 (all) 2.498e-02 (sample)%0a%3c Gen: 460 Gst: 2.374e-02 (all), 2.317e-02 (sample) Fst: 2.626e-02 (all) 2.471e-02 (sample)%0a%3c Gen: 480 Gst: 2.690e-02 (all), 2.696e-02 (sample) Fst: 2.975e-02 (all) 2.890e-02 (sample)%0a%3c @]%0a%3c %0a%3c %0a%3c %0a%3c %0a
host:1250796210=127.0.0.1
author:1249587745=
diff:1249587745:1249587644:=17c17%0a%3c =python [=%0a---%0a> =python [=#!/usr/bin/env python%0a
host:1249587745=127.0.0.1
author:1249587644=
diff:1249587644:1249587554:=18d17%0a%3c #!/usr/bin/env python%0a27c26%0a%3c     print 'Gen: %253d Gst: %25.6f (all), %25.6f (sample) Fst: %25.6f (all) %25.6f (sample)' \%0a---%0a>     print 'Gen: %253d Gst: %25.3e (all), %25.3e (sample) Fst: %25.3e (all) %25.3e (sample)' \%0a51,75c50,74%0a%3c Gen:   0 Gst: 0.000050 (all), 0.000545 (sample) Fst: 0.000025 (all) -0.000189 (sample)%0a%3c Gen:  20 Gst: 0.000233 (all), 0.001049 (sample) Fst: 0.000300 (all) 0.000586 (sample)%0a%3c Gen:  40 Gst: 0.001564 (all), 0.001374 (sample) Fst: 0.002294 (all) 0.001064 (sample)%0a%3c Gen:  60 Gst: 0.002097 (all), 0.002351 (sample) Fst: 0.003092 (all) 0.002522 (sample)%0a%3c Gen:  80 Gst: 0.002803 (all), 0.002345 (sample) Fst: 0.004149 (all) 0.002512 (sample)%0a%3c Gen: 100 Gst: 0.003123 (all), 0.003653 (sample) Fst: 0.004627 (all) 0.004473 (sample)%0a%3c Gen: 120 Gst: 0.004032 (all), 0.003035 (sample) Fst: 0.005986 (all) 0.003551 (sample)%0a%3c Gen: 140 Gst: 0.004738 (all), 0.006816 (sample) Fst: 0.007041 (all) 0.009195 (sample)%0a%3c Gen: 160 Gst: 0.004622 (all), 0.007112 (sample) Fst: 0.006867 (all) 0.009641 (sample)%0a%3c Gen: 180 Gst: 0.005747 (all), 0.006117 (sample) Fst: 0.008547 (all) 0.008170 (sample)%0a%3c Gen: 200 Gst: 0.006219 (all), 0.006300 (sample) Fst: 0.009250 (all) 0.008449 (sample)%0a%3c Gen: 220 Gst: 0.007188 (all), 0.007680 (sample) Fst: 0.010693 (all) 0.010477 (sample)%0a%3c Gen: 240 Gst: 0.008256 (all), 0.006324 (sample) Fst: 0.012284 (all) 0.008466 (sample)%0a%3c Gen: 260 Gst: 0.008396 (all), 0.008324 (sample) Fst: 0.012492 (all) 0.011446 (sample)%0a%3c Gen: 280 Gst: 0.009328 (all), 0.008011 (sample) Fst: 0.013878 (all) 0.010963 (sample)%0a%3c Gen: 300 Gst: 0.008824 (all), 0.008966 (sample) Fst: 0.013129 (all) 0.012396 (sample)%0a%3c Gen: 320 Gst: 0.010391 (all), 0.009601 (sample) Fst: 0.015457 (all) 0.013354 (sample)%0a%3c Gen: 340 Gst: 0.010343 (all), 0.010922 (sample) Fst: 0.015385 (all) 0.015310 (sample)%0a%3c Gen: 360 Gst: 0.010145 (all), 0.009684 (sample) Fst: 0.015091 (all) 0.013466 (sample)%0a%3c Gen: 380 Gst: 0.012994 (all), 0.014168 (sample) Fst: 0.019316 (all) 0.020123 (sample)%0a%3c Gen: 400 Gst: 0.012513 (all), 0.012029 (sample) Fst: 0.018604 (all) 0.016972 (sample)%0a%3c Gen: 420 Gst: 0.014496 (all), 0.016989 (sample) Fst: 0.021538 (all) 0.024289 (sample)%0a%3c Gen: 440 Gst: 0.012049 (all), 0.011997 (sample) Fst: 0.017916 (all) 0.016896 (sample)%0a%3c Gen: 460 Gst: 0.010773 (all), 0.014430 (sample) Fst: 0.016024 (all) 0.020513 (sample)%0a%3c Gen: 480 Gst: 0.009734 (all), 0.010997 (sample) Fst: 0.014481 (all) 0.015440 (sample)%0a---%0a> Gen:   0 Gst: 1.336e-04 (all), 6.366e-04 (sample) Fst: 1.505e-04 (all) -4.568e-05 (sample)%0a> Gen:  20 Gst: 1.458e-03 (all), 2.740e-03 (sample) Fst: 2.135e-03 (all) 3.086e-03 (sample)%0a> Gen:  40 Gst: 2.012e-03 (all), 2.632e-03 (sample) Fst: 2.965e-03 (all) 2.937e-03 (sample)%0a> Gen:  60 Gst: 2.374e-03 (all), 1.968e-03 (sample) Fst: 3.506e-03 (all) 1.961e-03 (sample)%0a> Gen:  80 Gst: 3.435e-03 (all), 3.337e-03 (sample) Fst: 5.094e-03 (all) 4.013e-03 (sample)%0a> Gen: 100 Gst: 4.655e-03 (all), 3.802e-03 (sample) Fst: 6.917e-03 (all) 4.700e-03 (sample)%0a> Gen: 120 Gst: 5.375e-03 (all), 7.941e-03 (sample) Fst: 7.991e-03 (all) 1.088e-02 (sample)%0a> Gen: 140 Gst: 8.195e-03 (all), 8.658e-03 (sample) Fst: 1.219e-02 (all) 1.193e-02 (sample)%0a> Gen: 160 Gst: 5.936e-03 (all), 6.013e-03 (sample) Fst: 8.828e-03 (all) 8.011e-03 (sample)%0a> Gen: 180 Gst: 5.855e-03 (all), 5.071e-03 (sample) Fst: 8.708e-03 (all) 6.600e-03 (sample)%0a> Gen: 200 Gst: 8.371e-03 (all), 8.513e-03 (sample) Fst: 1.246e-02 (all) 1.174e-02 (sample)%0a> Gen: 220 Gst: 9.538e-03 (all), 1.277e-02 (sample) Fst: 1.419e-02 (all) 1.806e-02 (sample)%0a> Gen: 240 Gst: 1.288e-02 (all), 1.159e-02 (sample) Fst: 1.915e-02 (all) 1.628e-02 (sample)%0a> Gen: 260 Gst: 1.479e-02 (all), 1.607e-02 (sample) Fst: 2.198e-02 (all) 2.292e-02 (sample)%0a> Gen: 280 Gst: 1.344e-02 (all), 1.332e-02 (sample) Fst: 1.997e-02 (all) 1.887e-02 (sample)%0a> Gen: 300 Gst: 1.672e-02 (all), 1.872e-02 (sample) Fst: 2.482e-02 (all) 2.683e-02 (sample)%0a> Gen: 320 Gst: 1.737e-02 (all), 1.884e-02 (sample) Fst: 2.579e-02 (all) 2.702e-02 (sample)%0a> Gen: 340 Gst: 1.971e-02 (all), 2.104e-02 (sample) Fst: 2.923e-02 (all) 3.025e-02 (sample)%0a> Gen: 360 Gst: 2.135e-02 (all), 2.204e-02 (sample) Fst: 3.164e-02 (all) 3.174e-02 (sample)%0a> Gen: 380 Gst: 2.571e-02 (all), 2.626e-02 (sample) Fst: 3.803e-02 (all) 3.791e-02 (sample)%0a> Gen: 400 Gst: 3.037e-02 (all), 3.121e-02 (sample) Fst: 4.483e-02 (all) 4.512e-02 (sample)%0a> Gen: 420 Gst: 3.231e-02 (all), 3.586e-02 (sample) Fst: 4.765e-02 (all) 5.188e-02 (sample)%0a> Gen: 440 Gst: 2.872e-02 (all), 3.194e-02 (sample) Fst: 4.242e-02 (all) 4.621e-02 (sample)%0a> Gen: 460 Gst: 2.704e-02 (all), 2.493e-02 (sample) Fst: 3.997e-02 (all) 3.596e-02 (sample)%0a> Gen: 480 Gst: 3.079e-02 (all), 2.612e-02 (sample) Fst: 4.544e-02 (all) 3.770e-02 (sample)%0a
host:1249587644=127.0.0.1
author:1249587554=
diff:1249587554:1249587492:=48d47%0a%3c %25define=box block bgcolor=#ddddff border="1px blue"%25%0a
host:1249587554=127.0.0.1
author:1249587492=
diff:1249587492:1249587438:=5,6c5,6%0a%3c This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_{st}$} (Weir and Cockerham, 1984) and {$G_{st}$} (Nei 1973) statistics using the @@stat@@ operator.%0a%3c %0a---%0a> This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_st$} (Weir and Cockerham, 1984) and {$G_st$} (Nei 1973) statistics using the @@stat@@ operator.%0a> %0a9,10c9,10%0a%3c At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The {$F_{st}$} and {$G_{st}$} statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a%3c %0a---%0a> At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The {$F_st$} and {$G_st$} statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a> %0a13c13%0a%3c # Population and sample {$F_{st}$} and {$G_{st}$} statistics are different. Because the Weir and Cockerham 1984 estimator of {$F_{st}$} is designed to estimate {$F_{st}$} from random samples of larger populations (it corrects for sampling error), we are supposed to trust {$G_{st}$} for  population estimation, and {$F_{st}$} for sample estimation. It can be interesting to see if {$F_{st}$} estimated from the random sample performs better than the corresponding {$G_{st}$} estimators, by comparing them with the population {$G_{st}$} statistics.%0a---%0a> # Population and sample {$F_st$} and {$G_st$} statistics are different. Because the Weir and Cockerham 1984 estimator of {$F_st$} is designed to estimate {$F_st$} from random samples of larger populations (it corrects for sampling error), we are supposed to trust {$G_st$} for  population estimation, and {$F_st$} for sample estimation. It can be interesting to see if {$F_st$} estimated from the random sample performs better than the corresponding {$G_st$} estimators, by comparing them with the population {$G_st$} statistics.%0a
host:1249587492=127.0.0.1
author:1249587438=
diff:1249587438:1249587263:=5,6c5,6%0a%3c This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate {$F_st$} (Weir and Cockerham, 1984) and {$G_st$} (Nei 1973) statistics using the @@stat@@ operator.%0a%3c %0a---%0a> This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate @@Fst@@ (Weir and Cockerham, 1984) and @@Gst@@ (Nei 1973) statistics using the @@stat@@ operator.%0a> %0a9,10c9,10%0a%3c At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The {$F_st$} and {$G_st$} statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a%3c %0a---%0a> At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The @@Fst@@ and @@Gst@@ statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a> %0a13c13%0a%3c # Population and sample {$F_st$} and {$G_st$} statistics are different. Because the Weir and Cockerham 1984 estimator of {$F_st$} is designed to estimate {$F_st$} from random samples of larger populations (it corrects for sampling error), we are supposed to trust {$G_st$} for  population estimation, and {$F_st$} for sample estimation. It can be interesting to see if {$F_st$} estimated from the random sample performs better than the corresponding {$G_st$} estimators, by comparing them with the population {$G_st$} statistics.%0a---%0a> # Population and sample @@Fst@@ and @@Gst@@ statistics are different. Because the Weir and Cockerham 1984 estimator of @@Fst@@ is designed to estimate @@Fst@@ from random samples of larger populations (it corrects for sampling error), we are supposed to trust @@Gst@@ for  population estimation, and @@Fst@@ for sample estimation. It can be interesting to see if @@Fst@@ estimated from the random sample performs better than the corresponding @@Gst@@ estimators.%0a
host:1249587438=127.0.0.1
author:1249587263=
diff:1249587263:1249587219:=9c9%0a%3c At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The @@Fst@@ and @@Gst@@ statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a---%0a> At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The @@Fst@@ and ##Gst@@ statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a
host:1249587263=127.0.0.1
author:1249587219=
diff:1249587219:1249587190:=35,36c35,36%0a%3c         initByFreq([0.5, 0.5], loci=[0, 2]),%0a%3c         initByFreq([0.2, 0.4, 0.4], loci=[1, 3, 4]),%0a---%0a>         initByFreq([0.5, 0.5], loci=[0, 1]),%0a>         initByFreq([0.2, 0.8], loci=[2, 3, 4]),%0a
host:1249587219=127.0.0.1
author:1249587190=
diff:1249587190:1249587146:=31c31%0a%3c simu = simulator(population([10000]*3, loci=[1]*5, infoFields='migrate_to'),%0a---%0a> simu = simulator(population([10000]*3, loci=[2,3], infoFields='migrate_to'),%0a
host:1249587190=127.0.0.1
author:1249587146=
diff:1249587146:1249587120:=5c5%0a%3c This script demonstrates how subpopulations become more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate @@Fst@@ (Weir and Cockerham, 1984) and @@Gst@@ (Nei 1973) statistics using the @@stat@@ operator.%0a---%0a> This script demonstrates how subpopulations became more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate @@Fst@@ (Weir and Cockerham, 1984) and @@Gst@@ (Nei 1973) statistics using the @@stat@@ operator.%0a
host:1249587146=127.0.0.1
author:1249587120=
diff:1249587120:1249587057:=1c1%0a%3c (:title Population structure, Fst and Gst :)%0a---%0a> (:title Population structure, Fst and Gst estimator :)%0a
host:1249587120=127.0.0.1
author:1249587057=
diff:1249587057:1249587018:=13,16c13,16%0a%3c # Population and sample @@Fst@@ and @@Gst@@ statistics are different. Because the Weir and Cockerham 1984 estimator of @@Fst@@ is designed to estimate @@Fst@@ from random samples of larger populations (it corrects for sampling error), we are supposed to trust @@Gst@@ for  population estimation, and @@Fst@@ for sample estimation. It can be interesting to see if @@Fst@@ estimated from the random sample performs better than the corresponding @@Gst@@ estimators.%0a%3c %0a%3c # This simulation uses random mating, constant population size, equal subpopulation size, and no migration. Changes in these factors may lead to interesting findings.%0a%3c %0a---%0a> #. Population and sample @@Fst@@ and @@Gst@@ statistics are different. Because the Weir and Cockerham 1984 estimator of @@Fst@@ is designed to estimate @@Fst@@ from random samples of larger populations (it corrects for sampling error), we are supposed to trust @@Gst@@ for  population estimation, and @@Fst@@ for sample estimation. It can be interesting to see if @@Fst@@ estimated from the random sample performs better than the corresponding @@Gst@@ estimators.%0a> %0a> #. This simulation uses random mating, constant population size, equal subpopulation size, and no migration. Changes in these factors may lead to interesting findings.%0a> %0a45,46d44%0a%3c %0a%3c The following is one of the possible outputs of the above script:%0a
host:1249587057=127.0.0.1
author:1249587018=
diff:1249587018:1249587006:=13,15c13,15%0a%3c #. Population and sample @@Fst@@ and @@Gst@@ statistics are different. Because the Weir and Cockerham 1984 estimator of @@Fst@@ is designed to estimate @@Fst@@ from random samples of larger populations (it corrects for sampling error), we are supposed to trust @@Gst@@ for  population estimation, and @@Fst@@ for sample estimation. It can be interesting to see if @@Fst@@ estimated from the random sample performs better than the corresponding @@Gst@@ estimators.%0a%3c %0a%3c #. This simulation uses random mating, constant population size, equal subpopulation size, and no migration. Changes in these factors may lead to interesting findings.%0a---%0a> 1. Population and sample @@Fst@@ and @@Gst@@ statistics are different. Because the Weir and Cockerham 1984 estimator of @@Fst@@ is designed to estimate @@Fst@@ from random samples of larger populations (it corrects for sampling error), we are supposed to trust @@Gst@@ for  population estimation, and @@Fst@@ for sample estimation. It can be interesting to see if @@Fst@@ estimated from the random sample performs better than the corresponding @@Gst@@ estimators.%0a> %0a> 2. This simulation uses random mating, constant population size, equal subpopulation size, and no migration. Changes in these factors may lead to interesting findings.%0a
host:1249587018=127.0.0.1
author:1249587006=
diff:1249587006:1249587006:=1,73d0%0a%3c (:title Population structure, Fst and Gst estimator :)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:popStructure.py | http://simupop.sourceforge.net/images/download.jpg]]|popStructure.py%0a%3c %0a%3c This script demonstrates how subpopulations became more and more genetically distinct if there is not enough genetic exchange (migration) between these subpopulations. It also shows how to draw samples from a population and how to calculate @@Fst@@ (Weir and Cockerham, 1984) and @@Gst@@ (Nei 1973) statistics using the @@stat@@ operator.%0a%3c %0a%3c The simulator is created by a population with three subpopulations, each has 10k individuals. Individuals in this population have five unlinked loci (five loci on five chromosomes). The population is initialized by random alleles, with specified frequencies.%0a%3c %0a%3c At every 20 generations during the evolution of this population, 500 individuals are drawn from each of the three subpopulations and form a random sample. The @@Fst@@ and ##Gst@@ statistics are calculated for both the overall population and the random sample. The results are printed to the console.%0a%3c %0a%3c There are several interesting points about this simulation:%0a%3c %0a%3c 1. Population and sample @@Fst@@ and @@Gst@@ statistics are different. Because the Weir and Cockerham 1984 estimator of @@Fst@@ is designed to estimate @@Fst@@ from random samples of larger populations (it corrects for sampling error), we are supposed to trust @@Gst@@ for  population estimation, and @@Fst@@ for sample estimation. It can be interesting to see if @@Fst@@ estimated from the random sample performs better than the corresponding @@Gst@@ estimators.%0a%3c %0a%3c 2. This simulation uses random mating, constant population size, equal subpopulation size, and no migration. Changes in these factors may lead to interesting findings.%0a%3c %0a%3c =python [=#!/usr/bin/env python%0a%3c from simuPOP import *%0a%3c from simuUtil import MigrIslandRates%0a%3c %0a%3c def calcFst(pop):%0a%3c     'Calculate Fst and Gst for the whole population and a random sample'%0a%3c     Stat(pop, structure=range(5), vars=['F_st', 'G_st'])%0a%3c     sample = RandomSample(pop, size=[500, 500, 500])[0]%0a%3c     Stat(sample, structure=range(5), vars=['F_st', 'G_st'])%0a%3c     print 'Gen: %253d Gst: %25.3e (all), %25.3e (sample) Fst: %25.3e (all) %25.3e (sample)' \%0a%3c         %25 (pop.dvars().gen, pop.dvars().G_st, sample.dvars().G_st,%0a%3c            pop.dvars().F_st, sample.dvars().F_st)%0a%3c     return True%0a%3c %0a%3c simu = simulator(population([10000]*3, loci=[2,3], infoFields='migrate_to'),%0a%3c     randomMating())%0a%3c simu.evolve(%0a%3c     preOps = [%0a%3c         initByFreq([0.5, 0.5], loci=[0, 1]),%0a%3c         initByFreq([0.2, 0.8], loci=[2, 3, 4]),%0a%3c     ],%0a%3c     ops = [%0a%3c         # migrator(rate=MigrIslandRates(0.01, 3)),%0a%3c         pyOperator(func=calcFst, step=20),%0a%3c     ],%0a%3c     gen = 500%0a%3c )%0a%3c =]%0a%3c %0a%3c %25box%25 [@%0a%3c Gen:   0 Gst: 1.336e-04 (all), 6.366e-04 (sample) Fst: 1.505e-04 (all) -4.568e-05 (sample)%0a%3c Gen:  20 Gst: 1.458e-03 (all), 2.740e-03 (sample) Fst: 2.135e-03 (all) 3.086e-03 (sample)%0a%3c Gen:  40 Gst: 2.012e-03 (all), 2.632e-03 (sample) Fst: 2.965e-03 (all) 2.937e-03 (sample)%0a%3c Gen:  60 Gst: 2.374e-03 (all), 1.968e-03 (sample) Fst: 3.506e-03 (all) 1.961e-03 (sample)%0a%3c Gen:  80 Gst: 3.435e-03 (all), 3.337e-03 (sample) Fst: 5.094e-03 (all) 4.013e-03 (sample)%0a%3c Gen: 100 Gst: 4.655e-03 (all), 3.802e-03 (sample) Fst: 6.917e-03 (all) 4.700e-03 (sample)%0a%3c Gen: 120 Gst: 5.375e-03 (all), 7.941e-03 (sample) Fst: 7.991e-03 (all) 1.088e-02 (sample)%0a%3c Gen: 140 Gst: 8.195e-03 (all), 8.658e-03 (sample) Fst: 1.219e-02 (all) 1.193e-02 (sample)%0a%3c Gen: 160 Gst: 5.936e-03 (all), 6.013e-03 (sample) Fst: 8.828e-03 (all) 8.011e-03 (sample)%0a%3c Gen: 180 Gst: 5.855e-03 (all), 5.071e-03 (sample) Fst: 8.708e-03 (all) 6.600e-03 (sample)%0a%3c Gen: 200 Gst: 8.371e-03 (all), 8.513e-03 (sample) Fst: 1.246e-02 (all) 1.174e-02 (sample)%0a%3c Gen: 220 Gst: 9.538e-03 (all), 1.277e-02 (sample) Fst: 1.419e-02 (all) 1.806e-02 (sample)%0a%3c Gen: 240 Gst: 1.288e-02 (all), 1.159e-02 (sample) Fst: 1.915e-02 (all) 1.628e-02 (sample)%0a%3c Gen: 260 Gst: 1.479e-02 (all), 1.607e-02 (sample) Fst: 2.198e-02 (all) 2.292e-02 (sample)%0a%3c Gen: 280 Gst: 1.344e-02 (all), 1.332e-02 (sample) Fst: 1.997e-02 (all) 1.887e-02 (sample)%0a%3c Gen: 300 Gst: 1.672e-02 (all), 1.872e-02 (sample) Fst: 2.482e-02 (all) 2.683e-02 (sample)%0a%3c Gen: 320 Gst: 1.737e-02 (all), 1.884e-02 (sample) Fst: 2.579e-02 (all) 2.702e-02 (sample)%0a%3c Gen: 340 Gst: 1.971e-02 (all), 2.104e-02 (sample) Fst: 2.923e-02 (all) 3.025e-02 (sample)%0a%3c Gen: 360 Gst: 2.135e-02 (all), 2.204e-02 (sample) Fst: 3.164e-02 (all) 3.174e-02 (sample)%0a%3c Gen: 380 Gst: 2.571e-02 (all), 2.626e-02 (sample) Fst: 3.803e-02 (all) 3.791e-02 (sample)%0a%3c Gen: 400 Gst: 3.037e-02 (all), 3.121e-02 (sample) Fst: 4.483e-02 (all) 4.512e-02 (sample)%0a%3c Gen: 420 Gst: 3.231e-02 (all), 3.586e-02 (sample) Fst: 4.765e-02 (all) 5.188e-02 (sample)%0a%3c Gen: 440 Gst: 2.872e-02 (all), 3.194e-02 (sample) Fst: 4.242e-02 (all) 4.621e-02 (sample)%0a%3c Gen: 460 Gst: 2.704e-02 (all), 2.493e-02 (sample) Fst: 3.997e-02 (all) 3.596e-02 (sample)%0a%3c Gen: 480 Gst: 3.079e-02 (all), 2.612e-02 (sample) Fst: 4.544e-02 (all) 3.770e-02 (sample)%0a%3c %0a%3c @]%0a
host:1249587006=127.0.0.1
