version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5 (.NET CLR 3.5.30729)
author=blah
charset=ISO-8859-1
csum=
ctime=1232491712
host=127.0.0.1
name=Cookbook.PyOperator
rev=11
targets=
text=(:title An example about Python operator:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:pyOperator.py | http://simupop.sourceforge.net/images/download.jpg]]|pyOperator.py%0a%0a%0a%0aThis is a small example of how to use pyOperator to do custimized mating and condition checking (terminator) etc. This is '''not''' the efficient way to do that since everything can be handled using a post-mating operator.%0a%0aEvolution scenario:%0a%0aA disease spread like this: when one of the chromosomes of a diploid individual has this allele, it will spread to the other copy.%0a%0a    x x x - - - - -     ==>    x x x x x - - -%0a    x x x x x - - -     ==>    x x x x x - - -%0a%0aPurpose of simulation is '''Given N, random mating, how many generations to reach all X status?''' Note that many simulations will fail because all x chromosomes disappeared because of genetic drift.%0a%0a%0aA Python function for a during mating operator can be%0a%0a=python [=%0a# this will be used by a duringMating pyOpertor,%0a# however, for this particular problem, you can %0a# use a postMating operator and handle all invidiauls%0a# one by one. The performance will be *much* better.%0a#%0adef offGen(pop, off, dad, mom):%0a    ''' how to pass allele? %0a        We can of course do everything by ourself, but if we do not%0a        set formOffGenotype of this pyOperator, we can let randomMating()%0a        generate offspring genotype as usual, we just need to change%0a        1 2 to 2 2.%0a    '''%0a    geno = off.genotype()%0a    if geno[0] + geno[1] == 3: # in the case of 1 2 or 2 1%0a        geno[0] = 2%0a        geno[1] = 2%0a    return True%0a=]%0a%0a%0aA Python function for a post-mating Python operator%0a%0a=python [=%0adef allTwos(pop):%0a    ''' see if the genotype of the population is all 2'''%0a    geno = sum(pop.genotype())%0a    # terminate if all 1 (set flag to fail%0a    if geno == pop.popSize()*2:     # all 1%0a        pop.dvars().succ = False%0a		# return false to terminate simulation%0a        return False%0a    # terminate if all 2 (set flag to success)%0a    elif geno == pop.popSize()*4: # all 2%0a        pop.dvars().succ = True%0a		# return false to terminate simulation%0a        return False%0a    else:%0a		# return true to continue simulation%0a        return True%0a=]%0a%0aAn example of using these operators%0a%0a=python [=%0adef simu(N):%0a    ' run the simulation! '%0a    pop = population(N, loci=[1], ploidy=2)%0a    InitByValue(pop, value=[1])%0a    # you can also use a PointerMutator ...%0a    pop.individual(0).setAllele(2,0)%0a    pop.individual(0).setAllele(2,1)%0a    simu = simulator(pop, randomMating())%0a    simu.evolve(%0a        ops=[%0a            pyOperator(stage=DuringMating, func=offGen),%0a            pyOperator(func=allTwos),%0a        ]%0a    )%0a    return (simu.dvars(0).succ, simu.gen())%0a=]%0a%0a
time=1233546916
title=An example about Python operator
author:1233546916=blah
diff:1233546916:1233545821:=82a83,95%0a> %0a> (:commentbox:)%0a> %0a> %0a> !!!!%25block class=messagehead%2502 February 2009%0a> %0a> >>message%3c%3c%0a> !03:32 by '''[[~blah]]'''!some other comments%0a> >>%3c%3c%0a> %0a> >>message%3c%3c%0a> !03:32 by '''[[~blah]]'''!This is a test comment%0a> >>%3c%3c%0a
host:1233546916=127.0.0.1
author:1233545821=blah
diff:1233545821:1233545563:=
host:1233545821=127.0.0.1
author:1233545563=blah
diff:1233545563:1233545543:=86d85%0a%3c %0a88,91d86%0a%3c %0a%3c >>message%3c%3c%0a%3c !03:32 by '''[[~blah]]'''!some other comments%0a%3c >>%3c%3c%0a
host:1233545563=127.0.0.1
author:1233545543=blah
diff:1233545543:1233545511:=84,90c84%0a%3c (:commentbox:)%0a%3c %0a%3c !!!!%25block class=messagehead%2502 February 2009%0a%3c %0a%3c >>message%3c%3c%0a%3c !03:32 by '''[[~blah]]'''!This is a test comment%0a%3c >>%3c%3c%0a---%0a> (:commentbox:)%0a\ No newline at end of file%0a
host:1233545543=127.0.0.1
author:1233545511=
diff:1233545511:1233545443:=
host:1233545511=127.0.0.1
author:1233545443=
diff:1233545443:1233545412:=
host:1233545443=127.0.0.1
author:1233545412=
diff:1233545412:1233545347:=
host:1233545412=127.0.0.1
author:1233545347=
diff:1233545347:1232506895:=84d83%0a%3c (:commentbox:)%0a\ No newline at end of file%0a
host:1233545347=127.0.0.1
author:1232506895=
diff:1232506895:1232491797:=
host:1232506895=127.0.0.1
author:1232491797=
diff:1232491797:1232491712:=7,8c7,11%0a%3c This is a small example of how to use pyOperator to do custimized mating and condition checking (terminator) etc. This is '''not''' the efficient way to do that since everything can be handled using a post-mating operator.%0a%3c %0a---%0a> This is a small example of how to use pyOperator to do%0a> custimized mating and condition checking (terminator) %0a> etc. This is *not* the efficient way to do that since%0a> everything can be handled using a post-mating operator.%0a> %0a11,12c14,17%0a%3c A disease spread like this: when one of the chromosomes of a diploid individual has this allele, it will spread to the other copy.%0a%3c %0a---%0a> A disease spread like this: when one of the chromosomes%0a> of a diploid individual has this allele, it will spread%0a> to the other copy.%0a> %0a16c21,27%0a%3c Purpose of simulation is '''Given N, random mating, how many generations to reach all X status?''' Note that many simulations will fail because all x chromosomes disappeared because of genetic drift.%0a---%0a> Purpose of simulation:%0a> %0a>     Given N, random mating, how many generations to %0a>     reach all X status?%0a> %0a> Note that many simulations will fail because all x%0a> chromosomes disappeared because of genetic drift.%0a
host:1232491797=127.0.0.1
author:1232491712=
diff:1232491712:1232491712:=1,94d0%0a%3c (:title An example about Python operator:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:pyOperator.py | http://simupop.sourceforge.net/images/download.jpg]]|pyOperator.py%0a%3c %0a%3c %0a%3c %0a%3c This is a small example of how to use pyOperator to do%0a%3c custimized mating and condition checking (terminator) %0a%3c etc. This is *not* the efficient way to do that since%0a%3c everything can be handled using a post-mating operator.%0a%3c %0a%3c Evolution scenario:%0a%3c %0a%3c A disease spread like this: when one of the chromosomes%0a%3c of a diploid individual has this allele, it will spread%0a%3c to the other copy.%0a%3c %0a%3c     x x x - - - - -     ==>    x x x x x - - -%0a%3c     x x x x x - - -     ==>    x x x x x - - -%0a%3c %0a%3c Purpose of simulation:%0a%3c %0a%3c     Given N, random mating, how many generations to %0a%3c     reach all X status?%0a%3c %0a%3c Note that many simulations will fail because all x%0a%3c chromosomes disappeared because of genetic drift.%0a%3c %0a%3c %0a%3c A Python function for a during mating operator can be%0a%3c %0a%3c =python [=%0a%3c # this will be used by a duringMating pyOpertor,%0a%3c # however, for this particular problem, you can %0a%3c # use a postMating operator and handle all invidiauls%0a%3c # one by one. The performance will be *much* better.%0a%3c #%0a%3c def offGen(pop, off, dad, mom):%0a%3c     ''' how to pass allele? %0a%3c         We can of course do everything by ourself, but if we do not%0a%3c         set formOffGenotype of this pyOperator, we can let randomMating()%0a%3c         generate offspring genotype as usual, we just need to change%0a%3c         1 2 to 2 2.%0a%3c     '''%0a%3c     geno = off.genotype()%0a%3c     if geno[0] + geno[1] == 3: # in the case of 1 2 or 2 1%0a%3c         geno[0] = 2%0a%3c         geno[1] = 2%0a%3c     return True%0a%3c =]%0a%3c %0a%3c %0a%3c A Python function for a post-mating Python operator%0a%3c %0a%3c =python [=%0a%3c def allTwos(pop):%0a%3c     ''' see if the genotype of the population is all 2'''%0a%3c     geno = sum(pop.genotype())%0a%3c     # terminate if all 1 (set flag to fail%0a%3c     if geno == pop.popSize()*2:     # all 1%0a%3c         pop.dvars().succ = False%0a%3c 		# return false to terminate simulation%0a%3c         return False%0a%3c     # terminate if all 2 (set flag to success)%0a%3c     elif geno == pop.popSize()*4: # all 2%0a%3c         pop.dvars().succ = True%0a%3c 		# return false to terminate simulation%0a%3c         return False%0a%3c     else:%0a%3c 		# return true to continue simulation%0a%3c         return True%0a%3c =]%0a%3c %0a%3c An example of using these operators%0a%3c %0a%3c =python [=%0a%3c def simu(N):%0a%3c     ' run the simulation! '%0a%3c     pop = population(N, loci=[1], ploidy=2)%0a%3c     InitByValue(pop, value=[1])%0a%3c     # you can also use a PointerMutator ...%0a%3c     pop.individual(0).setAllele(2,0)%0a%3c     pop.individual(0).setAllele(2,1)%0a%3c     simu = simulator(pop, randomMating())%0a%3c     simu.evolve(%0a%3c         ops=[%0a%3c             pyOperator(stage=DuringMating, func=offGen),%0a%3c             pyOperator(func=allTwos),%0a%3c         ]%0a%3c     )%0a%3c     return (simu.dvars(0).succ, simu.gen())%0a%3c =]%0a%3c %0a%3c %0a
host:1232491712=127.0.0.1
