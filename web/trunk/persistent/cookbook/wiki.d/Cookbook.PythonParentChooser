version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.5) Gecko/2008120908 Red Hat/3.0.5-1.el5_2 Firefox/3.0.5
author=
charset=ISO-8859-1
csum=
ctime=1232384274
host=127.0.0.1
name=Cookbook.PythonParentChooser
rev=3
targets=
text=(:title Use of a Python parent chooser:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:pythonParentChooser.py | http://simupop.sourceforge.net/images/download.jpg]]|pythonParentChooser.py%0a%0aThis script demonstrates the use of a Python parents chooser to implement a non-random mating scheme.%0a%0aThis mating scheme simulates the mating behavior of long-finned pilot whales (e.g. Amos et al, 1993, Science)%0a%0a* There are several pods, each has around 100 whales%0a* Male and female in the same pod does not mate%0a* Male from one pod will mate with female from other pods%0a%0aThe parent chooser (a Python generator function) is defined below%0a%0a=python [=%0adef podParentsChooser(pop, sp):%0a    '''Choose parents of parents from different pods'''%0a    males = [x for x in range(pop.popSize()) if pop.individual(x).sex() == Male]%0a    females = [x for x in range(pop.popSize()) if pop.individual(x).sex() == Female]%0a    pods = pop.indInfo('pod')%0a    while True:%0a        # randomly choose a male%0a        male = males[random.randint(0, len(males)-1)]%0a        pod = pods[male]%0a        # randomly choose a female from different pod%0a        while True:%0a            female = females[random.randint(0, len(females)-1)]%0a            if pods[female] != pod:%0a                break%0a        yield (male, female)%0a=]%0a%0aA ''Mendelian'' offspring generator is used with this parent chooser to produce offspring:%0a%0a=python [=%0a%0adef simuPodMating(numPods, podSize):%0a    '''%0a    numPods     number of pods%0a    podSize     size of each pod%0a    '''%0a    pop = population(numPods * podSize, loci=[2], infoFields=['pod'])%0a    InitByFreq(pop, [0.2, 0.8])%0a    pop.setIndInfo([x for z in range(numPods) for x in [z]*podSize], 'pod')%0a    pop.setVirtualSplitter(infoSplitter('pod', range(numPods)))%0a%0a    simu = simulator(pop, pyMating(%0a        pyParentsChooser(podParentsChooser),%0a        mendelianOffspringGenerator(numOffspring=1)))%0a    simu.evolve(%0a        preOps = [initByFreq([0.5, 0.5])],%0a        ops = [%0a            # offspring stays with their natal pod%0a            inheritTagger(mode=TAG_Maternal, infoFields=['pod']),%0a            # calculate size of pods%0a            stat(popSize=True, stage=PrePostMating),%0a            # print size of each pod%0a            pyEval(r"'Size of pods: %25s\n' %25 (','.join(['%25d' %25 x for x in virtualPopSize[0]]))")%0a            ],%0a        gen = 10%0a    )%0a=]%0a%0a
time=1232488838
title=Use of a Python parent chooser
author:1232488838=
diff:1232488838:1232384283:=1,4d0%0a%3c (:title Use of a Python parent chooser:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:pythonParentChooser.py | http://simupop.sourceforge.net/images/download.jpg]]|pythonParentChooser.py%0a%3c %0a13,14d8%0a%3c The parent chooser (a Python generator function) is defined below%0a%3c %0a15a10,12%0a> from simuPOP import *%0a> import random%0a> %0a31,36c28,29%0a%3c =]%0a%3c %0a%3c A ''Mendelian'' offspring generator is used with this parent chooser to produce offspring:%0a%3c %0a%3c =python [=%0a%3c %0a---%0a> %0a> %0a61a55,57%0a> %0a> if __name__ == '__main__':%0a>     simuPodMating(5, 100)%0a
host:1232488838=127.0.0.1
author:1232384283=
diff:1232384283:1232384274:=9a10%0a> %0a
host:1232384283=127.0.0.1
author:1232384274=
diff:1232384274:1232384274:=1,60d0%0a%3c This script demonstrates the use of a Python parents chooser to implement a non-random mating scheme.%0a%3c %0a%3c This mating scheme simulates the mating behavior of long-finned pilot whales (e.g. Amos et al, 1993, Science)%0a%3c %0a%3c * There are several pods, each has around 100 whales%0a%3c * Male and female in the same pod does not mate%0a%3c * Male from one pod will mate with female from other pods%0a%3c %0a%3c =python [=%0a%3c %0a%3c from simuPOP import *%0a%3c import random%0a%3c %0a%3c def podParentsChooser(pop, sp):%0a%3c     '''Choose parents of parents from different pods'''%0a%3c     males = [x for x in range(pop.popSize()) if pop.individual(x).sex() == Male]%0a%3c     females = [x for x in range(pop.popSize()) if pop.individual(x).sex() == Female]%0a%3c     pods = pop.indInfo('pod')%0a%3c     while True:%0a%3c         # randomly choose a male%0a%3c         male = males[random.randint(0, len(males)-1)]%0a%3c         pod = pods[male]%0a%3c         # randomly choose a female from different pod%0a%3c         while True:%0a%3c             female = females[random.randint(0, len(females)-1)]%0a%3c             if pods[female] != pod:%0a%3c                 break%0a%3c         yield (male, female)%0a%3c %0a%3c %0a%3c def simuPodMating(numPods, podSize):%0a%3c     '''%0a%3c     numPods     number of pods%0a%3c     podSize     size of each pod%0a%3c     '''%0a%3c     pop = population(numPods * podSize, loci=[2], infoFields=['pod'])%0a%3c     InitByFreq(pop, [0.2, 0.8])%0a%3c     pop.setIndInfo([x for z in range(numPods) for x in [z]*podSize], 'pod')%0a%3c     pop.setVirtualSplitter(infoSplitter('pod', range(numPods)))%0a%3c %0a%3c     simu = simulator(pop, pyMating(%0a%3c         pyParentsChooser(podParentsChooser),%0a%3c         mendelianOffspringGenerator(numOffspring=1)))%0a%3c     simu.evolve(%0a%3c         preOps = [initByFreq([0.5, 0.5])],%0a%3c         ops = [%0a%3c             # offspring stays with their natal pod%0a%3c             inheritTagger(mode=TAG_Maternal, infoFields=['pod']),%0a%3c             # calculate size of pods%0a%3c             stat(popSize=True, stage=PrePostMating),%0a%3c             # print size of each pod%0a%3c             pyEval(r"'Size of pods: %25s\n' %25 (','.join(['%25d' %25 x for x in virtualPopSize[0]]))")%0a%3c             ],%0a%3c         gen = 10%0a%3c     )%0a%3c %0a%3c if __name__ == '__main__':%0a%3c     simuPodMating(5, 100)%0a%3c =]%0a%3c %0a
host:1232384274=127.0.0.1
