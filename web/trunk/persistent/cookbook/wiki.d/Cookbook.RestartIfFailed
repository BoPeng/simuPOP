version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 GTB5 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1232506623
host=127.0.0.1
name=Cookbook.RestartIfFailed
rev=4
targets=Cookbook.ControlledRandomMating
text=(:title Restart an simulator if certain condition is not met:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:restartIfFailed.py | http://simupop.sourceforge.net/images/download.jpg]]|restartIfFailed.py%0a%0aThis is an example of an evolutionary scenario where a simulation is restarted%0aif certain condition is met.%0a%0aMore specifically, a population with initial frequency @@initFreq@@ is evolved for @@genCheck@@ generations. The evolution will continue only if the frequency of allele 1 at locus 0 is within specified @@freqRange@@.%0a%0aThis example is simple but can be easily applied to cases when continuing a forward-time simulation will not yield meaning results. One such example is a disease allele gets lost. Note that if you would like to control the allele frequency of an allele, [[Cookbook/ControlledRandomMating]] may be better.%0a%0a=python [=%0adef simuRestartIfFailed(N, initFreq, freqRange, gen, genCheck):%0a    '''%0a    Evolve a population, restart the simulation if the allele frequency%0a    is not between freqRange at 'genCheck'.%0a%0a    N:         population size%0a    initFreq:  initial frequency of allele 1%0a    freqRange: range of allele frequency%0a    gen:       total generations to evolve%0a    genCheck:  when to check allele frequency%0a    '''%0a    pop = population(size=N, loci=[1])%0a    InitSex(pop)%0a    InitByFreq(pop, [1 - initFreq, initFreq])%0a    # put freqRange as a population variable so that it can be%0a    # used in an expression%0a    pop.dvars().fr = freqRange%0a    while True:%0a        simu = simulator(pop, randomMating())%0a        evolved = simu.evolve(%0a            postOps = [%0a                stat(alleleFreq=[0], at=genCheck),%0a                terminateIf('alleleFreq[0][1] > fr[1] or alleleFreq[0][1] %3c fr[0]',%0a                    at=genCheck)%0a            ],%0a            gen = gen%0a        )%0a        if evolved[0] != gen:%0a            print 'Restart simulation due to allele frequency %25.3f.' %25 \%0a                simu.dvars(0).alleleFreq[0][1]%0a        else:%0a            print 'Allele frequency %25.3f is within specified range.' %25 \%0a                simu.dvars(0).alleleFreq[0][1]%0a            break%0a=]%0a%0a
time=1261119421
title=Restart an simulator if certain condition is not met
author:1261119421=
diff:1261119421:1232506741:=25d24%0a%3c     InitSex(pop)%0a33c32%0a%3c             postOps = [%0a---%0a>             ops = [%0a46a46,47%0a> %0a> %0a
host:1261119421=127.0.0.1
author:1232506741=
diff:1232506741:1232506704:=12a13%0a> %0a34,35c35%0a%3c                 terminateIf('alleleFreq[0][1] > fr[1] or alleleFreq[0][1] %3c fr[0]',%0a%3c                     at=genCheck)%0a---%0a>                 terminateIf('alleleFreq[0][1] > fr[1] or alleleFreq[0][1] %3c fr[0]', at=genCheck)%0a40,41c40%0a%3c             print 'Restart simulation due to allele frequency %25.3f.' %25 \%0a%3c                 simu.dvars(0).alleleFreq[0][1]%0a---%0a>             print 'Restart simulation due to allele frequency %25.3f.' %25 simu.dvars(0).alleleFreq[0][1]%0a43,44c42%0a%3c             print 'Allele frequency %25.3f is within specified range.' %25 \%0a%3c                 simu.dvars(0).alleleFreq[0][1]%0a---%0a>             print 'Allele frequency %25.3f is within specified range.' %25 simu.dvars(0).alleleFreq[0][1]%0a46d43%0a%3c %0a
host:1232506741=127.0.0.1
author:1232506704=
diff:1232506704:1232506623:=13d12%0a%3c %0a29c28%0a%3c     pop.dvars().fr = freqRange%0a---%0a>     pop.dvars().freqRange = freqRange%0a35c34%0a%3c                 terminateIf('alleleFreq[0][1] > fr[1] or alleleFreq[0][1] %3c fr[0]', at=genCheck)%0a---%0a>                 terminateIf('alleleFreq[0][1] > freqRange[1] or alleleFreq[0][1] %3c freqRange[0]', at=genCheck)%0a40c39%0a%3c             print 'Restart simulation due to allele frequency %25.3f.' %25 simu.dvars(0).alleleFreq[0][1]%0a---%0a>             print 'Allele frequency %25.3f is not within specified range. Restart simulation.' %25 simu.dvars(0).alleleFreq[0][1]%0a
host:1232506704=127.0.0.1
author:1232506623=
diff:1232506623:1232506623:=1,45d0%0a%3c (:title Restart an simulator if certain condition is not met:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:restartIfFailed.py | http://simupop.sourceforge.net/images/download.jpg]]|restartIfFailed.py%0a%3c %0a%3c This is an example of an evolutionary scenario where a simulation is restarted%0a%3c if certain condition is met.%0a%3c %0a%3c More specifically, a population with initial frequency @@initFreq@@ is evolved for @@genCheck@@ generations. The evolution will continue only if the frequency of allele 1 at locus 0 is within specified @@freqRange@@.%0a%3c %0a%3c This example is simple but can be easily applied to cases when continuing a forward-time simulation will not yield meaning results. One such example is a disease allele gets lost. Note that if you would like to control the allele frequency of an allele, [[Cookbook/ControlledRandomMating]] may be better.%0a%3c %0a%3c =python [=%0a%3c def simuRestartIfFailed(N, initFreq, freqRange, gen, genCheck):%0a%3c     '''%0a%3c     Evolve a population, restart the simulation if the allele frequency%0a%3c     is not between freqRange at 'genCheck'.%0a%3c %0a%3c     N:         population size%0a%3c     initFreq:  initial frequency of allele 1%0a%3c     freqRange: range of allele frequency%0a%3c     gen:       total generations to evolve%0a%3c     genCheck:  when to check allele frequency%0a%3c     '''%0a%3c     pop = population(size=N, loci=[1])%0a%3c     InitByFreq(pop, [1 - initFreq, initFreq])%0a%3c     # put freqRange as a population variable so that it can be%0a%3c     # used in an expression%0a%3c     pop.dvars().freqRange = freqRange%0a%3c     while True:%0a%3c         simu = simulator(pop, randomMating())%0a%3c         evolved = simu.evolve(%0a%3c             ops = [%0a%3c                 stat(alleleFreq=[0], at=genCheck),%0a%3c                 terminateIf('alleleFreq[0][1] > freqRange[1] or alleleFreq[0][1] %3c freqRange[0]', at=genCheck)%0a%3c             ],%0a%3c             gen = gen%0a%3c         )%0a%3c         if evolved[0] != gen:%0a%3c             print 'Allele frequency %25.3f is not within specified range. Restart simulation.' %25 simu.dvars(0).alleleFreq[0][1]%0a%3c         else:%0a%3c             print 'Allele frequency %25.3f is within specified range.' %25 simu.dvars(0).alleleFreq[0][1]%0a%3c             break%0a%3c %0a%3c =]%0a%3c %0a
host:1232506623=127.0.0.1
