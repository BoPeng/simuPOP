version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1232384195
host=127.0.0.1
name=Cookbook.Selfing
rev=7
targets=
text=(:title Simulation of partial self-fertilization of certain plants:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:selfing.py | http://simupop.sourceforge.net/images/download.jpg]]|selfing.py%0a%0aThis script demonstrates the use of selfing mating schemes. Because self-fertilization usually only happens to part of the plants in a region, a hetergeneous mating scheme is used to self-fertilize only part of the individuals.%0a%0a%0a=python [=%0adef simuSelfing(perc, N, n_rep, gen):%0a    '''%0a    perc    percentage of individuals under selfing mating schemes%0a    N       population size%0a    n_rep   Number of replicates per simulation%0a    gen     generations to run%0a    '''%0a    pop = Population(N, loci=[2])%0a    pop.setVirtualSplitter(ProportionSplitter([perc, 1-perc]))%0a%0a    simu = Simulator(pop, rep=n_rep)%0a%0a    simu.evolve(%0a        initOps= [%0a            InitSex(),%0a            InitGenotype(genotype=[0, 1, 1, 0]),%0a            PyExec('ld_hist=[]')  # record ld%0a        ],%0a        matingScheme = HeteroMating([%0a            SelfMating(subPops=[(0, 0)]),%0a            RandomMating(subPops=[(0, 1)], ops = Recombinator(rates=0.01))%0a        ]),%0a        postOps=[%0a            Stat(LD=[0,1]),%0a            PyExec('ld_hist.append(LD[0][1])')%0a        ],%0a        gen = gen%0a    )%0a    print simu.dvars(0).ld_hist%0a    return 0%0a%0a%0a=]%0a
time=1262665955
title=Simulation of partial self-fertilization of certain plants
author:1262665955=
diff:1262665955:1261106452:=16,20c16,26%0a%3c     pop = Population(N, loci=[2])%0a%3c     pop.setVirtualSplitter(ProportionSplitter([perc, 1-perc]))%0a%3c %0a%3c     simu = Simulator(pop, rep=n_rep)%0a%3c %0a---%0a>     pop = population(N, loci=[2])%0a>     pop.setVirtualSplitter(proportionSplitter([perc, 1-perc]))%0a> %0a>     simu = simulator(pop,%0a>         heteroMating([%0a>             selfMating(subPops=[(0, 0)]),%0a>             randomMating(subPops=[(0, 1)], ops = recombinator(rates=0.01))%0a>         ]),%0a>         rep=n_rep%0a>     )%0a> %0a23,25c29,31%0a%3c             InitSex(),%0a%3c             InitGenotype(genotype=[0, 1, 1, 0]),%0a%3c             PyExec('ld_hist=[]')  # record ld%0a---%0a>             initSex(),%0a>             initByValue([0, 1, 1, 0]),%0a>             pyExec('ld_hist=[]')  # record ld%0a27,30d32%0a%3c         matingScheme = HeteroMating([%0a%3c             SelfMating(subPops=[(0, 0)]),%0a%3c             RandomMating(subPops=[(0, 1)], ops = Recombinator(rates=0.01))%0a%3c         ]),%0a32,33c34,35%0a%3c             Stat(LD=[0,1]),%0a%3c             PyExec('ld_hist.append(LD[0][1])')%0a---%0a>             stat(LD=[0,1]),%0a>             pyExec('ld_hist.append(LD[0][1])')%0a39,40d40%0a%3c %0a%3c %0a
host:1262665955=127.0.0.1
author:1261106452=
diff:1261106452:1261106305:=21,22c21,22%0a%3c             selfMating(subPops=[(0, 0)]),%0a%3c             randomMating(subPops=[(0, 1)], ops = recombinator(rates=0.01))%0a---%0a>             selfMating(subPop=(0, 0)),%0a>             randomMating(subPop=(0, 1))%0a27,29c27%0a%3c     simu.evolve(%0a%3c         initOps= [%0a%3c             initSex(),%0a---%0a>     simu.evolve(preOps=[%0a33c31,32%0a%3c         postOps=[%0a---%0a>         ops=[%0a>             recombinator(rates=0.01),%0a40a40%0a> %0a
host:1261106452=127.0.0.1
author:1261106305=
diff:1261106305:1244769078:=5c5%0a%3c This script demonstrates the use of selfing mating schemes. Because self-fertilization usually only happens to part of the plants in a region, a hetergeneous mating scheme is used to self-fertilize only part of the individuals.%0a---%0a> This script demonstrates the use of selfing mating schemes. Because self-fertilization usually only happen to part of the plants in a region, a hetergeneous mating scheme is used to self-fertilize only part of the individuals.%0a
host:1261106305=127.0.0.1
author:1244769078=
diff:1244769078:1232488695:=32c32%0a%3c             recombinator(rates=0.01),%0a---%0a>             recombinator(rate=0.01),%0a
host:1244769078=127.0.0.1
author:1232488695=
diff:1232488695:1232488591:=5c5%0a%3c This script demonstrates the use of selfing mating schemes. Because self-fertilization usually only happen to part of the plants in a region, a hetergeneous mating scheme is used to self-fertilize only part of the individuals.%0a---%0a> This script demonstrates the use of selfing mating schemes.%0a
host:1232488695=127.0.0.1
author:1232488591=
diff:1232488591:1232384195:=1,4d0%0a%3c (:title Simulation of partial self-fertilization of certain plants:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:selfing.py | http://simupop.sourceforge.net/images/download.jpg]]|selfing.py%0a%3c %0a8a5,7%0a> %0a> from simuPOP import *%0a> %0a39a39,42%0a> %0a> %0a> if __name__ == '__main__':%0a>     simuSelfing(.4, 1000, 10, 100)%0a
host:1232488591=127.0.0.1
author:1232384195=
diff:1232384195:1232384195:=1,44d0%0a%3c This script demonstrates the use of selfing mating schemes.%0a%3c %0a%3c %0a%3c =python [=%0a%3c %0a%3c from simuPOP import *%0a%3c %0a%3c def simuSelfing(perc, N, n_rep, gen):%0a%3c     '''%0a%3c     perc    percentage of individuals under selfing mating schemes%0a%3c     N       population size%0a%3c     n_rep   Number of replicates per simulation%0a%3c     gen     generations to run%0a%3c     '''%0a%3c     pop = population(N, loci=[2])%0a%3c     pop.setVirtualSplitter(proportionSplitter([perc, 1-perc]))%0a%3c %0a%3c     simu = simulator(pop,%0a%3c         heteroMating([%0a%3c             selfMating(subPop=(0, 0)),%0a%3c             randomMating(subPop=(0, 1))%0a%3c         ]),%0a%3c         rep=n_rep%0a%3c     )%0a%3c %0a%3c     simu.evolve(preOps=[%0a%3c             initByValue([0, 1, 1, 0]),%0a%3c             pyExec('ld_hist=[]')  # record ld%0a%3c         ],%0a%3c         ops=[%0a%3c             recombinator(rate=0.01),%0a%3c             stat(LD=[0,1]),%0a%3c             pyExec('ld_hist.append(LD[0][1])')%0a%3c         ],%0a%3c         gen = gen%0a%3c     )%0a%3c     print simu.dvars(0).ld_hist%0a%3c     return 0%0a%3c %0a%3c %0a%3c if __name__ == '__main__':%0a%3c     simuSelfing(.4, 1000, 10, 100)%0a%3c %0a%3c =]%0a
host:1232384195=127.0.0.1
