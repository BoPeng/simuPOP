version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1
author=Matt Johnson
charset=ISO-8859-1
csum=
ctime=1271346242
host=172.29.30.66
name=Cookbook.SimuGWAS
rev=37
targets=Profiles.MattJohnson
text=(:title Simulation of samples for Genome-Wide Association Studies:)%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuGWAS.zip | http://simupop.sourceforge.net/images/download.jpg]]|simuGWAS.zip%0a%0a%25color=red%25NOTE: These script are still in under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%0a%0a!! List of scripts%0aThe file simuGWAS.zip contains several files, including:%0a%0a:'''[[Attach:simuGWAS.py | simuGWAS.py]]''': This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used%0a%0a:'''[[Attach:loadHapMap2.py | loadHapMap2.py]]''': This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset%0a%0a:'''[[Attach:loadHapMap3.py | loadHapMap3.py]]''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/ and downloads the fine-scale recombination map from http://ftp.hapmap.org/recombination/2008-03_rel22_B36/rates/ and saves the genetic distance of each marker in a dictionary (geneticMap) in each population's local namespace.%0a%0a->The saved populations have the following features:%0a%0a->1. Different populations are saved in different files. These populations may not be merged directly because they have different set of markers. Subpopulation name is specified ('ASW', 'CEU', 'CHB'...).%0a%0a->2. Chromosome names are saved as "1", "2", "3", ...%0a%0a->3. Basepairs are used to specify physical distances of loci.%0a%0a->4. Alleles are saved as 0 and 1 as appear in the HapMap datafile. Allele names such as 'A', 'G' are saved for each marker.%0a%0a->5. A dictionary 'geneticMap' is used to store genetic distance of each marker.%0a%0a:'''[[Attach:selectMarkers.py | selectMarkers.py]]''': This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a%0a:'''[[Attach:example1.py | example1.py]]''': This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a%0a:'''[[Attach:example2.py | example2.py]]''': This example simulates a case-control sample using a gene environment interaction model%0a%0a:'''[[Attach:example3.py | example3.py]]''': This example simulates recent and remote selective sweep and draw trio samples%0a%0a:'''[[Attach:example4.py | example4.py]]''': This example simulates an admixed population%0a%0a %25color=red%25These examples are described in detailed in [[http://www.biomedcentral.com/1471-2105/11/442/abstract|this paper]]%25%25. Please do not hesitate to contact me for any question. More examples will be added when simuGWAS.py is used to produce other types of samples.%0a%0a!! Steps of simulation%0a%0a# Download HapMap data using loadHapMap2.py or loadHapMap3.py. Because of the size of the datasets, you do not have to download all the data at once.%0a%0a# Select individuals and markers from HapMap 2 or 3 markers using selectMarkers.py. You can select markers by chromosome, region, number of markers, marker distance, and minor allele frequency, or from a list of markers stored in a file.%0a%0a# Run simuGWAS.py to evolve the initial population, with optional disease loci and selection pressure. This step will generate a population with a large number of individuals.%0a%0a# Following one of the examples to process the simulated population and draw samples. If your simulation closely mimics what one of the examples does, you can use the script with perhaps changes to the parameters. Otherwise, you will need to learn some simuPOP in order to change these script or write your own post-processing scripts.%0a%0a!! How to execute these scripts%0a%0a!!!! Graphical user interface%0aThe easiest way to run loadHapMap2.py, loadHapMap3.py, selectMarkers.py and simuGWAS.py is to use their graphical user interfaces. When you execute these scripts without parameter, parameter input dialogs will be displayed so that you can input parameters interactively. For example, the GUI of script simuGWAS.py is%0a%0aAttach:simuGWAS.jpg%0a%0a!!!! Using command line parameters%0a%0aIf you need to run these scripts in batch mode, you can use parameter @@--gui=False@@ to disable GUI and use command line options to input parameters. If some of the parameters are not specified, your will be prompted to input them. Please use %0a%0a->@@> simuGWAS.py -h@@%0a%0ato check what options are available.%0a%0a!!!! Use a Python script.%0a%0aAll these scripts could be imported from another script. Because it is clear to specify all parameters in a script, all examples (example1.py, ... example4.py) import and executes script in this way. After these populations are simulated, these scripts use different techniques to analyze them.%0a%0a%0a%0a!!!!%25block class=messagehead%2513 June 2011%0a%0a>>message%3c%3c%0a!20:44 by '''[[~Matt Johnson]]'''!It should be noted that to run the script example2.py as provided, the file HumanHap550v3_A.lst (list of all Illumina markers) is needed. I downloaded what I think is a similar file from here: http://www.openbioinformatics.org/gengen/gengen_download.html%0a%0aI had to change the file to be comma delimited rather than tabs. This list of Illumina markers seems to be different, because 'rs4491689' is the 2944th marker on chromosome 2, and the original example2.py script only grabs 2000 markers on chromosome 2. Once I updated this to grab 3000 markers from each chromosome, example2.py executed correctly.%0a%0aI can upload a corrected version if it's desired.%0a>>%3c%3c%0a%0a
time=1307997864
title=Simulation of samples for Genome-Wide Association Studies
author:1307997864=Matt Johnson
diff:1307997864:1284065340:=67,78d66%0a%3c %0a%3c %0a%3c %0a%3c !!!!%25block class=messagehead%2513 June 2011%0a%3c %0a%3c >>message%3c%3c%0a%3c !20:44 by '''[[~Matt Johnson]]'''!It should be noted that to run the script example2.py as provided, the file HumanHap550v3_A.lst (list of all Illumina markers) is needed. I downloaded what I think is a similar file from here: http://www.openbioinformatics.org/gengen/gengen_download.html%0a%3c %0a%3c I had to change the file to be comma delimited rather than tabs. This list of Illumina markers seems to be different, because 'rs4491689' is the 2944th marker on chromosome 2, and the original example2.py script only grabs 2000 markers on chromosome 2. Once I updated this to grab 3000 markers from each chromosome, example2.py executed correctly.%0a%3c %0a%3c I can upload a corrected version if it's desired.%0a%3c >>%3c%3c%0a
host:1307997864=172.29.30.66
author:1284065340=
diff:1284065340:1284062821:=4c4%0a%3c %25color=red%25NOTE: These script are still in under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%0a---%0a> %25color=red%25NOTE: These script are still in under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1284065340=127.0.0.1
author:1284062821=
diff:1284062821:1284062638:=37,38c37,38%0a%3c  %25color=red%25These examples are described in detailed in [[http://www.biomedcentral.com/1471-2105/11/442/abstract|this paper]]%25%25. Please do not hesitate to contact me for any question. More examples will be added when simuGWAS.py is used to produce other types of samples.%0a%3c %0a---%0a> More examples will be added when simuGWAS.py is used to produce other types of samples.%0a> %0a66c66%0a%3c All these scripts could be imported from another script. Because it is clear to specify all parameters in a script, all examples (example1.py, ... example4.py) import and executes script in this way. After these populations are simulated, these scripts use different techniques to analyze them.%0a---%0a> All these scripts could be imported from another script. Because it is clear to specify all parameters in a script, all examples (example1.py, ... example4.py) import and executes script in this way. After these populations are simulated, these scripts use different techniques to analyze them. %25color=red%25These examples are described in detailed in a paper that is currently under review. Please do not hesitate to contact me for any question.%25%25%0a
host:1284062821=127.0.0.1
author:1284062638=
diff:1284062638:1284062490:=43c43%0a%3c # Select individuals and markers from HapMap 2 or 3 markers using selectMarkers.py. You can select markers by chromosome, region, number of markers, marker distance, and minor allele frequency, or from a list of markers stored in a file.%0a---%0a> # Select individuals and markers from download HapMap markers using selectMarkers.py. You can select markers by chromosome, region, number of markers, marker distance, and minor allele frequency, or from a list of markers stored in a file.%0a
host:1284062638=127.0.0.1
author:1284062490=
diff:1284062490:1276394345:=36,37d35%0a%3c %0a%3c More examples will be added when simuGWAS.py is used to produce other types of samples.%0a
host:1284062490=127.0.0.1
author:1276394345=
diff:1276394345:1276394021:=49d48%0a%3c !!!! Graphical user interface%0a54,64c53,65%0a%3c !!!! Using command line parameters%0a%3c %0a%3c If you need to run these scripts in batch mode, you can use parameter @@--gui=False@@ to disable GUI and use command line options to input parameters. If some of the parameters are not specified, your will be prompted to input them. Please use %0a%3c %0a%3c ->@@> simuGWAS.py -h@@%0a%3c %0a%3c to check what options are available.%0a%3c %0a%3c !!!! Use a Python script.%0a%3c %0a%3c All these scripts could be imported from another script. Because it is clear to specify all parameters in a script, all examples (example1.py, ... example4.py) import and executes script in this way. After these populations are simulated, these scripts use different techniques to analyze them. %25color=red%25These examples are described in detailed in a paper that is currently under review. Please do not hesitate to contact me for any question.%25%25%0a---%0a> !!!!Command line%0a> To run in command line, from Python GUI input:%0a> %0a>     > simuGWAS.py --gui=False%0a> %0a> !!!!Python GUI%0a> To run in GUI, just delete the --gui=False from example above:%0a> %0a>     > simuGWAS.py%0a> %0a> This webpage is under construction. We are testing the scripts and adding more documentation to them. Detailed descriptions on how to use the attached scripts will follow.%0a> %0a> The scripts should be usable but the examples are only described in a paper that is currently under review. Please do not hesitate to contact me for any question.%0a
host:1276394345=127.0.0.1
author:1276394021=
diff:1276394021:1276392691:=49,51c49,51%0a%3c The easiest way to run loadHapMap2.py, loadHapMap3.py, selectMarkers.py and simuGWAS.py is to use their graphical user interfaces. When you execute these scripts without parameter, parameter input dialogs will be displayed so that you can input parameters interactively. For example, the GUI of script simuGWAS.py is%0a%3c %0a%3c Attach:simuGWAS.jpg%0a---%0a> There are a couple of ways to run the files in simuGWAS:%0a> *Command line (cmd)%0a> *Python GUI%0a
host:1276394021=127.0.0.1
author:1276392691=
diff:1276392691:1276383197:=6c6%0a%3c !! List of scripts%0a---%0a> !!simuGWAS%0a37,47c37%0a%3c !! Steps of simulation%0a%3c %0a%3c # Download HapMap data using loadHapMap2.py or loadHapMap3.py. Because of the size of the datasets, you do not have to download all the data at once.%0a%3c %0a%3c # Select individuals and markers from download HapMap markers using selectMarkers.py. You can select markers by chromosome, region, number of markers, marker distance, and minor allele frequency, or from a list of markers stored in a file.%0a%3c %0a%3c # Run simuGWAS.py to evolve the initial population, with optional disease loci and selection pressure. This step will generate a population with a large number of individuals.%0a%3c %0a%3c # Following one of the examples to process the simulated population and draw samples. If your simulation closely mimics what one of the examples does, you can use the script with perhaps changes to the parameters. Otherwise, you will need to learn some simuPOP in order to change these script or write your own post-processing scripts.%0a%3c %0a%3c !! How to execute these scripts%0a---%0a> !!!How to execute simuGWAS%0a
host:1276392691=127.0.0.1
author:1276383197=
diff:1276383197:1276380415:=3,4d2%0a%3c %0a%3c %25color=red%25NOTE: These script are still in under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1276383197=127.0.0.1
author:1276380415=
diff:1276380415:1276380333:=27,33c27,33%0a%3c :'''[[Attach:example1.py | example1.py]]''': This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a%3c %0a%3c :'''[[Attach:example2.py | example2.py]]''': This example simulates a case-control sample using a gene environment interaction model%0a%3c %0a%3c :'''[[Attach:example3.py | example3.py]]''': This example simulates recent and remote selective sweep and draw trio samples%0a%3c %0a%3c :'''[[Attach:example4.py | example4.py]]''': This example simulates an admixed population%0a---%0a> :'''example1.py''': This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a> %0a> :'''example2.py''': This example simulates a case-control sample using a GxE model%0a> %0a> :'''example3.py''': This example simulates recent and remote selective sweep and draw trio samples%0a> %0a> :'''example4.py''': This example simulates an admixed population%0a
host:1276380415=127.0.0.1
author:1276380333=
diff:1276380333:1276380318:=11c11,12%0a%3c :'''[[Attach:loadHapMap3.py | loadHapMap3.py]]''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/ and downloads the fine-scale recombination map from http://ftp.hapmap.org/recombination/2008-03_rel22_B36/rates/ and saves the genetic distance of each marker in a dictionary (geneticMap) in each population's local namespace.%0a---%0a> :'''[[Attach:loadHapMap3.py | loadHapMap3.py]]''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/ and downloads the fine-scale recombination map from%0a> http://ftp.hapmap.org/recombination/2008-03_rel22_B36/rates/ and saves the genetic distance of each marker in a dictionary (geneticMap) in each population's local namespace.%0a
host:1276380333=127.0.0.1
author:1276380318=
diff:1276380318:1272488167:=5,11c5,13%0a%3c The file simuGWAS.zip contains several files, including:%0a%3c %0a%3c :'''[[Attach:simuGWAS.py | simuGWAS.py]]''': This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used%0a%3c %0a%3c :'''[[Attach:loadHapMap2.py | loadHapMap2.py]]''': This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset%0a%3c %0a%3c :'''[[Attach:loadHapMap3.py | loadHapMap3.py]]''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/ and downloads the fine-scale recombination map from%0a---%0a> The file simuGWAS.zip contains several files. They include:%0a> %0a> :'''simuGWAS.py''': This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used%0a> %0a> :'''selectMarkers''': This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a> %0a> :'''loadHapMap2.py''': This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset%0a> %0a> :'''loadHapMap3.py''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/ and downloads the fine-scale recombination map from%0a18,19c20,21%0a%3c ->2. Chromosome names are saved as "1", "2", "3", ...%0a%3c %0a---%0a> ->2. Chromosome name is saved as "1", "2", "3", ...%0a> %0a25,26d26%0a%3c %0a%3c :'''[[Attach:selectMarkers.py | selectMarkers.py]]''': This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a
host:1276380318=127.0.0.1
author:1272488167=
diff:1272488167:1272487787:=13,15c13,18%0a%3c :'''loadHapMap3.py''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/ and downloads the fine-scale recombination map from%0a%3c http://ftp.hapmap.org/recombination/2008-03_rel22_B36/rates/ and saves the genetic distance of each marker in a dictionary (geneticMap) in each population's local namespace.%0a%3c %0a---%0a> :'''loadHapMap3.py''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/%0a> ->Also downloads the fine-scale recombination map from%0a> http://ftp.hapmap.org/recombination/2008-03_rel22_B36/rates/%0a> and saves the genetic distance of each marker in a dictionary%0a> (geneticMap) in each population's local namespace.%0a> %0a46,50d48%0a%3c %0a%3c !!!!Python GUI%0a%3c To run in GUI, just delete the --gui=False from example above:%0a%3c %0a%3c     > simuGWAS.py%0a
host:1272488167=127.0.0.1
author:1272487787=
diff:1272487787:1272487762:=27c27,28%0a%3c ->4. Alleles are saved as 0 and 1 as appear in the HapMap datafile. Allele names such as 'A', 'G' are saved for each marker.%0a---%0a> ->4. Alleles are saved as 0 and 1 as appear in the HapMap datafile. Allele%0a> names such as 'A', 'G' are saved for each marker.%0a
host:1272487787=127.0.0.1
author:1272487762=
diff:1272487762:1272487641:=10a11,18%0a> :'''example1.py''': This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a> %0a> :'''example2.py''': This example simulates a case-control sample using a GxE model%0a> %0a> :'''example3.py''': This example simulates recent and remote selective sweep and draw trio samples%0a> %0a> :'''example4.py''': This example simulates an admixed population%0a> %0a25,27c33,35%0a%3c ->3. Basepairs are used to specify physical distances of loci.%0a%3c %0a%3c ->4. Alleles are saved as 0 and 1 as appear in the HapMap datafile. Allele%0a---%0a> 3. Basepairs are used to specify physical distances of loci.%0a> %0a> 4. Alleles are saved as 0 and 1 as appear in the HapMap datafile. Allele%0a30,38c38,39%0a%3c ->5. A dictionary 'geneticMap' is used to store genetic distance of each marker.%0a%3c %0a%3c :'''example1.py''': This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a%3c %0a%3c :'''example2.py''': This example simulates a case-control sample using a GxE model%0a%3c %0a%3c :'''example3.py''': This example simulates recent and remote selective sweep and draw trio samples%0a%3c %0a%3c :'''example4.py''': This example simulates an admixed population%0a---%0a> 5. A dictionary 'geneticMap' is used to store genetic distance of each marker.%0a> %0a
host:1272487762=127.0.0.1
author:1272487641=
diff:1272487641:1272487333:=48c48,50%0a%3c To run in command line, from Python GUI input:%0a---%0a> We use cmd on a Window OS. In order to run simuGWAS here, you need to:%0a> *Input the directory where the file is located (e.g. cd Documents\Project,etc...)%0a> *Next, input the name of your file (i.e. 'XXXXX.py')%0a
host:1272487641=127.0.0.1
author:1272487333=
diff:1272487333:1272486625:=6c6,8%0a%3c %0a---%0a> *selectMarkers%0a> **This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a> %0a9,10c11%0a%3c :'''selectMarkers''': This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a%3c %0a---%0a> %0a15,19c16,24%0a%3c :'''example3.py''': This example simulates recent and remote selective sweep and draw trio samples%0a%3c %0a%3c :'''example4.py''': This example simulates an admixed population%0a%3c %0a%3c :'''loadHapMap2.py''': This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset%0a---%0a> *example3.py%0a> **This example simulates recent and remote selective sweep and draw %0a>   trio samples%0a> %0a> *example4.py%0a> **This example simulates an admixed population%0a> %0a> *loadHapMap2.py%0a> **This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset%0a
host:1272487333=127.0.0.1
author:1272486625=
diff:1272486625:1272486338:=6,11c6%0a%3c *selectMarkers%0a%3c **This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a%3c %0a%3c :'''simuGWAS.py''': This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used%0a%3c %0a%3c %0a---%0a> %0a27c22%0a%3c ->Also downloads the fine-scale recombination map from%0a---%0a> **Also downloads the fine-scale recombination map from%0a32,37c27,34%0a%3c ->The saved populations have the following features:%0a%3c %0a%3c ->1. Different populations are saved in different files. These populations may not be merged directly because they have different set of markers. Subpopulation name is specified ('ASW', 'CEU', 'CHB'...).%0a%3c %0a%3c ->2. Chromosome name is saved as "1", "2", "3", ...%0a%3c %0a---%0a> The saved populations have the following features:%0a> %0a> 1. Different populations are saved in different files. These populations%0a> may not be merged directly because they have different set of markers.%0a> Subpopulation name is specified ('ASW', 'CEU', 'CHB'...).%0a> %0a> 2. Chromosome name is saved as "1", "2", "3", ...%0a> %0a45c42,47%0a%3c %0a---%0a> *selectMarkers%0a> **This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a> %0a> *simuGWAS%0a> **This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used%0a> %0a56,57d57%0a%3c %0a%3c     > simuGWAS.py --gui=False%0a
host:1272486625=127.0.0.1
author:1272486338=
diff:1272486338:1272486328:=21c21%0a%3c :'''loadHapMap3.py''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/%0a---%0a> ''':loadHapMap3.py''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/%0a
host:1272486338=127.0.0.1
author:1272486328=
diff:1272486328:1272486294:=21c21,22%0a%3c ''':loadHapMap3.py''': This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/%0a---%0a> *loadHapMap3.py%0a> **This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/%0a
host:1272486328=127.0.0.1
author:1272486294=
diff:1272486294:1272486264:=7,9c7,10%0a%3c :'''example1.py''': This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a%3c %0a%3c :'''example2.py''': This example simulates a case-control sample using a GxE model%0a---%0a> :example1.py: This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a> %0a> *example2.py%0a> **This example simulates a case-control sample using a GxE model%0a
host:1272486294=127.0.0.1
author:1272486264=
diff:1272486264:1272486066:=7c7,8%0a%3c :example1.py: This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a---%0a> *example1.py%0a> **This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a
host:1272486264=127.0.0.1
author:1272486066=
diff:1272486066:1272485039:=7,25c7,19%0a%3c *example1.py%0a%3c **This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated%0a%3c %0a%3c *example2.py%0a%3c **This example simulates a case-control sample using a GxE model%0a%3c %0a%3c *example3.py%0a%3c **This example simulates recent and remote selective sweep and draw %0a%3c   trio samples%0a%3c %0a%3c *example4.py%0a%3c **This example simulates an admixed population%0a%3c %0a%3c *loadHapMap2.py%0a%3c **This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset%0a%3c %0a%3c *loadHapMap3.py%0a%3c **This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/%0a%3c **Also downloads the fine-scale recombination map from%0a---%0a> *example1.py(This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated)%0a> %0a> *example2.py(This example simulates a case-control sample using a GxE model)%0a> %0a> *example3.py(This example simulates recent and remote selective sweep and draw %0a> trio samples)%0a> %0a> *example4.py(This example simulates an admixed population)%0a> %0a> *loadHapMap2.py(This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset)%0a> %0a> *loadHapMap3.py(This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/;%0a> also downloads the fine-scale recombination map from%0a33,35c27,29%0a%3c may not be merged directly because they have different set of markers.%0a%3c Subpopulation name is specified ('ASW', 'CEU', 'CHB'...).%0a%3c %0a---%0a>   may not be merged directly because they have different set of markers.%0a>   Subpopulation name is specified ('ASW', 'CEU', 'CHB'...).%0a> %0a41,49c35,42%0a%3c names such as 'A', 'G' are saved for each marker.%0a%3c %0a%3c 5. A dictionary 'geneticMap' is used to store genetic distance of each marker.%0a%3c %0a%3c *selectMarkers%0a%3c **This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using selected markers and populations%0a%3c %0a%3c *simuGWAS%0a%3c **This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used%0a---%0a>   names such as 'A', 'G' are saved for each marker.%0a> %0a> 5. A dictionary 'geneticMap' is used to store genetic distance of each marker.)%0a> %0a> *selectMarkers(This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using%0a> selected markers and populations)%0a> %0a> *simuGWAS(This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used)%0a
host:1272486066=127.0.0.1
author:1272485039=
diff:1272485039:1272484946:=41,43d40%0a%3c %0a%3c *simuGWAS(This script evolves a population forward in time, subject to rapid population expansion, mutation, recombination and natural selection. A trajectory simulation method is used to control the allele frequency of optional disease predisposing loci. A scaling approach can be used to improve efficiency when weak, additive genetic factors are used)%0a%3c %0a
host:1272485039=127.0.0.1
author:1272484946=
diff:1272484946:1272045661:=18,40c18,19%0a%3c *loadHapMap3.py(This script downloads and loads release 3 of hapmap phase 3 datasets in ftp://ftp.ncbi.nlm.nih.gov/hapmap//phasing/2009-02_phaseIII/HapMap3_r2/;%0a%3c also downloads the fine-scale recombination map from%0a%3c http://ftp.hapmap.org/recombination/2008-03_rel22_B36/rates/%0a%3c and saves the genetic distance of each marker in a dictionary%0a%3c (geneticMap) in each population's local namespace.%0a%3c %0a%3c The saved populations have the following features:%0a%3c %0a%3c 1. Different populations are saved in different files. These populations%0a%3c   may not be merged directly because they have different set of markers.%0a%3c   Subpopulation name is specified ('ASW', 'CEU', 'CHB'...).%0a%3c %0a%3c 2. Chromosome name is saved as "1", "2", "3", ...%0a%3c %0a%3c 3. Basepairs are used to specify physical distances of loci.%0a%3c %0a%3c 4. Alleles are saved as 0 and 1 as appear in the HapMap datafile. Allele%0a%3c   names such as 'A', 'G' are saved for each marker.%0a%3c %0a%3c 5. A dictionary 'geneticMap' is used to store genetic distance of each marker.)%0a%3c %0a%3c *selectMarkers(This python module provides several utility functions that handles HapMap populations. When used as a script, this module creates a population using%0a%3c selected markers and populations)%0a---%0a> *loadHapMap3.py()%0a> %0a
host:1272484946=127.0.0.1
author:1272045661=
diff:1272045661:1272045337:=6d5%0a%3c %0a8d6%0a%3c %0a10,13c8%0a%3c %0a%3c *example3.py(This example simulates recent and remote selective sweep and draw %0a%3c trio samples)%0a%3c %0a---%0a> *example3.py(This example simulates recent and remote selective sweep and draw trio samples)%0a15,18d9%0a%3c %0a%3c *loadHapMap2.py(This python module provides function loadHapMapPop to download and import the HapMap populations. It can also be served as a script to download part or all populations from the phase 2 of the HapMap dataset)%0a%3c %0a%3c *loadHapMap3.py()%0a
host:1272045661=127.0.0.1
author:1272045337=
diff:1272045337:1271920212:=6,9c6,8%0a%3c *example1.py(This example generates a sample using default parameters. and compares it with the HapMap population from which it is generated)%0a%3c *example2.py(This example simulates a case-control sample using a GxE model)%0a%3c *example3.py(This example simulates recent and remote selective sweep and draw trio samples)%0a%3c *example4.py(This example simulates an admixed population)%0a---%0a> *%0a> *%0a> *%0a
host:1272045337=127.0.0.1
author:1271920212=
diff:1271920212:1271883069:=5,8d4%0a%3c The file simuGWAS.zip contains several files. They include:%0a%3c *%0a%3c *%0a%3c *%0a
host:1271920212=127.0.0.1
author:1271883069=
diff:1271883069:1271878908:=3,4d2%0a%3c %0a%3c !!simuGWAS%0a
host:1271883069=127.0.0.1
author:1271878908=
diff:1271878908:1271878631:=6c6%0a%3c There are a couple of ways to run the files in simuGWAS:%0a---%0a> There are a couple of ways to use and execute the files in simuGWAS:%0a11c11%0a%3c We use cmd on a Window OS. In order to run simuGWAS here, you need to:%0a---%0a> We use cmd on a Window OS. In order to execute simuGWAS here, you need to:%0a
host:1271878908=127.0.0.1
author:1271878631=
diff:1271878631:1271877471:=13c13%0a%3c *Next, input the name of your file (i.e. 'XXXXX.py')%0a---%0a> *Next, input 'cd' along with the name of your file (i.e. 'cd example.py')%0a
host:1271878631=127.0.0.1
author:1271877471=
diff:1271877471:1271875751:=9,13d8%0a%3c %0a%3c !!!!Command line%0a%3c We use cmd on a Window OS. In order to execute simuGWAS here, you need to:%0a%3c *Input the directory where the file is located (e.g. cd Documents\Project,etc...)%0a%3c *Next, input 'cd' along with the name of your file (i.e. 'cd example.py')%0a
host:1271877471=127.0.0.1
author:1271875751=
diff:1271875751:1271874788:=5,8d4%0a%3c %0a%3c There are a couple of ways to use and execute the files in simuGWAS:%0a%3c *Command line (cmd)%0a%3c *Python GUI%0a
host:1271875751=127.0.0.1
author:1271874788=
diff:1271874788:1271346519:=3,4d2%0a%3c %0a%3c !!!How to execute simuGWAS%0a
host:1271874788=127.0.0.1
author:1271346519=
diff:1271346519:1271346432:=
host:1271346519=127.0.0.1
author:1271346432=
diff:1271346432:1271346242:=5,6d4%0a%3c %0a%3c The scripts should be usable but the examples are only described in a paper that is currently under review. Please do not hesitate to contact me for any question.%0a
host:1271346432=127.0.0.1
author:1271346242=
diff:1271346242:1271346242:=1,5d0%0a%3c (:title Simulation of samples for Genome-Wide Association Studies:)%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuGWAS.zip | http://simupop.sourceforge.net/images/download.jpg]]|simuGWAS.zip%0a%3c %0a%3c This webpage is under construction. We are testing the scripts and adding more documentation to them. Detailed descriptions on how to use the attached scripts will follow.%0a%3c %0a
host:1271346242=127.0.0.1
