version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 5.1; rv:2.0) Gecko/20100101 Firefox/4.0
author=
charset=ISO-8859-1
csum=
ctime=1276205703
host=172.29.30.70
name=Cookbook.SimuRareVariants
rev=77
targets=
text=(:title Simulation of genome sequences with rare variants:)%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:srv.py | http://simupop.sourceforge.net/images/download.jpg]]|srv.py%0a%0a%25color=red%25NOTE%25%25:%0a%0a* This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%0a%0a* There is a bug in simuPOP 1.0.5 that prevents srv.py from reporting correct fitness values in the map file when the fitness values are returned from a user-defined function. This bug does not affect the script when fitness values are determined from a built-in gamma distribution.%0a%0a* This script is used to simulate mutants at all nucleotide locus over a short genome region, and should not be used to simulate sequences of, for example, more than 1 million basepairs (unless you are simulating a small population of no more than 10,000 individuals).%0a%0a* If you notice an error for memory allocation error, it is likely that you are using a 32bit operating system. Please consider running this script on a 64 OS with 64 bit of python and simuPOP, and with at least 4G of RAM.%0a%0a%0a%25color=red%25NEWS%25%25:%0a%0a* May 4, 2011: An updated version is uploaded. This version adds a parameter @@postHook@@ to the function so that a Python function can be called, for example to draw a sample, at the end of each generation. An example can be seen [[Attach:evol.py|here]].%0a%0a(:toc:)%0a%0a!! Introduction%0a%0aThis script simulates the introduction and evolution of genetic variants in one or more ''regions'' of chromosomes. These regions span roughly 10k to 100k basepair and can be considered as a gene. During evolution, mutants are introduced to the population and change the fitness of individuals who carry these mutants. '''The most distinguishing feature of this script is that it allows multi-locus fitness schemes with random or locus-specific diploid single-locus selection models to newly arising mutants'''. A multi-locus selection model is used to assign a fitness value to individuals according the mutants they carry.%0a%0a!!! Genotype structure%0a%0aWe assume one or more regions of chromosomes. Mutation can happen at any nucleotide locus which causes change of fitness of individuals carrying these mutants. The regions should be specified as @@'ch1:1..50000'@@. A list of regions is acceptable.%0a%0a!!! Demographic model%0a%0aThis script uses a multi-stage population expansion / bottleneck model with population structure. Assuming there are n stages, the demographic model can be specified by%0a%0a->@@N = [N0, N1, ..., N_n-1, N_n]@@%0a->@@G = [G0, G1, ..., G_n-1]@@%0a->@@splitTo = [p1, p2, ..., pm]@@ and @@splitAt@@%0a%0awhere N is the starting population size and size at the end of each stage, G is the number of generations at each stage, p1, p2, ..., pm are proportions of subpopulations (should sum to 1). Then,%0a%0a* If {$N_t \lt N_{t+1}$}, an exponential population expansion model is used to expand population from size {$N_t$} to {$N_{t+1}$}.%0a* If {$N_t > N_{t+1}$}, an instant population reduction model is used to reduce population size instantly to {$N_{t+1}$}. %0a* If {$m > 1$}, the population will be split into @@m@@ subpopulations according to proportions p1, ..., pm, at geneartion @@splitAt@@.%0a%0aThe default demographic model consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of this demographic model evolves a relatively small population of 8100 individuals until it reaches a mutation selection equilibrium. After a short bottleneck stage of 7900 individuals, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009) and should be specified as%0a%0a->@@N=[8100, 8100, 7900, 900000], G=[8000, 100, 370]@@.%0a%0a!!! Mutation model%0a%0aThis script supports two mutation models%0a%0a* A default '''finite-sites mutation model''' where mutations can happen at any locus. If a mutant is mutated, it will be mutated back to a wildtype allele.%0a%0a* A '''infinite-sites mutation model''' where mutations can happen only at loci without existing mutant. If a mutation hits a locus with existing locus, it will be relocated to another locus without existing mutant, or be ignored if no such locus can be identified.%0a%0aThis script can output a mutant file that dump all mutation events during evolution. This file has the format of%0a%0a->@@generation location individual_index type@@%0a%0awhere type is 0 for forward, 1 for backward, 2 for relocated and 3 for ignored mutations.%0a%0a%25red%25NOTE: If you are using an infinite-sites model, please pay attention to the number of segregation sites (column 3 of the output) and see if the population has been saturated with new mutants (#segregation site == #sites).%25%25%0a!!! Selection model%0a%0aA random distribution is used to assign selection coefficients to newly arising mutations. This program incorporates multiple sets of selection parameters estimated from human genome data using different demographic models (Boyko, et al., 2008; Eyre-Walker, et al., 2006; Kryukov, et al., 2009; Williamson, et al., 2005).  For example, using a mixed gamma distribution, a mutant can have a selection coefficient of zeros (neutral alleles) or a random number drawn from a gamma distribution ranging from -0.00001 to -0.1 (Kryukov, et al., 2009).%0a%0aSingle locus selection model is specified using a selection coefficient ''s'' and a dominance coefficient ''h'' (default to 0.5), which assigns fitness 1, 1-hs and 1-s for genotypes 00, 01/10 and 11 (0 is wildtype allele) respectively.%0a%0aIf there are multiple mutants, the overall fitness of an individual is determined by either a multiplicative, an additive, or an exponential model. %0a%0a* An multiplicative model where {$f = \prod f_i$}%0a* An additive model where {$f=1-\sum\left(1-f_{i}\right)$}%0a* An exponential model (default) where {$f=\exp\left(\sum\left(1-f_{i}\right)\right)$}%0a%0a%25red%25NOTE: Fixed sites are reverted to wildtype alleles to avoid problems such as the Muller's Ratchet%25%25. You can remove operator RevertFixedSites from the script if this is not what you need.%0a%0a!!! Recombination%0a%0aBecause this script simulates small regions of chromosomes, recombination is usually ignored. However, if you would like to simulate longer regions, or simulate special cases such as unlinked loci (r=0.5), you can specify a recombination rate using parameter @@recRate@@, which specifies recombination rate per basepair per generation.%0a%0a%25red%25This script works best for either full recombination (r=0.5) or realistic LD (e.g. r %3c 1e-5), specifying large recombination rates (e.g. r=0.1) will results in low performance due to excessive number of recombinations.%25%25%0a%0a!!! Migration%0a%0aIf a population is split into m subpopulations, a migration rate @@migrRate@@ can be specified to migrate individuals between subpopulations using an island model.%0a%0a!!! Output%0a%0aThe end result of this script include%0a%0a* A file that saves population statistics if parameter @@statFile@@ is specified. Otherwise, the statistics will be written to standard output.%0a%0a* A map file that contains the mutant location, frequency, selection coefficient and dominance coefficient. %0a%0a* A mutant file that contains location of mutants of each individual.%0a%0a* One or more simuPOP population that can be imported to simuPOP and analyzed.%0a%0a%25blue%25Note that fixed mutants are not counted as segregation sites but are included in the map and mutant files.%25%25%0a%0a!! Installation%0a%0aThis script requires simuPOP 1.0.5 to execute. The installation steps are described in detail in the simuPOP website. If you are using windows, please%0a* Download and install Python 2.6 from http://www.python.org.%0a* Download and install simuPOP 1.0.5 or later from http://sourceforge.net/projects/simupop/files/%0a* Download %25red%25[[Attach:srv.py|srv.py]]%25%25 and execute.%0a%0a!! How to use this script%0a%0a!!! Graphical user interface%0a%0aThis script can be run from a graphical user interface.%0a%0aAttach:simuRareVariants.jpg%0a%0a%0a!!! Run from a command line in batch mode%0a%0aIf you need to run it in batch mode, you can use command line, using options such as%0a%0a->@@> simuRareVariants.py --gui=batch --selDist=gamma3@@%0a%0aDefault values will be used for unspecified parameters. %0a%0a!!! Import simuRareVariants from another script%0a%0aYou can import this script from another Python script and call its functions directly. Please see scripts in the examples section for details.%0a%0a!!! Complete list of options%0a%0aThis is the output of @@simuRareVariants.py -h@@%0a%0aSimulating a population of sequences forward in time, subject to mutation,%0anatural selection and population expansion. Because most mutants are introduced%0aduring the rapid population expansion, most of the alleles will be rare at the%0aend of the simulation. Samples simulated using this script can be used to study%0agenetic diseases caused by a large number of rare variants.%0a%0ausage: srv.py [--opt[=arg]] ...%0a%0aoptions:%0a  -h, --help%0a        Display this help message and exit.%0a%0a  --config=ARG (default: None)%0a        Load parameters from a configuration file ARG.%0a%0a  --optimized%0a        Run the script using an optimized simuPOP module.%0a%0a  --gui=[batch|interactive|True|Tkinter|wxPython] (default: None)%0a        Run the script in batch, interactive or GUI mode.%0a%0a  --regions=ARG  (default: ['chr1:1..50000'])%0a        A region (in basepair) means a piece of chromosome in which mutations%0a        can happen. A region should be expressed as chrXX:YYYY..ZZZZ where XX is%0a        chromosome number, YYYY is the starting position in basepair and ZZZZ is%0a        the ending position in basepair. The starting position should be at%0a        least one. If multiple regions are specified as a list of regions, they%0a        are assumed to be unlinked and will segregate independently even if they%0a        are on the same chromosome.%0a%0a  --initPop=ARG  (default: '')%0a        Name of an initial population. If this file exists, it will be loaded%0a        and the evolution will start from this population, instead of a blank%0a        population.%0a%0a  --N=ARG  (default: [8100, 8100, 7900, 900000])%0a        Assuming a n stage demographic model, this parameter specifies%0a        population sizes at the beginning of evolution and at the end of each%0a        stage. N_0,...,N_n. If N_i %3c N_i+1, an exponential population expansion%0a        model will be used to expand population from size N_i to N_i+1. If N_i %3c%0a        N_i+1, an instant population reduction will reduce population size to%0a        N_i+1. For example%0a          N=(1000,1000,100,1000)%0a        simulates a three stage demographic model where a population of constant%0a        size goes through a bottleneck of 100 indiviudals, and then expands%0a        exponentially to a size of 1000.%0a%0a  --G=ARG  (default: [5000, 10, 370])%0a        Numbers of generations of each stage of a n stage demographic model.%0a        This parameter should have n elements, in comparison to n+1 elements for%0a        parameter N.%0a%0a  --splitTo=ARG  (default: [1])%0a        This parameter, if specified, should be a list of proportions that add%0a        up to 1. The length of this list specifies the number of subpopulations%0a        to split.%0a%0a  --splitAt=ARG  (default: 0)%0a        Split the population at specified generation according to specified%0a        proportions.%0a%0a  --mutationModel=ARG  (default: 'finite_sites')%0a        Mutation model. The default mutation model is a finite-site model that%0a        allows mutations at any locus. If a mutant is mutated, it will be%0a        mutated to a wildtype allele. Alternatively, an infinite-sites model can%0a        be simulated where new mutants must happen at loci without existing%0a        mutant, unless no vacant loci is available (a warning message will be%0a        printed in that case).%0a%0a  --mu=ARG  (default: 1.8e-08)%0a        Mutation rate%0a%0a  --selModel=ARG  (default: 'multiplicative')%0a        Multi-locus selection model, namely how to obtain an overall individual%0a        fitness after obtaining fitness values at all loci. This script supports%0a        three models:%0a            multiplicative: prod (f_i) Product of individual fitness.%0a            additive: max(0, 1 - sum(1-f_i)) One minus the combined selection%0a        deficiencies.%0a            exponential: exp(sum(1-f_i)) Exponential of combined selection%0a        deficiencies.%0a        Note that f_i can be equal to or greater than zero, which represents%0a        neutral loci, or loci under positive selection.%0a%0a  --selDist=ARG  (default: 'constant')%0a        Distribution of selection coefficient for new mutants. Each distribution%0a        specifies s (selection coefficient) and h (dominance coefficient,%0a        default to 0.5 for additivity) that assign fitness values 1, 1-hs and%0a        1-s for genotypes AA (wildtype), Aa and aa, respectively. Note that%0a        positive s is used for negative selection so negative s is needed to%0a        specify positive selection. Note that we use 2k in the default%0a        distribution of Gamma distributions because theoretical estimates of s%0a        is for each mutant with 1-2s as fitness value for genotype aa in our%0a        model. This script currently support the following distributions:%0a        * constant: A single selection coefficient that gives each mutant a%0a        constant value s. The default parameter for this model is 0.01, 0.5. You%0a        can set selCoef to 0 to simulate neutral cases or a negative value for%0a        positive selection.%0a        * gamma1: A basic gamma distribution assuming a constant population size%0a        model (Eyre-Walker et al, 2006). The default parameters for this model%0a        is Pr(s=x)=Gamma(0.23, 0.185*2), with h=0.5. A scaling parameter 0.185*2%0a        is used because s in our simulation accounts for 2s for Eyre-Walker et%0a        al.%0a        * gamma2: A gamma distribution assuming a two-epoch population size%0a        change model for African population (Boyko et al, 2008). The default%0a        parameters for this model is Pr(s=x)=Gamma(0.184, 0.160*2), with h=0.5.%0a        * gamma3: A gamma distribution (for s) assuming a complex bottleneck%0a        model for European population (Boyko et al, 2008). The default%0a        parameters for this model is Pr(s=x)=Gamma(0.206, 0.146*2) with h=0.5.%0a        * mixed_gamma: Parameter of this model should be a list of (a, p, k,%0a        theta, h) where a is the probability of having s=p (neutral or adptive%0a        sites), k, theta are the parameter of a gamma distribution Recomended%0a        parameter is (0.0186, 0.0001, 0.184, 0.160*2, 0.5) for%0a        P(s=0.0001)=0.0186 and P(s=x)=(1-0.0186)*Gamma(0.184,0.160*2).%0a        If you would like to define your own selection model, please define your%0a        own function and pass it to parameter selDist of function%0a        simuRareVariants in the script.%0a%0a  --selCoef=ARG  (default: None)%0a        Selection coefficient with its meaning determined by parameter selDist.%0a        If None is given, the default parameter for the selected distribution%0a        will be used. For example, parameter (0.001, 0) for a constant model%0a        defines a recessive model with fixed s. Note that a parameter of (k,%0a        theta, h) is needed for gamma distributions.%0a%0a  --recRate=ARG  (default: 0)%0a        Recombination rate per base pair. If r times loci distance if greater%0a        than 0.5, a rate of 0.5 will be used.%0a%0a  --migrRate=ARG  (default: 0)%0a        Migration rate to migrate individuals between subpoulations after the%0a        population is split into several subpopulations. An island model is%0a        used.%0a%0a  --extMutantFile=ARG  (default: '')%0a        If a population is given, mutants from this population will be added to%0a        the population at specified generation. Only loci that are within the%0a        specified regions will be inserted. This population will be resized to%0a        population size at addMutantsAt before it is merged to the simulated%0a        population. This population is usually prepared using selectMarkers.py,%0a        using HapMap populations loaded using scripts loadHapMap2.py and%0a        loadHapMap3.py. These scripts are available from the simuPOP cookbook.%0a%0a  --addMutantsAt=ARG  (default: 0)%0a        Generation number at which mutants from an external population will be%0a        inserted to the evolving population.%0a%0a  --steps=ARG  (default: [100])%0a        Calculate and output statistics at intervals of specified number of%0a        generations. A single number or a list of numbers for each stage can be%0a        specified. If left unspecified, statistics at the beginning of each%0a        stage will be printed.%0a%0a  --statFile=ARG  (default: '')%0a        File to output statistics. Default to standard output.%0a%0a  --popFile=ARG  (default: 'output.pop')%0a        Filename to which the evolving population will be saved in simuPOP%0a        format. The default value of this parameter is 'output.pop', which saves%0a        the population at the end of the evolution to file 'output.pop'.%0a        Optionally, one or more generation numbers can be provided, in which%0a        case, the filename should be specified as an expression. For example,%0a        parameter ('!"output_%25d.pop" %25 gen', (5000, -1)) saves the evolving%0a        population at the end of generation 5000, and the last generation.%0a        Please check the simuPOP user's guide for the use of expression in%0a        operator savePopulation.%0a%0a  --markerFile=ARG  (default: 'output.map')%0a        Filename to which the marker information, including marker name%0a        (reg+index), chromosome, location, allele frequency and selection%0a        coefficient are saved. Monomorphic markers are ignored.%0a%0a  --mutantFile=ARG  (default: 'output.mut')%0a        Filename to which the mutants are outputed. The file will be saved in%0a        the format of%0a            ind_id mut1 mut2 ...%0a        where ind_id is the index of individual (1, 2, ...), mut1 and mut2 are%0a        locations of mutants. Haplotypes for different regions and homologous%0a        chromosomes are saved in different lines in the order of%0a          reg1_ploidy1%0a          reg1_ploidy2%0a          reg2_ploidy1%0a          reg2_ploidy2%0a          ...%0a%0a  --genotypeFile=ARG  (default: '')%0a        Filename to which the genotypes of all individuals are saved. The file%0a        will be saved in the format of%0a                famid id fa mo sex aff loc1_a1 loc1_a2 loc2_a1 loc2_a2 ...%0a        where famid is 1, 2, 3, ... id is always 1, fa, mo is always 0. Wildtype%0a        and mutant alleles are denoted by 0 and 1 respectively. This option is%0a        turned off by default because this format is not efficient in storing a%0a        small number of mutants.%0a%0a  --verbose=ARG  (default: 1)%0a        0 for quiet, 1 for regular output, 2 for debug output. In the debug%0a        output, a file 'mutations.lst' will be saved with all mutation events.%0a        This option is not visible from gui.%0a%0a%0a%0a!! Examples%0a%0a!!! Apply a penetrance or quantitative trait model%0a%0aThe selected population can be imported and post-processed using simuPOP. If you need to apply a quantitative trait model to the simulated population, you can use a function @@pyQuanTrait@@ using a user-defined function. The only difference is that 'alleles' in the simulated population are locations of mutants. Penetrance model can be assigned similarly. %0a%0aExample %25red%25[[Attach:quanTraits.py|quanTraits.py]]%25%25 demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a%0aExample %25red%25[[Attach:pedigree.py|pedigree.py]]%25%25 demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a%0aThese scripts import that calls the simuRareVariant function directly and uses functions defined in that script to save samples.%0a%0a!!! Arbitrary distribution of selection coefficients.%0a%0aThe graphical user interface allows you to perform simulations for fix types (constant, gamma and mixed gamma). If you would like to define you own distribution, you can define a function that returns selection coefficient according to your distribution and pass it to the simuRareVariants function of simuRareVariants.py. You might need to use simuPOP's random number generation functions listed in [[http://simupop.sourceforge.net/manual_release/build/refManual_ch2_sec5.html#class-rng | here]].%0a%0aExample %25red%25[[Attach:myDist.py|myDist.py]]%25%25 demonstrates how to define such a function.%0a%0a!!! Location-specific selection coefficients%0a%0aIf you would like to define a selection model with selection coefficients related to mutation location. You can add a parameter @@loc@@ to the distribution function. In that case, the location (in basepair) of the new mutant will be passed to your function. This feature allows you to define a neutral region within a larger region under selection, or return neutral for mutation happens at the last nucleotide of a codon. Moreover, if you have fixed set of selection coefficients, you can use this feature to pass them to the script.%0a%0aExample %25red%25[[Attach:locSpecific.py|locSpecific.py]]%25%25 demonstrates how to define a fitness function that returns location-specific fitness values.%0a%0a!!! Analyze all mutation events%0a%0aIf you would like to have a list of all mutation events happened during the evolutionary process, you can add @@--verbose=2@@ to the command line. This will generate a file named @@mutations.lst@@ which lists all mutations in the format of%0a%0a->@@generation  location  individual_index type@@%0a%0awhere type is 0 for forward mutation, 1 for backward mutation and 2 for ignored mutation in the infinite-site model. You can process this file to trace the age of all mutants.%0a%0a%0aExample %25red%25[[Attach:mutAge.py|mutAge.py]]%25%25 demonstrates how to process this file and calculate the age of all mutants.%0a%0a!! Extending simuRareVariants.py%0a%0a!!! Output more statistics such as the fitness value of everyone.%0a%0aThe default output of this script includes population size, number of segregation sites, average number of segregation sites per individual, average frequency of all mutants, average and mean fitness of individuals. You can modify the script to get more output. For example, you can use operator @@infoEval@@ with @@output='>>fitness.txt'"@@ to output fitness values for all individuals to a file. Please refer to the simuPOP user's guide on how to use these parameters.%0a%0a!! References%0a%0a* Boyko AR, Williamson SH, Indap AR, Degenhardt JD, Hernandez RD, Lohmueller KE, Adams MD, Schmidt S, Sninsky JJ, Sunyaev SR, White TJ, Nielsen R, Clark AG, Bustamante CD: Assessing the evolutionary impact of amino acid mutations in the human genome. PLoS Genet 2008;4:e1000083.%0a%0a* Eyre-Walker A, Woolfit M, Phelps T: The distribution of fitness effects of new deleterious amino acid mutations in humans. Genetics 2006;173:891-900.%0a%0a* Kryukov GV, Pennacchio LA, Sunyaev SR: Most rare missense alleles are deleterious in humans: Implications for complex disease and association studies. Am J Hum Genet 2007;80:727-739. %0a%0a* Williamson SH, Hernandez R, Fledel-Alon A, Zhu L, Nielsen R, Bustamante CD: Simultaneous inference of selection and population growth from patterns of variation in the human genome. Proc Natl Acad Sci U S A 2005;102:7882-7887.%0a%0a
time=1304541049
title=Simulation of genome sequences with rare variants
author:1304541049=
diff:1304541049:1304541021:=17c17%0a%3c * May 4, 2011: An updated version is uploaded. This version adds a parameter @@postHook@@ to the function so that a Python function can be called, for example to draw a sample, at the end of each generation. An example can be seen [[Attach:evol.py|here]].%0a---%0a> * May 4, 2011: An updated version is uploaded. This version adds a parameter @@postHook@@ to the function so that a Python function can be called, for example to draw a sample, at the end of each generation. An example can be seen [[Attach:evolve.py|here]].%0a
host:1304541049=172.29.30.70
author:1304541021=
diff:1304541021:1304540883:=17c17%0a%3c * May 4, 2011: An updated version is uploaded. This version adds a parameter @@postHook@@ to the function so that a Python function can be called, for example to draw a sample, at the end of each generation. An example can be seen [[Attach:evolve.py|here]].%0a---%0a> * May 4, 2011: An updated version is uploaded. This version adds a parameter @@postHook@@ to the function so that a Python function can be called, for example to draw a sample, at the end of each generation. An example can be seen [[attach:evolve.py|here]].%0a
host:1304541021=172.29.30.76
author:1304540883=
diff:1304540883:1304540822:=
host:1304540883=172.29.30.69
author:1304540822=
diff:1304540822:1299534296:=13,17d12%0a%3c %0a%3c %0a%3c %25color=red%25NEWS%25%25:%0a%3c %0a%3c * May 4, 2011: An updated version is uploaded. This version adds a parameter @@postHook@@ to the function so that a Python function can be called, for example to draw a sample, at the end of each generation. An example can be seen [[attach:evolve.py|here]].%0a
host:1304540822=172.29.30.67
author:1299534296=
diff:1299534296:1297268117:=348c348%0a%3c If you would like to define a selection model with selection coefficients related to mutation location. You can add a parameter @@loc@@ to the distribution function. In that case, the location (in basepair) of the new mutant will be passed to your function. This feature allows you to define a neutral region within a larger region under selection, or return neutral for mutation happens at the last nucleotide of a codon. Moreover, if you have fixed set of selection coefficients, you can use this feature to pass them to the script.%0a---%0a> If you would like to define a selection model with selection coefficients related to mutation location. You can add a parameter @@loc@@ to the distribution function. In that case, the location (in basepair) of the new mutant will be passed to your function. This feature allows you to define a neutral region within a larger region under selection, or return neutral for mutation happens at the last nucleotide of a condon. Moreover, if you have fixed set of selection coefficients, you can use this feature to pass them to the script.%0a
host:1299534296=172.29.30.74
author:1297268117=
diff:1297268117:1297268071:=3a4,5%0a> %25color=red%25This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%25%25%0a> %0a5,6d6%0a%3c %0a%3c * This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%0a
host:1297268117=127.0.0.1
author:1297268071=
diff:1297268071:1297263932:=6,12c6,8%0a%3c %25color=red%25NOTE%25%25:%0a%3c %0a%3c * There is a bug in simuPOP 1.0.5 that prevents srv.py from reporting correct fitness values in the map file when the fitness values are returned from a user-defined function. This bug does not affect the script when fitness values are determined from a built-in gamma distribution.%0a%3c %0a%3c * This script is used to simulate mutants at all nucleotide locus over a short genome region, and should not be used to simulate sequences of, for example, more than 1 million basepairs (unless you are simulating a small population of no more than 10,000 individuals).%0a%3c %0a%3c * If you notice an error for memory allocation error, it is likely that you are using a 32bit operating system. Please consider running this script on a 64 OS with 64 bit of python and simuPOP, and with at least 4G of RAM.%0a---%0a> %25color=red%25NOTE%25%25: There is a bug in simuPOP 1.0.5 that prevents srv.py from reporting correct fitness values in the map file when the fitness values are returned from a user-defined function. This bug does not affect the script when fitness values are determined from a built-in gamma distribution.%0a> %0a> %25color=red%25NOTE%25%25: This script is used to simulate mutants at all nucleotide locus over a short genome region, and should not be used to simulate sequences of, for example, more than 1 million basepairs (unless you are simulating a small population of no more than 10,000 individuals).%0a
host:1297268071=127.0.0.1
author:1297263932=
diff:1297263932:1297263849:=95c95%0a%3c * Download and install simuPOP 1.0.5 or later from http://sourceforge.net/projects/simupop/files/%0a---%0a> * Download and install simuPOP 1.0.5 from http://sourceforge.net/projects/simupop/files/%0a
host:1297263932=127.0.0.1
author:1297263849=
diff:1297263849:1297263826:=4,5c4,5%0a%3c %25color=red%25This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%25%25%0a%3c %0a---%0a> %25color=red%25NOTE: This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%25%25%0a> %0a8c8%0a%3c %25color=red%25NOTE%25%25: This script is used to simulate mutants at all nucleotide locus over a short genome region, and should not be used to simulate sequences of, for example, more than 1 million basepairs (unless you are simulating a small population of no more than 10,000 individuals).%0a---%0a> %25color=read%25NOTE%25%25: This script is used to simulate mutants at all nucleotide locus over a short genome region, and should not be used to simulate sequences of, for example, more than 1 million basepairs (unless you are simulating a small population of no more than 10,000 individuals).%0a
host:1297263849=127.0.0.1
author:1297263826=
diff:1297263826:1295888692:=6,8c6%0a%3c %25color=red%25NOTE%25%25: There is a bug in simuPOP 1.0.5 that prevents srv.py from reporting correct fitness values in the map file when the fitness values are returned from a user-defined function. This bug does not affect the script when fitness values are determined from a built-in gamma distribution.%0a%3c %0a%3c %25color=read%25NOTE%25%25: This script is used to simulate mutants at all nucleotide locus over a short genome region, and should not be used to simulate sequences of, for example, more than 1 million basepairs (unless you are simulating a small population of no more than 10,000 individuals).%0a---%0a> %25color=red%25NOTE: There is a bug in simuPOP 1.0.5 that prevents srv.py from reporting correct fitness values in the map file when the fitness values are returned from a user-defined function. This bug does not affect the script when fitness values are determined from a built-in gamma distribution.%25%25%0a
host:1297263826=127.0.0.1
author:1295888692=
diff:1295888692:1295886438:=
host:1295888692=127.0.0.1
author:1295886438=
diff:1295886438:1289242405:=4,6c4%0a%3c %25color=red%25NOTE: This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%25%25%0a%3c %0a%3c %25color=red%25NOTE: There is a bug in simuPOP 1.0.5 that prevents srv.py from reporting correct fitness values in the map file when the fitness values are returned from a user-defined function. This bug does not affect the script when fitness values are determined from a built-in gamma distribution.%25%25%0a---%0a> %25color=red%25NOTE: This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%0a
host:1295886438=127.0.0.1
author:1289242405=
diff:1289242405:1288297312:=10c10%0a%3c This script simulates the introduction and evolution of genetic variants in one or more ''regions'' of chromosomes. These regions span roughly 10k to 100k basepair and can be considered as a gene. During evolution, mutants are introduced to the population and change the fitness of individuals who carry these mutants. '''The most distinguishing feature of this script is that it allows multi-locus fitness schemes with random or locus-specific diploid single-locus selection models to newly arising mutants'''. A multi-locus selection model is used to assign a fitness value to individuals according the mutants they carry.%0a---%0a> This script simulates the introduction and evolution of genetic variants in one or more ''regions'' of chromosomes. These regions span roughly 10k to 100k basepair and can be considered as a gene. During evolution, mutants are introduced to the population and change the fitness of individuals who carry these mutants. '''The most distinguishing feature of this script is that it allows random fitness effect to newly arising mutants'''. A multi-locus selection model is used to assign a fitness value to individuals according the mutants they carry.%0a
host:1289242405=127.0.0.1
author:1288297312=
diff:1288297312:1288207463:=66,67d65%0a%3c %0a%3c %25red%25This script works best for either full recombination (r=0.5) or realistic LD (e.g. r %3c 1e-5), specifying large recombination rates (e.g. r=0.1) will results in low performance due to excessive number of recombinations.%25%25%0a
host:1288297312=127.0.0.1
author:1288207463=
diff:1288207463:1288118892:=146a147,159%0a>   --extMutantFile=ARG  (default: '')%0a>         If a population is given, mutants from this population will be added to%0a>         the population at specified generation. Only loci that are within the%0a>         specified regions will be inserted. This population will be resized to%0a>         population size at addMutantsAt before it is merged to the simulated%0a>         population. This population is usually prepared using selectMarkers.py,%0a>         using HapMap populations loaded using scripts loadHapMap2.py and%0a>         loadHapMap3.py. These scripts are available from the simuPOP cookbook.%0a> %0a>   --addMutantsAt=ARG  (default: 0)%0a>         Generation number at which mutants from an external population will be%0a>         inserted to the evolving population.%0a> %0a217,219c230%0a%3c         is Pr(s=x)=Gamma(0.23, 0.185*2), with h=0.5. A scaling parameter 0.185*2%0a%3c         is used because s in our simulation accounts for 2s for Eyre-Walker et%0a%3c         al.%0a---%0a>         is Pr(s=x)=Gamma(0.23*2, 0.185), with h=0.5.%0a220a232,234%0a>         change model (Eyre-Walker et al, 2006). The default parameters for this%0a>         model is Pr(s=x)=Gamma(0.28*2, 0.05), with h=0.5.%0a>         * gamma3: A gamma distribution assuming a two-epoch population size%0a222,223c236,237%0a%3c         parameters for this model is Pr(s=x)=Gamma(0.184, 0.160*2), with h=0.5.%0a%3c         * gamma3: A gamma distribution (for s) assuming a complex bottleneck%0a---%0a>         parameters for this model is Pr(s=x)=Gamma(0.184*2, 0.160), with h=0.5.%0a>         * gamma4: A gamma distribution (for s) assuming a complex bottleneck%0a225c239%0a%3c         parameters for this model is Pr(s=x)=Gamma(0.206, 0.146*2) with h=0.5.%0a---%0a>         parameters for this model is Pr(s=x)=Gamma(0.206*2, 0.146) with h=0.5.%0a229,230c243,244%0a%3c         parameter is (0.0186, 0.0001, 0.184, 0.160*2, 0.5) for%0a%3c         P(s=0.0001)=0.0186 and P(s=x)=(1-0.0186)*Gamma(0.184,0.160*2).%0a---%0a>         parameter is (0.0186, 0.0001, 0.184*2, 0.160, 0.5) for%0a>         P(s=0.0001)=0.0186 and P(s=x)=(1-0.0186)*Gamma(0.184*2,0.160).%0a251,263d264%0a%3c   --extMutantFile=ARG  (default: '')%0a%3c         If a population is given, mutants from this population will be added to%0a%3c         the population at specified generation. Only loci that are within the%0a%3c         specified regions will be inserted. This population will be resized to%0a%3c         population size at addMutantsAt before it is merged to the simulated%0a%3c         population. This population is usually prepared using selectMarkers.py,%0a%3c         using HapMap populations loaded using scripts loadHapMap2.py and%0a%3c         loadHapMap3.py. These scripts are available from the simuPOP cookbook.%0a%3c %0a%3c   --addMutantsAt=ARG  (default: 0)%0a%3c         Generation number at which mutants from an external population will be%0a%3c         inserted to the evolving population.%0a%3c %0a273c274%0a%3c   --popFile=ARG  (default: 'output.pop')%0a---%0a>   --popFile=ARG  (default: [['output.pop', -1]])%0a275,283c276,284%0a%3c         format. The default value of this parameter is 'output.pop', which saves%0a%3c         the population at the end of the evolution to file 'output.pop'.%0a%3c         Optionally, one or more generation numbers can be provided, in which%0a%3c         case, the filename should be specified as an expression. For example,%0a%3c         parameter ('!"output_%25d.pop" %25 gen', (5000, -1)) saves the evolving%0a%3c         population at the end of generation 5000, and the last generation.%0a%3c         Please check the simuPOP user's guide for the use of expression in%0a%3c         operator savePopulation.%0a%3c %0a---%0a>         format. The default value of this parameter is ('output.pop', -1), which%0a>         saves the population at the end of the evolution to file 'output.pop'.%0a>         More than one generation numbers can be provided (e.g. (500, 1000, -1)),%0a>         in which case, the filename should be specified as an expression. For%0a>         example, parameter ('!"output_%25d.pop" %25 gen', (5000, -1)) saves the%0a>         evolving population at the end of generation 5000, and the last%0a>         generation. Please check the simuPOP user's guide for the use of%0a>         expression in operator savePopulation.%0a> %0a315,316d315%0a%3c %0a%3c %0a
host:1288207463=127.0.0.1
author:1288118892=
diff:1288118892:1287179413:=48d47%0a%3c %25red%25NOTE: If you are using an infinite-sites model, please pay attention to the number of segregation sites (column 3 of the output) and see if the population has been saturated with new mutants (#segregation site == #sites).%25%25%0a60,61d58%0a%3c %0a%3c %25red%25NOTE: Fixed sites are reverted to wildtype alleles to avoid problems such as the Muller's Ratchet%25%25. You can remove operator RevertFixedSites from the script if this is not what you need.%0a
host:1288118892=127.0.0.1
author:1287179413=
diff:1287179413:1285862956:=354,363d353%0a%3c %0a%3c !! References%0a%3c %0a%3c * Boyko AR, Williamson SH, Indap AR, Degenhardt JD, Hernandez RD, Lohmueller KE, Adams MD, Schmidt S, Sninsky JJ, Sunyaev SR, White TJ, Nielsen R, Clark AG, Bustamante CD: Assessing the evolutionary impact of amino acid mutations in the human genome. PLoS Genet 2008;4:e1000083.%0a%3c %0a%3c * Eyre-Walker A, Woolfit M, Phelps T: The distribution of fitness effects of new deleterious amino acid mutations in humans. Genetics 2006;173:891-900.%0a%3c %0a%3c * Kryukov GV, Pennacchio LA, Sunyaev SR: Most rare missense alleles are deleterious in humans: Implications for complex disease and association studies. Am J Hum Genet 2007;80:727-739. %0a%3c %0a%3c * Williamson SH, Hernandez R, Fledel-Alon A, Zhu L, Nielsen R, Bustamante CD: Simultaneous inference of selection and population growth from patterns of variation in the human genome. Proc Natl Acad Sci U S A 2005;102:7882-7887.%0a
host:1287179413=127.0.0.1
author:1285862956=
diff:1285862956:1285861616:=72,73d71%0a%3c * A file that saves population statistics if parameter @@statFile@@ is specified. Otherwise, the statistics will be written to standard output.%0a%3c %0a75d72%0a%3c %0a77,79c74,75%0a%3c %0a%3c * One or more simuPOP population that can be imported to simuPOP and analyzed.%0a%3c %0a---%0a> * A simuPOP population that can be imported to simuPOP and analyzed.%0a> %0a353c349,354%0a%3c The default output of this script includes population size, number of segregation sites, average number of segregation sites per individual, average frequency of all mutants, average and mean fitness of individuals. You can modify the script to get more output. For example, you can use operator @@infoEval@@ with @@output='>>fitness.txt'"@@ to output fitness values for all individuals to a file. Please refer to the simuPOP user's guide on how to use these parameters.%0a---%0a> The default output of this script includes population size, number of segregation sites, average number of segregation sites per individual, average frequency of all mutants, average and mean fitness of individuals. You can modify the script to get more output. For example%0a> %0a> * You can use parameter @@output='>>output'@@ in operator @@pyOutput@@ to send the output to a file for future reference.%0a> * You can use operator @@infoEval@@ with @@output='>>fitness.txt'"@@ to output fitness values for all individuals to a file.%0a> %0a> Please refer to the simuPOP user's guide on how to use these parameters.%0a
host:1285862956=127.0.0.1
author:1285861616=
diff:1285861616:1285861527:=63,66d62%0a%3c %0a%3c !!! Migration%0a%3c %0a%3c If a population is split into m subpopulations, a migration rate @@migrRate@@ can be specified to migrate individuals between subpopulations using an island model.%0a
host:1285861616=127.0.0.1
author:1285861527=
diff:1285861527:1285861166:=59,62d58%0a%3c %0a%3c !!! Recombination%0a%3c %0a%3c Because this script simulates small regions of chromosomes, recombination is usually ignored. However, if you would like to simulate longer regions, or simulate special cases such as unlinked loci (r=0.5), you can specify a recombination rate using parameter @@recRate@@, which specifies recombination rate per basepair per generation.%0a
host:1285861527=127.0.0.1
author:1285861166=
diff:1285861166:1285861055:=60,61d59%0a%3c !!! Output%0a%3c %0a64c62%0a%3c * A map file that contains the mutant location, frequency, selection coefficient and dominance coefficient. %0a---%0a> * A map file that contains the mutant location, frequency and selection coefficient. %0a72c70%0a%3c This script requires simuPOP 1.0.5 to execute. The installation steps are described in detail in the simuPOP website. If you are using windows, please%0a---%0a> This script requires simuPOP 1.0.4 to execute. The installation steps are described in detail in the simuPOP website. If you are using windows, please%0a74,75c72,73%0a%3c * Download and install simuPOP 1.0.5 from http://sourceforge.net/projects/simupop/files/%0a%3c * Download %25red%25[[Attach:srv.py|srv.py]]%25%25 and execute.%0a---%0a> * Download and install simuPOP 1.0.4 from http://sourceforge.net/projects/simupop/files/%0a> * Download %25red%25[[Attach:simuRareVariants.py|simuRareVariants.py]]%25%25 and execute.%0a
host:1285861166=127.0.0.1
author:1285861055=
diff:1285861055:1285860878:=56,58c56%0a%3c * An multiplicative model where {$f = \prod f_i$}%0a%3c * An additive model where {$f=1-\sum\left(1-f_{i}\right)$}%0a%3c * An exponential model (default) where {$f=\exp\left(\sum\left(1-f_{i}\right)\right)$}%0a---%0a> * An multiplicative model where {$f = \Pi f_i$}%0a
host:1285861055=127.0.0.1
author:1285860878=
diff:1285860878:1285860859:=56c56%0a%3c * An multiplicative model where {$f = \Pi f_i$}%0a---%0a> * An multiplicative model where {$f = \Pi f_i}$}%0a
host:1285860878=127.0.0.1
author:1285860859=
diff:1285860859:1285860740:=26,29c26,29%0a%3c * If {$N_t \lt N_{t+1}$}, an exponential population expansion model is used to expand population from size {$N_t$} to {$N_{t+1}$}.%0a%3c * If {$N_t > N_{t+1}$}, an instant population reduction model is used to reduce population size instantly to {$N_{t+1}$}. %0a%3c * If {$m > 1$}, the population will be split into @@m@@ subpopulations according to proportions p1, ..., pm, at geneartion @@splitAt@@.%0a%3c %0a---%0a> * If {$N_t \lt N_{t+1}$}, an exponential population expansion model is used to expand population from size N_t to N_t+1.%0a> * If @@N_t > N_t+1@@, an instant population reduction model is used to reduce population size instantly to N_t+1. %0a> * If @@m > 1@@, the population will be split into @@m@@ subpopulations according to proportions p1, ..., pm, at geneartion @@splitAt@@.%0a> %0a56d55%0a%3c * An multiplicative model where {$f = \Pi f_i}$}%0a
host:1285860859=127.0.0.1
author:1285860740=
diff:1285860740:1285860463:=26c26%0a%3c * If {$N_t \lt N_{t+1}$}, an exponential population expansion model is used to expand population from size N_t to N_t+1.%0a---%0a> * If @@N_t %3c= N_t+1@@, an exponential population expansion model is used to expand population from size N_t to N_t+1.%0a50,55c50%0a%3c A random distribution is used to assign selection coefficients to newly arising mutations. This program incorporates multiple sets of selection parameters estimated from human genome data using different demographic models (Boyko, et al., 2008; Eyre-Walker, et al., 2006; Kryukov, et al., 2009; Williamson, et al., 2005).  For example, using a mixed gamma distribution, a mutant can have a selection coefficient of zeros (neutral alleles) or a random number drawn from a gamma distribution ranging from -0.00001 to -0.1 (Kryukov, et al., 2009).%0a%3c %0a%3c Single locus selection model is specified using a selection coefficient ''s'' and a dominance coefficient ''h'' (default to 0.5), which assigns fitness 1, 1-hs and 1-s for genotypes 00, 01/10 and 11 (0 is wildtype allele) respectively.%0a%3c %0a%3c If there are multiple mutants, the overall fitness of an individual is determined by either a multiplicative, an additive, or an exponential model. %0a%3c %0a---%0a> A random distribution is used to assign selection coefficients to newly arising mutations. This program incorporates multiple sets of selection parameters estimated from human genome data using different demographic models (Boyko, et al., 2008; Eyre-Walker, et al., 2006; Kryukov, et al., 2009; Williamson, et al., 2005).  For example, using a mixed gamma distribution, a mutant can have a selection coefficient of zeros (neutral alleles) or a random number drawn from a gamma distribution ranging from -0.00001 to -0.1 (Kryukov, et al., 2009). The overall fitness of an individual is determined by either a multiplicative, an additive, or an exponential model. The differences between these models are small when s_i are small.%0a
host:1285860740=127.0.0.1
author:1285860463=
diff:1285860463:1285860213:=31d30%0a%3c %0a36,48c35,36%0a%3c This script supports two mutation models%0a%3c %0a%3c * A default '''finite-sites mutation model''' where mutations can happen at any locus. If a mutant is mutated, it will be mutated back to a wildtype allele.%0a%3c %0a%3c * A '''infinite-sites mutation model''' where mutations can happen only at loci without existing mutant. If a mutation hits a locus with existing locus, it will be relocated to another locus without existing mutant, or be ignored if no such locus can be identified.%0a%3c %0a%3c This script can output a mutant file that dump all mutation events during evolution. This file has the format of%0a%3c %0a%3c ->@@generation location individual_index type@@%0a%3c %0a%3c where type is 0 for forward, 1 for backward, 2 for relocated and 3 for ignored mutations.%0a%3c %0a%3c !!! Selection model%0a---%0a> This script supports %0a> The default mutation model assumes that all mutations happen at different loci"" (recurrent mutations are ignored) so that the same mutants in the simulated population can be traced to a single mutation events. Another mutation model allows recurrent mutation. If a mutant is mutated, it will be mutated from allele 1 to 0.%0a
host:1285860463=127.0.0.1
author:1285860213=
diff:1285860213:1285860071:=12,15d11%0a%3c !!! Genotype structure%0a%3c %0a%3c We assume one or more regions of chromosomes. Mutation can happen at any nucleotide locus which causes change of fitness of individuals carrying these mutants. The regions should be specified as @@'ch1:1..50000'@@. A list of regions is acceptable.%0a%3c %0a34,36c30%0a%3c %0a%3c This script supports %0a%3c The default mutation model assumes that all mutations happen at different loci"" (recurrent mutations are ignored) so that the same mutants in the simulated population can be traced to a single mutation events. Another mutation model allows recurrent mutation. If a mutant is mutated, it will be mutated from allele 1 to 0.%0a---%0a> Other demographic models with constant population size, instant population expansion or multiple bottlenecks (Boyko, et al., 2008) can be specified easily. We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. ""The default mutation model assumes that all mutations happen at different loci"" (recurrent mutations are ignored) so that the same mutants in the simulated population can be traced to a single mutation events. Another mutation model allows recurrent mutation. If a mutant is mutated, it will be mutated from allele 1 to 0.%0a
host:1285860213=127.0.0.1
author:1285860071=
diff:1285860071:1285859772:=18,30c18,21%0a%3c ->@@splitTo = [p1, p2, ..., pm]@@ and @@splitAt@@%0a%3c %0a%3c where N is the starting population size and size at the end of each stage, G is the number of generations at each stage, p1, p2, ..., pm are proportions of subpopulations (should sum to 1). Then,%0a%3c %0a%3c * If @@N_t %3c= N_t+1@@, an exponential population expansion model is used to expand population from size N_t to N_t+1.%0a%3c * If @@N_t > N_t+1@@, an instant population reduction model is used to reduce population size instantly to N_t+1. %0a%3c * If @@m > 1@@, the population will be split into @@m@@ subpopulations according to proportions p1, ..., pm, at geneartion @@splitAt@@.%0a%3c %0a%3c The default demographic model consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of this demographic model evolves a relatively small population of 8100 individuals until it reaches a mutation selection equilibrium. After a short bottleneck stage of 7900 individuals, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009) and should be specified as%0a%3c ->@@N=[8100, 8100, 7900, 900000], G=[8000, 100, 370]@@.%0a%3c %0a%3c !!! Mutation model%0a%3c Other demographic models with constant population size, instant population expansion or multiple bottlenecks (Boyko, et al., 2008) can be specified easily. We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. ""The default mutation model assumes that all mutations happen at different loci"" (recurrent mutations are ignored) so that the same mutants in the simulated population can be traced to a single mutation events. Another mutation model allows recurrent mutation. If a mutant is mutated, it will be mutated from allele 1 to 0.%0a---%0a> %0a> where N is the starting population size and size at the end of each stage, and G is the number of generations at each stage. %0a> %0a> The default demographic model consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of this demographic model evolves a relatively small population of 7900 individuals until it reaches a mutation selection equilibrium. After a short bottleneck stage, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009). Other demographic models with constant population size, instant population expansion or multiple bottlenecks (Boyko, et al., 2008) can be specified easily. We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. ""The default mutation model assumes that all mutations happen at different loci"" (recurrent mutations are ignored) so that the same mutants in the simulated population can be traced to a single mutation events. Another mutation model allows recurrent mutation. If a mutant is mutated, it will be mutated from allele 1 to 0.%0a
host:1285860071=127.0.0.1
author:1285859772=
diff:1285859772:1285859531:=11,19d10%0a%3c %0a%3c !!! Demographic model%0a%3c %0a%3c This script uses a multi-stage population expansion / bottleneck model with population structure. Assuming there are n stages, the demographic model can be specified by%0a%3c %0a%3c ->@@N = [N0, N1, ..., N_n-1, N_n]@@%0a%3c ->@@G = [G0, G1, ..., G_n-1]@@%0a%3c %0a%3c where N is the starting population size and size at the end of each stage, and G is the number of generations at each stage. %0a
host:1285859772=127.0.0.1
author:1285859531=
diff:1285859531:1284065319:=2,3c2,3%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:srv.py | http://simupop.sourceforge.net/images/download.jpg]]|srv.py%0a%3c %0a---%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuRareVariants.py | http://simupop.sourceforge.net/images/download.jpg]]|simuRareVariants.py%0a> %0a62,63c62,64%0a%3c usage: srv.py [--opt[=arg]] ...%0a%3c %0a---%0a> %0a> usage: simuRareVariants.py [-opt [arg] | --opt [=arg]] ...%0a> %0a66,67c67,68%0a%3c         Display this help message and exit.%0a%3c %0a---%0a>         Show this help message and exit.%0a> %0a69,70c70,71%0a%3c         Load parameters from a configuration file ARG.%0a%3c %0a---%0a>         Load parameters from file ARG.%0a> %0a74,76c75,84%0a%3c   --gui=[batch|interactive|True|Tkinter|wxPython] (default: None)%0a%3c         Run the script in batch, interactive or GUI mode.%0a%3c %0a---%0a>   --gui=[None|True|False|Tkinter|wxPython] (default: None)%0a>         Which graphical toolkit to use.%0a> %0a>   --initPop=ARG  (default: '')%0a>         Name of an initial population. If this file exists, it will be loaded%0a>         and the evolution will start from this population, instead of a blank%0a>         population. If this file does not exist, the initial population after%0a>         the burnin stage will be saved to this file. This option is often used%0a>         to reduce long burn-in generations for replicate simulations.%0a> %0a84,86c92,96%0a%3c         are on the same chromosome.%0a%3c %0a%3c   --extMutantFile=ARG  (default: '')%0a---%0a>         are on the same chromosome. Recombination within each region is not%0a>         considered in this script because we assume that each region represents%0a>         a narrow region of a chromosome that contains a gene.%0a> %0a>   --addMutantsFrom=ARG  (default: '')%0a88,95c98,106%0a%3c         the population at specified generation. Only loci that are within the%0a%3c         specified regions will be inserted. This population will be resized to%0a%3c         population size at addMutantsAt before it is merged to the simulated%0a%3c         population. This population is usually prepared using selectMarkers.py,%0a%3c         using HapMap populations loaded using scripts loadHapMap2.py and%0a%3c         loadHapMap3.py. These scripts are available from the simuPOP cookbook.%0a%3c %0a%3c   --addMutantsAt=ARG  (default: 0)%0a---%0a>         the population just before population expansion. Only loci that are%0a>         within the specified regions will be selected. This population will be%0a>         resized to bottleneck population size N1 before it is merged to the%0a>         simulated population. This population is usually prepared using%0a>         selectMarkers.py, using HapMap populations loaded using scripts%0a>         loadHapMap2.py and loadHapMap3.py. These scripts are available from the%0a>         simuPOP cookbook.%0a> %0a>   --addMutantsGen=ARG  (default: 0)%0a99,137c110,139%0a%3c   --initPop=ARG  (default: '')%0a%3c         Name of an initial population. If this file exists, it will be loaded%0a%3c         and the evolution will start from this population, instead of a blank%0a%3c         population.%0a%3c %0a%3c   --N=ARG  (default: [8100, 8100, 7900, 900000])%0a%3c         Assuming a n stage demographic model, this parameter specifies%0a%3c         population sizes at the beginning of evolution and at the end of each%0a%3c         stage. N_0,...,N_n. If N_i %3c N_i+1, an exponential population expansion%0a%3c         model will be used to expand population from size N_i to N_i+1. If N_i %3c%0a%3c         N_i+1, an instant population reduction will reduce population size to%0a%3c         N_i+1. For example%0a%3c           N=(1000,1000,100,1000)%0a%3c         simulates a three stage demographic model where a population of constant%0a%3c         size goes through a bottleneck of 100 indiviudals, and then expands%0a%3c         exponentially to a size of 1000.%0a%3c %0a%3c   --G=ARG  (default: [5000, 10, 370])%0a%3c         Numbers of generations of each stage of a n stage demographic model.%0a%3c         This parameter should have n elements, in comparison to n+1 elements for%0a%3c         parameter N.%0a%3c %0a%3c   --splitTo=ARG  (default: [1])%0a%3c         This parameter, if specified, should be a list of proportions that add%0a%3c         up to 1. The length of this list specifies the number of subpopulations%0a%3c         to split.%0a%3c %0a%3c   --splitAt=ARG  (default: 0)%0a%3c         Split the population at specified generation according to specified%0a%3c         proportions.%0a%3c %0a%3c   --mutationModel=ARG  (default: 'finite_sites')%0a%3c         Mutation model. The default mutation model is a finite-site model that%0a%3c         allows mutations at any locus. If a mutant is mutated, it will be%0a%3c         mutated to a wildtype allele. Alternatively, an infinite-sites model can%0a%3c         be simulated where new mutants must happen at loci without existing%0a%3c         mutant, unless no vacant loci is available (a warning message will be%0a%3c         printed in that case).%0a%3c %0a---%0a>   --N=ARG  (default: [8100, 7900, 900000])%0a>         The size of population at the end of each stage. We assume that the%0a>         first stage is a burn-in stage with constant population size. For other%0a>         stages, a bottleneck model (N1->N2 in one generation followed by a%0a>         constant population size of N2) will be used for population shrinkage%0a>         and an exponential population exponential model will be used for%0a>         population expansion.%0a> %0a>   --numGen=ARG  (default: [5000, 10, 370])%0a>         Numbers of generations of different stages.%0a> %0a>   --numStep=ARG  (default: [])%0a>         Calculate and output statistics at intervals of specified number of%0a>         generations. A single number or a list of numbers for each stage can be%0a>         specified. If left unspecified, statistics at the beginning of each%0a>         stage will be printed.%0a> %0a>   --mutationModel=ARG  (default: 'infinite_sites')%0a>         Mutation model. The default mutation model is an infinite-site model in%0a>         which mutations that happen at previously mutated loci, even if those%0a>         mutants have got lost, will be ignored. This model makes sure that all%0a>         mutants in the simulated population can be traced to a single mutation%0a>         event. In a finite sites model, mutations at all loci are allowed. If a%0a>         mutant is mutated, it will be mutated from allele 1 to allele 0. Because%0a>         both recurrent and reverse mutations are allowed, the histories of%0a>         mutants in the simulated populations are more difficult to trace. Note%0a>         that if the region is reasonably wide and the mutation rate is%0a>         reasonable small, very few mutants will hit the same locus so these two%0a>         models will yield very similar results.%0a> %0a143c145,146%0a%3c         fitness after obtaining fitness values at all loci. This script supports%0a---%0a>         fitness after obtaining selection coefficients for all mutants (s_i, s_i%0a>         %3c 0 when deleterious and s_i > 0 when adaptive). This script supports%0a145,152c148,156%0a%3c             multiplicative: prod (f_i) Product of individual fitness.%0a%3c             additive: max(0, 1 - sum(1-f_i)) One minus the combined selection%0a%3c         deficiencies.%0a%3c             exponential: exp(sum(1-f_i)) Exponential of combined selection%0a%3c         deficiencies.%0a%3c         Note that f_i can be equal to or greater than zero, which represents%0a%3c         neutral loci, or loci under positive selection.%0a%3c %0a---%0a>             multiplicative: prod (1 + s_i) Product of one minus selection%0a>         coefficient.%0a>             additive: max(0, 1 + sum(s_i)) One minus the sum of all selection%0a>         coefficients.%0a>             exponential: exp(sum(s_i)) Exponential of minus sum of all selection%0a>         coefficients.%0a>         Note that these models are equivalent if s_i are small and number of%0a>         mutants are small.%0a> %0a154,162c158,159%0a%3c         Distribution of selection coefficient for new mutants. Each distribution%0a%3c         specifies s (selection coefficient) and h (dominance coefficient,%0a%3c         default to 0.5 for additivity) that assign fitness values 1, 1-hs and%0a%3c         1-s for genotypes AA (wildtype), Aa and aa, respectively. Note that%0a%3c         positive s is used for negative selection so negative s is needed to%0a%3c         specify positive selection. Note that we use 2k in the default%0a%3c         distribution of Gamma distributions because theoretical estimates of s%0a%3c         is for each mutant with 1-2s as fitness value for genotype aa in our%0a%3c         model. This script currently support the following distributions:%0a---%0a>         Distribution of selection coefficient for new mutants. This script%0a>         currently support the following distributions:%0a164,176c161,172%0a%3c         constant value s. The default parameter for this model is 0.01, 0.5. You%0a%3c         can set selCoef to 0 to simulate neutral cases or a negative value for%0a%3c         positive selection.%0a%3c         * gamma1: A basic gamma distribution assuming a constant population size%0a%3c         model (Eyre-Walker et al, 2006). The default parameters for this model%0a%3c         is Pr(s=x)=Gamma(0.23*2, 0.185), with h=0.5.%0a%3c         * gamma2: A gamma distribution assuming a two-epoch population size%0a%3c         change model (Eyre-Walker et al, 2006). The default parameters for this%0a%3c         model is Pr(s=x)=Gamma(0.28*2, 0.05), with h=0.5.%0a%3c         * gamma3: A gamma distribution assuming a two-epoch population size%0a%3c         change model for African population (Boyko et al, 2008). The default%0a%3c         parameters for this model is Pr(s=x)=Gamma(0.184*2, 0.160), with h=0.5.%0a%3c         * gamma4: A gamma distribution (for s) assuming a complex bottleneck%0a---%0a>         constant value s. The default parameter for this model is -0.005. You%0a>         can set selCoef to 0 to simulate neutral cases.%0a>         * gamma1: A basic gamma distribution (for -s) assuming a constant%0a>         population size model (Eyre-Walker et al, 2006). The default parameters%0a>         for this model is Pr(s=-x)=Gamma(0.23, 0.185).%0a>         * gamma2: A gamma distribution (for -s) assuming a two-epoch population%0a>         size change model (Eyre-Walker et al, 2006). The default parameters for%0a>         this model is Pr(s=-x)=Gamma(0.28, 0.05).%0a>         * gamma3: A gamma distribution (for -s) assuming a two-epoch population%0a>         size change model for African population (Boyko et al, 2008). The%0a>         default parameters for this model is Pr(s=-x)=Gamma(0.184, 0.160).%0a>         * gamma4: A gamma distribution (for -s) assuming a complex bottleneck%0a178c174%0a%3c         parameters for this model is Pr(s=x)=Gamma(0.206*2, 0.146) with h=0.5.%0a---%0a>         parameters for this model is Pr(s=-x)=Gamma(0.206, 0.146).%0a180c176%0a%3c         theta, h) where a is the probability of having s=p (neutral or adptive%0a---%0a>         theta) where a is the probability of having s=p (neutral or adptive%0a182,187c178,192%0a%3c         parameter is (0.0186, 0.0001, 0.184*2, 0.160, 0.5) for%0a%3c         P(s=0.0001)=0.0186 and P(s=x)=(1-0.0186)*Gamma(0.184*2,0.160).%0a%3c         If you would like to define your own selection model, please define your%0a%3c         own function and pass it to parameter selDist of function%0a%3c         simuRareVariants in the script.%0a%3c %0a---%0a>         parameter is (0.0186, 0.0001, 0.184, 0.160) for P(s=0.0001)=0.0186 and%0a>         P(s=-x)=(1-0.0186)*Gamma(0.184,0.160).%0a>         If you would like to define your own selection model, please have a look%0a>         at class InfiniteSitesSelector. You can either modify function getGamma%0a>         or define your own gammaFitness, getGamma and set self.func properly.%0a>         NOTE:%0a>         The mixed_gamma model is implemented as a user-defined Python function%0a>         that return a random selection coefficient. You can define your own%0a>         function to define arbitrary distribution of selection coefficients and%0a>         pass this function to parameter selDist of function simuRareVariants()%0a>         if you import this script and call function simuRareVariants directly.%0a>         Furthermore, if this function has a parameter loc, the positions of the%0a>         mutant will be passed to this function so that you can return site-%0a>         specific coefficients.%0a> %0a191,223c196,201%0a%3c         will be used. For example, parameter (0.001, 0) for a constant model%0a%3c         defines a recessive model with fixed s. Note that a parameter of (k,%0a%3c         theta, h) is needed for gamma distributions.%0a%3c %0a%3c   --recRate=ARG  (default: 0)%0a%3c         Recombination rate per base pair. If r times loci distance if greater%0a%3c         than 0.5, a rate of 0.5 will be used.%0a%3c %0a%3c   --migrRate=ARG  (default: 0)%0a%3c         Migration rate to migrate individuals between subpoulations after the%0a%3c         population is split into several subpopulations. An island model is%0a%3c         used.%0a%3c %0a%3c   --steps=ARG  (default: [100])%0a%3c         Calculate and output statistics at intervals of specified number of%0a%3c         generations. A single number or a list of numbers for each stage can be%0a%3c         specified. If left unspecified, statistics at the beginning of each%0a%3c         stage will be printed.%0a%3c %0a%3c   --statFile=ARG  (default: '')%0a%3c         File to output statistics. Default to standard output.%0a%3c %0a%3c   --popFile=ARG  (default: [['output.pop', -1]])%0a%3c         Filename to which the evolving population will be saved in simuPOP%0a%3c         format. The default value of this parameter is ('output.pop', -1), which%0a%3c         saves the population at the end of the evolution to file 'output.pop'.%0a%3c         More than one generation numbers can be provided (e.g. (500, 1000, -1)),%0a%3c         in which case, the filename should be specified as an expression. For%0a%3c         example, parameter ('!"output_%25d.pop" %25 gen', (5000, -1)) saves the%0a%3c         evolving population at the end of generation 5000, and the last%0a%3c         generation. Please check the simuPOP user's guide for the use of%0a%3c         expression in operator savePopulation.%0a%3c %0a---%0a>         will be used.%0a> %0a>   --popFile=ARG  (default: 'output.pop')%0a>         Filename to which the simulated population will be saved in simuPOP%0a>         format. The file can be loaded later for post processing purposes.%0a> %0a254a233,234%0a> %0a> %0a
host:1285859531=127.0.0.1
author:1284065319=
diff:1284065319:1284065280:=29c29,32%0a%3c * Download %25red%25[[Attach:simuRareVariants.py|simuRareVariants.py]]%25%25 and execute.%0a---%0a> * Download one or more the following scripts.%0a> ->* %25red%25[[Attach:simuRareVariants.py|simuRareVariants.py]]%25%25 The main simulation script.%0a> ->* %25red%25[[Attach:simuRareVariants_1.0.3.py|simuRareVariants_1.0.3.py]]%25%25 An older version of this script that uses simuPOP 1.0.3. The usage of this script is different from simuRareVariants.py.%0a> %0a
host:1284065319=127.0.0.1
author:1284065280=
diff:1284065280:1284062996:=26c26,28%0a%3c This script requires simuPOP 1.0.4 to execute. The installation steps are described in detail in the simuPOP website. If you are using windows, please%0a---%0a> This script requires simuPOP 1.0.4 to execute. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. %25red%25This version is not actively maitained and is not recommended for serious simulations.%25%25.%0a> %0a> The installation steps are described in detail in the simuPOP website. If you are using windows, please%0a
host:1284065280=127.0.0.1
author:1284062996=
diff:1284062996:1283893321:=4c4%0a%3c %25color=red%25NOTE: This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contact me]].%0a---%0a> %25color=red%25NOTE: This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1284062996=127.0.0.1
author:1283893321=
diff:1283893321:1279826307:=26,27c26,27%0a%3c This script requires simuPOP 1.0.4 to execute. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. %25red%25This version is not actively maitained and is not recommended for serious simulations.%25%25.%0a%3c %0a---%0a> This script requires simuPOP 1.0.4 to execute. Because simuPOP 1.0.4 has not been officially released, you can download a snapshot version of it from [[http://sourceforge.net/projects/simupop/files/ | the download page of simuPOP]]. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. %25red%25This version is not actively maitained and is not recommended for serious simulations.%25%25.%0a> %0a30c30%0a%3c * Download and install simuPOP 1.0.4 from http://sourceforge.net/projects/simupop/files/%0a---%0a> * Download and install simuPOP 1.0.4 (or its snapshot version) from http://sourceforge.net/projects/simupop/files/%0a
host:1283893321=127.0.0.1
author:1279826307=
diff:1279826307:1279819239:=4c4%0a%3c %25color=red%25NOTE: This program is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a---%0a> %25color=red%25NOTE: This script is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1279826307=127.0.0.1
author:1279819239=
diff:1279819239:1279817918:=126c126%0a%3c   --numStep=ARG  (default: [])%0a---%0a>   --numStep=ARG  (default: [100, 1, 10])%0a128,131c128,129%0a%3c         generations. A single number or a list of numbers for each stage can be%0a%3c         specified. If left unspecified, statistics at the beginning of each%0a%3c         stage will be printed.%0a%3c %0a---%0a>         generations.%0a> %0a191,193c189,190%0a%3c         function to define arbitrary distribution of selection coefficients and%0a%3c         pass this function to parameter selDist of function simuRareVariants()%0a%3c         if you import this script and call function simuRareVariants directly.%0a---%0a>         function to define arbitrary distribution of selection coefficients by%0a>         modifying this function (or define your own function) in this script.%0a238,239d234%0a%3c %0a%3c %0a
host:1279819239=127.0.0.1
author:1279817918=
diff:1279817918:1279817848:=252,253c252,253%0a%3c Example %25red%25[[Attach:myDist.py|myDist.py]]%25%25 demonstrates how to define such a function.%0a%3c %0a---%0a> Example %25red%25[[Attach:pedigree.py|myDist.py]]%25%25 demonstrates how to define such a function.%0a> %0a258,259c258,259%0a%3c Example %25red%25[[Attach:locSpecific.py|locSpecific.py]]%25%25 demonstrates how to define a fitness function that returns location-specific fitness values.%0a%3c %0a---%0a> Example %25red%25[[Attach:pedigree.py|locSpecific.py]]%25%25 demonstrates how to define a fitness function that returns location-specific fitness values.%0a> %0a269c269%0a%3c Example %25red%25[[Attach:mutAge.py|mutAge.py]]%25%25 demonstrates how to process this file and calculate the age of all mutants.%0a---%0a> Example %25red%25[[Attach:pedigree.py|mutEvents.py]]%25%25 demonstrates how to process this file and calculate the age of all mutants.%0a
host:1279817918=127.0.0.1
author:1279817848=
diff:1279817848:1279817758:=32,35c32,35%0a%3c ->* %25red%25[[Attach:simuRareVariants.py|simuRareVariants.py]]%25%25 The main simulation script.%0a%3c ->* %25red%25[[Attach:simuRareVariants_1.0.3.py|simuRareVariants_1.0.3.py]]%25%25 An older version of this script that uses simuPOP 1.0.3. The usage of this script is different from simuRareVariants.py.%0a%3c %0a%3c %0a---%0a> ->* [[Attach:simuRareVariants.py|simuRareVariants.py]] The main simulation script.%0a> ->* [[Attach:simuRareVariants_1.0.3.py|simuRareVariants_1.0.3.py]] An older version of this script that uses simuPOP 1.0.3. The usage of this script is different from simuRareVariants.py.%0a> %0a> %0a242,245c242,245%0a%3c Example %25red%25[[Attach:quanTraits.py|quanTraits.py]]%25%25 demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a%3c %0a%3c Example %25red%25[[Attach:pedigree.py|pedigree.py]]%25%25 demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a%3c %0a---%0a> %25red%25Example [[Attach:quanTraits.py|quanTraits.py]]%25%25 demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a> %0a> %25red%25Example [[Attach:pedigree.py|pedigree.py]]%25%25 demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a> %0a252,253c252,253%0a%3c Example %25red%25[[Attach:pedigree.py|myDist.py]]%25%25 demonstrates how to define such a function.%0a%3c %0a---%0a> %25red%25Example [[Attach:pedigree.py|myDist.py]]%25%25 demonstrates how to define such a function.%0a> %0a258,259c258,259%0a%3c Example %25red%25[[Attach:pedigree.py|locSpecific.py]]%25%25 demonstrates how to define a fitness function that returns location-specific fitness values.%0a%3c %0a---%0a> %25red%25Example [[Attach:pedigree.py|locSpecific.py]]%25%25 demonstrates how to define a fitness function that returns location-specific fitness values.%0a> %0a269c269%0a%3c Example %25red%25[[Attach:pedigree.py|mutEvents.py]]%25%25 demonstrates how to process this file and calculate the age of all mutants.%0a---%0a> %25red%25Example [[Attach:pedigree.py|mutEvents.py]]%25%25 demonstrates how to process this file and calculate the age of all mutants.%0a
host:1279817848=127.0.0.1
author:1279817758=
diff:1279817758:1279817343:=237a238,247%0a> ->* [[Attach:quanTraits.py|quanTraits.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a> ->* [[Attach:pedigree.py|pedigree.py]] A script that demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a> !!! Arbitrary distribution of selection coefficients.%0a> %0a> The graphical user interface allows you to perform simulations for fix types (constant, gamma and mixed gamma). If you would like to define you own distribution, you can modify function @@mixedGamma@@ in @@simuRareVariants.py@@ to return selection coefficient according to your distribution. You will have to use simuPOP's random number generation functions listed in [[http://simupop.sourceforge.net/manual_release/build/refManual_ch2_sec5.html#class-rng | here]].%0a> %0a> !!! Location-specific selection coefficients%0a> %0a> If you would like to define a selection model with selection coefficients related to mutation location. You can add a parameter @@loc@@ to the distribution function (e.g. @@mixedGamma@@). In that case, the location (in basepair) of the new mutant will be passed to your function. This feature allows you to define a neutral region within a larger region under selection, or return neutral for mutation happens at the last nucleotide of a condon. Moreover, if you have fixed set of selection coefficients, you can use this feature to pass them to the script.%0a> %0a240,259c250,258%0a%3c The selected population can be imported and post-processed using simuPOP. If you need to apply a quantitative trait model to the simulated population, you can use a function @@pyQuanTrait@@ using a user-defined function. The only difference is that 'alleles' in the simulated population are locations of mutants. Penetrance model can be assigned similarly. %0a%3c %0a%3c %25red%25Example [[Attach:quanTraits.py|quanTraits.py]]%25%25 demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a%3c %0a%3c %25red%25Example [[Attach:pedigree.py|pedigree.py]]%25%25 demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a%3c %0a%3c These scripts import that calls the simuRareVariant function directly and uses functions defined in that script to save samples.%0a%3c %0a%3c !!! Arbitrary distribution of selection coefficients.%0a%3c %0a%3c The graphical user interface allows you to perform simulations for fix types (constant, gamma and mixed gamma). If you would like to define you own distribution, you can define a function that returns selection coefficient according to your distribution and pass it to the simuRareVariants function of simuRareVariants.py. You might need to use simuPOP's random number generation functions listed in [[http://simupop.sourceforge.net/manual_release/build/refManual_ch2_sec5.html#class-rng | here]].%0a%3c %0a%3c %25red%25Example [[Attach:pedigree.py|myDist.py]]%25%25 demonstrates how to define such a function.%0a%3c %0a%3c !!! Location-specific selection coefficients%0a%3c %0a%3c If you would like to define a selection model with selection coefficients related to mutation location. You can add a parameter @@loc@@ to the distribution function. In that case, the location (in basepair) of the new mutant will be passed to your function. This feature allows you to define a neutral region within a larger region under selection, or return neutral for mutation happens at the last nucleotide of a condon. Moreover, if you have fixed set of selection coefficients, you can use this feature to pass them to the script.%0a%3c %0a%3c %25red%25Example [[Attach:pedigree.py|locSpecific.py]]%25%25 demonstrates how to define a fitness function that returns location-specific fitness values.%0a%3c %0a---%0a> The selected population can be imported and post-processed using simuPOP. If you need to apply a quantitative trait model to the simulated population, you can use a function @@pyQuanTrait@@ using a user-defined function. The only difference is that 'alleles' in the simulated population are locations of mutants.%0a> %0a> Penetrance model can be assigned similarly. You are running complex simulations, you might want to have a look at examples 2, 3, 4 in [[Cookbook/simuGWAS]], which provides examples of complex post-processing steps, including how to draw case-control, random, and trio families.%0a> %0a> %0a> %0a> %0a> !! Advanced features%0a> %0a267,271d265%0a%3c %0a%3c %0a%3c %25red%25Example [[Attach:pedigree.py|mutEvents.py]]%25%25 demonstrates how to process this file and calculate the age of all mutants.%0a%3c %0a%3c !! Extending simuRareVariants.py%0a
host:1279817758=127.0.0.1
author:1279817343=
diff:1279817343:1279816998:=20,21c20%0a%3c * A simuPOP population that can be imported to simuPOP and analyzed.%0a%3c %0a---%0a> %0a23a23,24%0a> Of course, using simuPOP's scripting power, you can apply a penetrance or quantitative trait model to the population and draw different types of samples from the resulting population. [[Attach:quanTraits.py | This script]] demonstrates how to apply a quantitative trait model and draw individuals with extreme traits from the simulated population. More examples could be provided if needed.%0a> %0a51,52c52,53%0a%3c Default values will be used for unspecified parameters. %0a%3c %0a---%0a> Acceptable parameters of this script can be obtained from command @@> simuRareVariants.py -h@@. %0a> %0a55c56,57%0a%3c You can import this script from another Python script and call its functions directly. Please see scripts in the examples section for details.%0a---%0a> Finally, you can import this script from another Python script and call its functions directly. Please see [[Attach:quanTraits.py | this script]] for an example.%0a> %0a
host:1279817343=127.0.0.1
author:1279816998=
diff:1279816998:1279816872:=59,62c59%0a%3c !!! Complete list of options%0a%3c %0a%3c This is the output of @@simuRareVariants.py -h@@%0a%3c %0a---%0a> !!! Output of @@simuRareVariants.py -h@@%0a238,239c235,236%0a%3c !! Examples%0a%3c %0a---%0a> !!! Examples%0a> %0a241a239,259%0a> %0a> !!! Advanced features%0a> %0a> !!!! Analyze all mutation events%0a> %0a> If you would like to have a list of all mutation events happened during the evolutionary process, you can add @@--verbose=2@@ to the command line. This will generate a file named @@mutations.lst@@ which lists all mutations in the format of%0a> %0a> ->@@generation  location  individual_index type@@%0a> %0a> where type is 0 for forward mutation, 1 for backward mutation and 2 for ignored mutation in the infinite-site model. You can process this file to trace the age of all mutants.%0a> %0a> !!! Output more statistics such as the fitness value of everyone.%0a> %0a> The default output of this script includes population size, number of segregation sites, average number of segregation sites per individual, average frequency of all mutants, average and mean fitness of individuals. You can modify the script to get more output. For example%0a> %0a> * You can remove parameters such as step=10 to output these statistics at every generation.%0a> * You can use parameter @@output='>>output'@@ in operator @@pyOutput@@ to send the output to a file for future reference.%0a> * You can use operator @@infoEval@@ with @@output='>>fitness.txt'"@@ to output fitness values for all individuals to a file.%0a> %0a> Please refer to the simuPOP user's guide on how to use these parameters.%0a> %0a256,276d273%0a%3c %0a%3c %0a%3c %0a%3c !! Advanced features%0a%3c %0a%3c !!! Analyze all mutation events%0a%3c %0a%3c If you would like to have a list of all mutation events happened during the evolutionary process, you can add @@--verbose=2@@ to the command line. This will generate a file named @@mutations.lst@@ which lists all mutations in the format of%0a%3c %0a%3c ->@@generation  location  individual_index type@@%0a%3c %0a%3c where type is 0 for forward mutation, 1 for backward mutation and 2 for ignored mutation in the infinite-site model. You can process this file to trace the age of all mutants.%0a%3c %0a%3c !!! Output more statistics such as the fitness value of everyone.%0a%3c %0a%3c The default output of this script includes population size, number of segregation sites, average number of segregation sites per individual, average frequency of all mutants, average and mean fitness of individuals. You can modify the script to get more output. For example%0a%3c %0a%3c * You can use parameter @@output='>>output'@@ in operator @@pyOutput@@ to send the output to a file for future reference.%0a%3c * You can use operator @@infoEval@@ with @@output='>>fitness.txt'"@@ to output fitness values for all individuals to a file.%0a%3c %0a%3c Please refer to the simuPOP user's guide on how to use these parameters.%0a
host:1279816998=127.0.0.1
author:1279816872=
diff:1279816872:1279816740:=25,26c25,26%0a%3c !! Installation%0a%3c %0a---%0a> !!! Installation%0a> %0a37,40c37,38%0a%3c !! How to use this script%0a%3c %0a%3c !!! Graphical user interface%0a%3c %0a---%0a> !!! How to use this script%0a> %0a46,47d43%0a%3c !!! Run from a command line in batch mode%0a%3c %0a52,55c48,53%0a%3c Acceptable parameters of this script can be obtained from command @@> simuRareVariants.py -h@@. %0a%3c %0a%3c !!! Import simuRareVariants from another script%0a%3c %0a---%0a> for simuPOP 1.0.4, or%0a> %0a> ->@@> simuRareVariants.py --gui=False --selDist=gamma3 ...@@ %0a> %0a> with all parameters specified in simuPOP 1.0.3. Acceptable parameters of this script can be obtained from command @@> simuRareVariants.py -h@@. %0a> %0a57d54%0a%3c %0a
host:1279816872=127.0.0.1
author:1279816740=
diff:1279816740:1279816562:=8c8%0a%3c !! Introduction%0a---%0a> !!! Introduction%0a
host:1279816740=127.0.0.1
author:1279816562=
diff:1279816562:1279816444:=35,36c35,37%0a%3c %0a%3c %0a---%0a> ->* [[Attach:quanTraits.py|quanTraits.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a> ->* [[Attach:pedigree.py|pedigree.py]] A script that demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a> %0a232,239c233,236%0a%3c !!! Examples%0a%3c %0a%3c ->* [[Attach:quanTraits.py|quanTraits.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a%3c ->* [[Attach:pedigree.py|pedigree.py]] A script that demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a%3c %0a%3c !!! Advanced features%0a%3c %0a%3c !!!! Analyze all mutation events%0a---%0a> %0a> !! Advanced features%0a> %0a> !!! Analyze all mutation events%0a
host:1279816562=127.0.0.1
author:1279816444=
diff:1279816444:1279816426:=4,5d3%0a%3c %25color=red%25NOTE: This script is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a%3c %0a6a5,6%0a> %0a> %25color=red%25NOTE: This script is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1279816444=127.0.0.1
author:1279816426=
diff:1279816426:1279816318:=4c4%0a%3c (:toc:)%0a---%0a> %25toc%25%0a
host:1279816426=127.0.0.1
author:1279816318=
diff:1279816318:1279748435:=3,4d2%0a%3c %0a%3c %25toc%25%0a
host:1279816318=127.0.0.1
author:1279748435=
diff:1279748435:1279748201:=240c240%0a%3c where type is 0 for forward mutation, 1 for backward mutation and 2 for ignored mutation in the infinite-site model. You can process this file to trace the age of all mutants.%0a---%0a> where type is 1 for forward mutation, 2 for backward mutation and 3 for ignored mutation in the infinite-site model. You can process this file to trace the age of all mutants.%0a
host:1279748435=127.0.0.1
author:1279748201=
diff:1279748201:1279748153:=31,34c31,36%0a%3c ->* [[Attach:simuRareVariants.py|simuRareVariants.py]] The main simulation script.%0a%3c ->* [[Attach:simuRareVariants_1.0.3.py|simuRareVariants_1.0.3.py]] An older version of this script that uses simuPOP 1.0.3. The usage of this script is different from simuRareVariants.py.%0a%3c ->* [[Attach:quanTraits.py|quanTraits.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a%3c ->* [[Attach:pedigree.py|pedigree.py]] A script that demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a---%0a> %0a> """Files:"""%0a> * [[Attach:simuRareVariants.py|simuRareVariants.py]] The main simulation script.%0a> * [[Attach:simuRareVariants_1.0.3.py|simuRareVariants_1.0.3.py]] An older version of this script that uses simuPOP 1.0.3. The usage of this script is different from simuRareVariants.py.%0a> * [[Attach:quanTraits.py|quanTraits.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a> * [[Attach:pedigree.py|pedigree.py]] A script that demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a
host:1279748201=127.0.0.1
author:1279748153=
diff:1279748153:1279747896:=27,34c27%0a%3c The installation steps are described in detail in the simuPOP website. If you are using windows, please%0a%3c * Download and install Python 2.6 from http://www.python.org.%0a%3c * Download and install simuPOP 1.0.4 (or its snapshot version) from http://sourceforge.net/projects/simupop/files/%0a%3c * Download one or more the following scripts.%0a%3c %0a%3c """Files:"""%0a%3c * [[Attach:simuRareVariants.py|simuRareVariants.py]] The main simulation script.%0a%3c * [[Attach:simuRareVariants_1.0.3.py|simuRareVariants_1.0.3.py]] An older version of this script that uses simuPOP 1.0.3. The usage of this script is different from simuRareVariants.py.%0a---%0a> %25red%25Examples%25%25%0a
host:1279748153=127.0.0.1
author:1279747896=
diff:1279747896:1279747817:=28c28%0a%3c * [[Attach:quanTraits.py|quanTraits.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a---%0a> * [[Attach:quanTrait.py|quanTait.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a
host:1279747896=127.0.0.1
author:1279747817=
diff:1279747817:1279665391:=26,29d25%0a%3c %0a%3c %25red%25Examples%25%25%0a%3c * [[Attach:quanTrait.py|quanTait.py]] A script that demonstrates how to apply a quantitative trait model and draw samples with extreme trait values.%0a%3c * [[Attach:pedigree.py|pedigree.py]] A script that demonstrates how to evolve the simulated population for three more generations and draw three-generational pedigrees from the simulated multi-generational population, with restrictions on pedigree size and number of affected members.%0a
host:1279747817=127.0.0.1
author:1279665391=
diff:1279665391:1279663397:=97,128c97,116%0a%3c   --addMutantsGen=ARG  (default: 0)%0a%3c         Generation number at which mutants from an external population will be%0a%3c         inserted to the evolving population.%0a%3c %0a%3c   --N=ARG  (default: [8100, 7900, 900000])%0a%3c         The size of population at the end of each stage. We assume that the%0a%3c         first stage is a burn-in stage with constant population size. For other%0a%3c         stages, a bottleneck model (N1->N2 in one generation followed by a%0a%3c         constant population size of N2) will be used for population shrinkage%0a%3c         and an exponential population exponential model will be used for%0a%3c         population expansion.%0a%3c %0a%3c   --numGen=ARG  (default: [5000, 10, 370])%0a%3c         Numbers of generations of different stages.%0a%3c %0a%3c   --numStep=ARG  (default: [100, 1, 10])%0a%3c         Calculate and output statistics at intervals of specified number of%0a%3c         generations.%0a%3c %0a%3c   --mutationModel=ARG  (default: 'infinite_sites')%0a%3c         Mutation model. The default mutation model is an infinite-site model in%0a%3c         which mutations that happen at previously mutated loci, even if those%0a%3c         mutants have got lost, will be ignored. This model makes sure that all%0a%3c         mutants in the simulated population can be traced to a single mutation%0a%3c         event. In a finite sites model, mutations at all loci are allowed. If a%0a%3c         mutant is mutated, it will be mutated from allele 1 to allele 0. Because%0a%3c         both recurrent and reverse mutations are allowed, the histories of%0a%3c         mutants in the simulated populations are more difficult to trace. Note%0a%3c         that if the region is reasonably wide and the mutation rate is%0a%3c         reasonable small, very few mutants will hit the same locus so these two%0a%3c         models will yield very similar results.%0a%3c %0a---%0a>   --N0=ARG  (default: 8100)%0a>         The size of the initial population.%0a> %0a>   --N1=ARG  (default: 7900)%0a>         The size of the botttleneck.%0a> %0a>   --N2=ARG  (default: 900000)%0a>         The size of the modern human population.%0a> %0a>   --burninGen=ARG  (default: 5000)%0a>         Number of generations to evolve before population expansion. This stage%0a>         should be long enough so that the population reaches a mutation%0a>         selection equilibrium (average allele frequencies stops increasing).%0a> %0a>   --bottleneckGen=ARG  (default: 10)%0a>         Number of generations in the bottleneck stage.%0a> %0a>   --expandGen=ARG  (default: 370)%0a>         Number of generations to expand.%0a> %0a218,222c206,208%0a%3c         0 for quiet, 1 for regular output, 2 for debug output. In the debug%0a%3c         output, a file 'mutations.lst' will be saved with all mutation events.%0a%3c         This option is not visible from gui.%0a%3c %0a%3c %0a---%0a>         0 for quiet, 1 for regular output, 2 for debug output. This option is%0a>         not visible from gui.%0a> %0a229,231c215,217%0a%3c ->@@generation  location  individual_index type@@%0a%3c %0a%3c where type is 1 for forward mutation, 2 for backward mutation and 3 for ignored mutation in the infinite-site model. You can process this file to trace the age of all mutants.%0a---%0a> ->@@generation  location  individual_index@@%0a> %0a> You can process this file to trace the age of all mutants.%0a
host:1279665391=127.0.0.1
author:1279663397=
diff:1279663397:1277214092:=10c10%0a%3c The default demographic model consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of this demographic model evolves a relatively small population of 7900 individuals until it reaches a mutation selection equilibrium. After a short bottleneck stage, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009). Other demographic models with constant population size, instant population expansion or multiple bottlenecks (Boyko, et al., 2008) can be specified easily. We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. ""The default mutation model assumes that all mutations happen at different loci"" (recurrent mutations are ignored) so that the same mutants in the simulated population can be traced to a single mutation events. Another mutation model allows recurrent mutation. If a mutant is mutated, it will be mutated from allele 1 to 0.%0a---%0a> We use a demographic model that consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of a default demographic model evolves a relatively small population of 7900 individuals until it reaches a mutation selection equilibrium. After a short bottleneck stage, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009), but it can also be used to simulate other demographic models with constant population size or instant population expansion (Boyko, et al., 2008). We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. Although back mutations are allowed, their impact on the evolutionary process is negligible due to the relatively small number of mutants.%0a
host:1279663397=127.0.0.1
author:1277214092=
diff:1277214092:1277097464:=25c25,26%0a%3c This script requires simuPOP 1.0.4 to execute. Because simuPOP 1.0.4 has not been officially released, you can download a snapshot version of it from [[http://sourceforge.net/projects/simupop/files/ | the download page of simuPOP]]. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. %25red%25This version is not actively maitained and is not recommended for serious simulations.%25%25.%0a---%0a> This script requires simuPOP 1.0.4 to execute. Because simuPOP 1.0.4 has not been officially released, you can download a snapshot version of it from [[http://sourceforge.net/projects/simupop/files/ | the download page of simuPOP]]. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. This version is slower but is sufficient in demonstrating features of this script.%0a> %0a
host:1277214092=127.0.0.1
author:1277097464=
diff:1277097464:1276566699:=4c4%0a%3c %25color=red%25NOTE: This script is still under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a---%0a> %25color=red%25NOTE: This script is still in under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1277097464=127.0.0.1
author:1276566699=
diff:1276566699:1276566426:=19c19%0a%3c %25blue%25Note that fixed mutants are not counted as segregation sites but are included in the map and mutant files.%25%25%0a---%0a> Note that %25blue%25fixed mutants are not counted as segregation sites but are included in the map and mutant files.%25%25%0a
host:1276566699=127.0.0.1
author:1276566426=
diff:1276566426:1276532927:=16c16%0a%3c * A map file that contains the mutant location, frequency and selection coefficient. %0a---%0a> * A map file that contains the mutant location, frequency and selection coefficient.%0a18,19d17%0a%3c %0a%3c Note that %25blue%25fixed mutants are not counted as segregation sites but are included in the map and mutant files.%25%25%0a
host:1276566426=127.0.0.1
author:1276532927=
diff:1276532927:1276531140:=216c216%0a%3c You can process this file to trace the age of all mutants.%0a---%0a> You can process this file to trace the age of mutations.%0a
host:1276532927=127.0.0.1
author:1276531140=
diff:1276531140:1276529749:=209,226d208%0a%3c %0a%3c !!! Analyze all mutation events%0a%3c %0a%3c If you would like to have a list of all mutation events happened during the evolutionary process, you can add @@--verbose=2@@ to the command line. This will generate a file named @@mutations.lst@@ which lists all mutations in the format of%0a%3c %0a%3c ->@@generation  location  individual_index@@%0a%3c %0a%3c You can process this file to trace the age of mutations.%0a%3c %0a%3c !!! Output more statistics such as the fitness value of everyone.%0a%3c %0a%3c The default output of this script includes population size, number of segregation sites, average number of segregation sites per individual, average frequency of all mutants, average and mean fitness of individuals. You can modify the script to get more output. For example%0a%3c %0a%3c * You can remove parameters such as step=10 to output these statistics at every generation.%0a%3c * You can use parameter @@output='>>output'@@ in operator @@pyOutput@@ to send the output to a file for future reference.%0a%3c * You can use operator @@infoEval@@ with @@output='>>fitness.txt'"@@ to output fitness values for all individuals to a file.%0a%3c %0a%3c Please refer to the simuPOP user's guide on how to use these parameters.%0a
host:1276531140=127.0.0.1
author:1276529749=
diff:1276529749:1276527796:=41,42c41,44%0a%3c with all parameters specified in simuPOP 1.0.3. Acceptable parameters of this script can be obtained from command @@> simuRareVariants.py -h@@. %0a%3c %0a---%0a> with all parameters specified in simuPOP 1.0.3.%0a> %0a> Acceptable parameters of this script are (obtained from @@> simuRareVariants.py -h@@). %0a> %0a210,222c212%0a%3c !!! Arbitrary distribution of selection coefficients.%0a%3c %0a%3c The graphical user interface allows you to perform simulations for fix types (constant, gamma and mixed gamma). If you would like to define you own distribution, you can modify function @@mixedGamma@@ in @@simuRareVariants.py@@ to return selection coefficient according to your distribution. You will have to use simuPOP's random number generation functions listed in [[http://simupop.sourceforge.net/manual_release/build/refManual_ch2_sec5.html#class-rng | here]].%0a%3c %0a%3c !!! Location-specific selection coefficients%0a%3c %0a%3c If you would like to define a selection model with selection coefficients related to mutation location. You can add a parameter @@loc@@ to the distribution function (e.g. @@mixedGamma@@). In that case, the location (in basepair) of the new mutant will be passed to your function. This feature allows you to define a neutral region within a larger region under selection, or return neutral for mutation happens at the last nucleotide of a condon. Moreover, if you have fixed set of selection coefficients, you can use this feature to pass them to the script.%0a%3c %0a%3c !!! Apply a penetrance or quantitative trait model%0a%3c %0a%3c The selected population can be imported and post-processed using simuPOP. If you need to apply a quantitative trait model to the simulated population, you can use a function @@pyQuanTrait@@ using a user-defined function. The only difference is that 'alleles' in the simulated population are locations of mutants.%0a%3c %0a%3c Penetrance model can be assigned similarly. You are running complex simulations, you might want to have a look at examples 2, 3, 4 in [[Cookbook/simuGWAS]], which provides examples of complex post-processing steps, including how to draw case-control, random, and trio families.%0a---%0a> %0a
host:1276529749=127.0.0.1
author:1276527796=
diff:1276527796:1276462172:=35,47c35,39%0a%3c ->@@> simuRareVariants.py --gui=batch --selDist=gamma3@@%0a%3c %0a%3c for simuPOP 1.0.4, or%0a%3c %0a%3c ->@@> simuRareVariants.py --gui=False --selDist=gamma3 ...@@ %0a%3c %0a%3c with all parameters specified in simuPOP 1.0.3.%0a%3c %0a%3c Acceptable parameters of this script are (obtained from @@> simuRareVariants.py -h@@). %0a%3c %0a%3c Finally, you can import this script from another Python script and call its functions directly. Please see [[Attach:quanTraits.py | this script]] for an example.%0a%3c %0a%3c !!! Output of @@simuRareVariants.py -h@@%0a---%0a> ->@@> simuRareVariants.py --gui=False --selDist=gamma3@@%0a> %0a> Acceptable parameters of this script are (obtained from @@> simuRareVariants.py -h@@)%0a> %0a> %0a125a118%0a>             neutral: no natural selection. s is always 0.%0a139,140c132%0a%3c         constant value s. The default parameter for this model is -0.005. You%0a%3c         can set selCoef to 0 to simulate neutral cases.%0a---%0a>         constant value s. The default parameter for this model is -0.005.%0a153c145%0a%3c         * mixed_gamma: Parameter of this model should be a list of (a, p, k,%0a---%0a>         * mixed gamma: Parameter of this model should be a list of (a, p, k,%0a162c154%0a%3c         The mixed_gamma model is implemented as a user-defined Python function%0a---%0a>         The mixed gamma model is implemented as a user-defined Python function%0a210,212c202,205%0a%3c !! Advanced features%0a%3c %0a%3c %0a---%0a> %0a> for a list of options.%0a> %0a> Finally, you can import this script from another Python script and call its functions directly. Please see [[Attach:quanTraits.py | this script]] for an example.%0a
host:1276527796=127.0.0.1
author:1276462172=
diff:1276462172:1276462162:=
host:1276462172=127.0.0.1
author:1276462162=
diff:1276462162:1276382192:=37,201c37,39%0a%3c Acceptable parameters of this script are (obtained from @@> simuRareVariants.py -h@@)%0a%3c %0a%3c %0a%3c Simulating a population of sequences forward in time, subject to mutation,%0a%3c natural selection and population expansion. Because most mutants are introduced%0a%3c during the rapid population expansion, most of the alleles will be rare at the%0a%3c end of the simulation. Samples simulated using this script can be used to study%0a%3c genetic diseases caused by a large number of rare variants.%0a%3c %0a%3c %0a%3c usage: simuRareVariants.py [-opt [arg] | --opt [=arg]] ...%0a%3c %0a%3c options:%0a%3c   -h, --help%0a%3c         Show this help message and exit.%0a%3c %0a%3c   --config=ARG (default: None)%0a%3c         Load parameters from file ARG.%0a%3c %0a%3c   --optimized%0a%3c         Run the script using an optimized simuPOP module.%0a%3c %0a%3c   --gui=[None|True|False|Tkinter|wxPython] (default: None)%0a%3c         Which graphical toolkit to use.%0a%3c %0a%3c   --initPop=ARG  (default: '')%0a%3c         Name of an initial population. If this file exists, it will be loaded%0a%3c         and the evolution will start from this population, instead of a blank%0a%3c         population. If this file does not exist, the initial population after%0a%3c         the burnin stage will be saved to this file. This option is often used%0a%3c         to reduce long burn-in generations for replicate simulations.%0a%3c %0a%3c   --regions=ARG  (default: ['chr1:1..50000'])%0a%3c         A region (in basepair) means a piece of chromosome in which mutations%0a%3c         can happen. A region should be expressed as chrXX:YYYY..ZZZZ where XX is%0a%3c         chromosome number, YYYY is the starting position in basepair and ZZZZ is%0a%3c         the ending position in basepair. The starting position should be at%0a%3c         least one. If multiple regions are specified as a list of regions, they%0a%3c         are assumed to be unlinked and will segregate independently even if they%0a%3c         are on the same chromosome. Recombination within each region is not%0a%3c         considered in this script because we assume that each region represents%0a%3c         a narrow region of a chromosome that contains a gene.%0a%3c %0a%3c   --addMutantsFrom=ARG  (default: '')%0a%3c         If a population is given, mutants from this population will be added to%0a%3c         the population just before population expansion. Only loci that are%0a%3c         within the specified regions will be selected. This population will be%0a%3c         resized to bottleneck population size N1 before it is merged to the%0a%3c         simulated population. This population is usually prepared using%0a%3c         selectMarkers.py, using HapMap populations loaded using scripts%0a%3c         loadHapMap2.py and loadHapMap3.py. These scripts are available from the%0a%3c         simuPOP cookbook.%0a%3c %0a%3c   --N0=ARG  (default: 8100)%0a%3c         The size of the initial population.%0a%3c %0a%3c   --N1=ARG  (default: 7900)%0a%3c         The size of the botttleneck.%0a%3c %0a%3c   --N2=ARG  (default: 900000)%0a%3c         The size of the modern human population.%0a%3c %0a%3c   --burninGen=ARG  (default: 5000)%0a%3c         Number of generations to evolve before population expansion. This stage%0a%3c         should be long enough so that the population reaches a mutation%0a%3c         selection equilibrium (average allele frequencies stops increasing).%0a%3c %0a%3c   --bottleneckGen=ARG  (default: 10)%0a%3c         Number of generations in the bottleneck stage.%0a%3c %0a%3c   --expandGen=ARG  (default: 370)%0a%3c         Number of generations to expand.%0a%3c %0a%3c   --mu=ARG  (default: 1.8e-08)%0a%3c         Mutation rate%0a%3c %0a%3c   --selModel=ARG  (default: 'multiplicative')%0a%3c         Multi-locus selection model, namely how to obtain an overall individual%0a%3c         fitness after obtaining selection coefficients for all mutants (s_i, s_i%0a%3c         %3c 0 when deleterious and s_i > 0 when adaptive). This script supports%0a%3c         three models:%0a%3c             neutral: no natural selection. s is always 0.%0a%3c             multiplicative: prod (1 + s_i) Product of one minus selection%0a%3c         coefficient.%0a%3c             additive: max(0, 1 + sum(s_i)) One minus the sum of all selection%0a%3c         coefficients.%0a%3c             exponential: exp(sum(s_i)) Exponential of minus sum of all selection%0a%3c         coefficients.%0a%3c         Note that these models are equivalent if s_i are small and number of%0a%3c         mutants are small.%0a%3c %0a%3c   --selDist=ARG  (default: 'constant')%0a%3c         Distribution of selection coefficient for new mutants. This script%0a%3c         currently support the following distributions:%0a%3c         * constant: A single selection coefficient that gives each mutant a%0a%3c         constant value s. The default parameter for this model is -0.005.%0a%3c         * gamma1: A basic gamma distribution (for -s) assuming a constant%0a%3c         population size model (Eyre-Walker et al, 2006). The default parameters%0a%3c         for this model is Pr(s=-x)=Gamma(0.23, 0.185).%0a%3c         * gamma2: A gamma distribution (for -s) assuming a two-epoch population%0a%3c         size change model (Eyre-Walker et al, 2006). The default parameters for%0a%3c         this model is Pr(s=-x)=Gamma(0.28, 0.05).%0a%3c         * gamma3: A gamma distribution (for -s) assuming a two-epoch population%0a%3c         size change model for African population (Boyko et al, 2008). The%0a%3c         default parameters for this model is Pr(s=-x)=Gamma(0.184, 0.160).%0a%3c         * gamma4: A gamma distribution (for -s) assuming a complex bottleneck%0a%3c         model for European population (Boyko et al, 2008). The default%0a%3c         parameters for this model is Pr(s=-x)=Gamma(0.206, 0.146).%0a%3c         * mixed gamma: Parameter of this model should be a list of (a, p, k,%0a%3c         theta) where a is the probability of having s=p (neutral or adptive%0a%3c         sites), k, theta are the parameter of a gamma distribution Recomended%0a%3c         parameter is (0.0186, 0.0001, 0.184, 0.160) for P(s=0.0001)=0.0186 and%0a%3c         P(s=-x)=(1-0.0186)*Gamma(0.184,0.160).%0a%3c         If you would like to define your own selection model, please have a look%0a%3c         at class InfiniteSitesSelector. You can either modify function getGamma%0a%3c         or define your own gammaFitness, getGamma and set self.func properly.%0a%3c         NOTE:%0a%3c         The mixed gamma model is implemented as a user-defined Python function%0a%3c         that return a random selection coefficient. You can define your own%0a%3c         function to define arbitrary distribution of selection coefficients by%0a%3c         modifying this function (or define your own function) in this script.%0a%3c         Furthermore, if this function has a parameter loc, the positions of the%0a%3c         mutant will be passed to this function so that you can return site-%0a%3c         specific coefficients.%0a%3c %0a%3c   --selCoef=ARG  (default: None)%0a%3c         Selection coefficient with its meaning determined by parameter selDist.%0a%3c         If None is given, the default parameter for the selected distribution%0a%3c         will be used.%0a%3c %0a%3c   --popFile=ARG  (default: 'output.pop')%0a%3c         Filename to which the simulated population will be saved in simuPOP%0a%3c         format. The file can be loaded later for post processing purposes.%0a%3c %0a%3c   --markerFile=ARG  (default: 'output.map')%0a%3c         Filename to which the marker information, including marker name%0a%3c         (reg+index), chromosome, location, allele frequency and selection%0a%3c         coefficient are saved. Monomorphic markers are ignored.%0a%3c %0a%3c   --mutantFile=ARG  (default: 'output.mut')%0a%3c         Filename to which the mutants are outputed. The file will be saved in%0a%3c         the format of%0a%3c             ind_id mut1 mut2 ...%0a%3c         where ind_id is the index of individual (1, 2, ...), mut1 and mut2 are%0a%3c         locations of mutants. Haplotypes for different regions and homologous%0a%3c         chromosomes are saved in different lines in the order of%0a%3c           reg1_ploidy1%0a%3c           reg1_ploidy2%0a%3c           reg2_ploidy1%0a%3c           reg2_ploidy2%0a%3c           ...%0a%3c %0a%3c   --genotypeFile=ARG  (default: '')%0a%3c         Filename to which the genotypes of all individuals are saved. The file%0a%3c         will be saved in the format of%0a%3c                 famid id fa mo sex aff loc1_a1 loc1_a2 loc2_a1 loc2_a2 ...%0a%3c         where famid is 1, 2, 3, ... id is always 1, fa, mo is always 0. Wildtype%0a%3c         and mutant alleles are denoted by 0 and 1 respectively. This option is%0a%3c         turned off by default because this format is not efficient in storing a%0a%3c         small number of mutants.%0a%3c %0a%3c   --verbose=ARG  (default: 1)%0a%3c         0 for quiet, 1 for regular output, 2 for debug output. This option is%0a%3c         not visible from gui.%0a%3c %0a---%0a> Please use %0a> %0a> ->@@> simuRareVariants.py -h@@%0a
host:1276462162=127.0.0.1
author:1276382192=
diff:1276382192:1276382177:=
host:1276382192=127.0.0.1
author:1276382177=
diff:1276382177:1276382107:=4c4%0a%3c %25color=red%25NOTE: This script is still in under testing. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a---%0a> %25color=red%25NOTE: This is the initial release of the script. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a
host:1276382177=127.0.0.1
author:1276382107=
diff:1276382107:1276382072:=4c4%0a%3c %25color=red%25NOTE: This is the initial release of the script. If you experience any problem, please do not hesitate to [[mailto:bpeng@mdanderson.org | contect me]].%0a---%0a> %25color=red%25NOTE: This is the initial release of the script. If you experience any problem, please do not hesitate to [[email:bpeng@mdanderson.org | contect me]].%0a
host:1276382107=127.0.0.1
author:1276382072=
diff:1276382072:1276378413:=4c4%0a%3c %25color=red%25NOTE: This is the initial release of the script. If you experience any problem, please do not hesitate to [[email:bpeng@mdanderson.org | contect me]].%0a---%0a> %25color=red%25NOTE: This page is still under development.%25%25 %0a
host:1276382072=127.0.0.1
author:1276378413=
diff:1276378413:1276378378:=16,17c16,17%0a%3c * A map file that contains the mutant location, frequency and selection coefficient.%0a%3c * A mutant file that contains location of mutants of each individual.%0a---%0a> - A map file that contains the mutant location, frequency and selection coefficient.%0a> - A mutant file that contains location of mutants of each individual.%0a
host:1276378413=127.0.0.1
author:1276378378=
diff:1276378378:1276351547:=8c8%0a%3c This script simulates the introduction and evolution of genetic variants in one or more ''regions'' of chromosomes. These regions span roughly 10k to 100k basepair and can be considered as a gene. During evolution, mutants are introduced to the population and change the fitness of individuals who carry these mutants. '''The most distinguishing feature of this script is that it allows random fitness effect to newly arising mutants'''. A multi-locus selection model is used to assign a fitness value to individuals according the mutants they carry.%0a---%0a> This script simulates the introduction and evolution of genetic variants in one or more **regions** of chromosomes. These regions span roughly 10k to 100k basepair and can be considered as a gene. During evolution, mutants are introduced to the population and change the fitness of individuals who carry these mutants. ***The most distinguishing feature of this script is that it allows random fitness effect to newly arising mutants***. A multi-locus selection model is used to assign a fitness value to individuals according the mutants they carry.%0a
host:1276378378=127.0.0.1
author:1276351547=
diff:1276351547:1276351503:=19,20c19,20%0a%3c Of course, using simuPOP's scripting power, you can apply a penetrance or quantitative trait model to the population and draw different types of samples from the resulting population. [[Attach:quanTraits.py | This script]] demonstrates how to apply a quantitative trait model and draw individuals with extreme traits from the simulated population. More examples could be provided if needed.%0a%3c %0a---%0a> Of course, using simuPOP's scripting power, you can apply a penetrance or quantitative trait model to the population and draw different types of samples from the resulting population. [[attach:quanTraits.py | This script]] demonstrates how to apply a quantitative trait model and draw individuals with extreme traits from the simulated population. More examples could be provided if needed.%0a> %0a43c43%0a%3c Finally, you can import this script from another Python script and call its functions directly. Please see [[Attach:quanTraits.py | this script]] for an example.%0a---%0a> Finally, you can import this script from another Python script and call its functions directly. Please see[[Attach:quanTraits.py | this script]] for an example.%0a
host:1276351547=127.0.0.1
author:1276351503=
diff:1276351503:1276351145:=30,34c30,33%0a%3c Attach:simuRareVariants.jpg%0a%3c %0a%3c %0a%3c If you need to run it in batch mode, you can use command line, using options such as%0a%3c %0a---%0a> [[Attach:simuRareVariants.jpg]]%0a> %0a>  command line, using options such as%0a> %0a43c42%0a%3c Finally, you can import this script from another Python script and call its functions directly. Please see[[Attach:quanTraits.py | this script]] for an example.%0a---%0a> You can also use a GUI to enter parameters, or use import this script from another script.%0a
host:1276351503=127.0.0.1
author:1276351145=
diff:1276351145:1276349877:=4,5c4,5%0a%3c %25color=red%25NOTE: This page is still under development.%25%25 %0a%3c %0a---%0a> %25color=red%25NOTE: This page is still under development.%25%25 This script is provided but it requires simuPOP 1.0.4 to execute. Because simuPOP 1.0.4 has not been officially released, you can download a snapshot version of it from [[http://sourceforge.net/projects/simupop/files/ | the download page of simuPOP]]. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. This version is slower but is sufficient in demonstrating features of this script.%0a> %0a8,9d7%0a%3c This script simulates the introduction and evolution of genetic variants in one or more **regions** of chromosomes. These regions span roughly 10k to 100k basepair and can be considered as a gene. During evolution, mutants are introduced to the population and change the fitness of individuals who carry these mutants. ***The most distinguishing feature of this script is that it allows random fitness effect to newly arising mutants***. A multi-locus selection model is used to assign a fitness value to individuals according the mutants they carry.%0a%3c %0a14,20d11%0a%3c The end result of this script include%0a%3c %0a%3c - A map file that contains the mutant location, frequency and selection coefficient.%0a%3c - A mutant file that contains location of mutants of each individual.%0a%3c %0a%3c Of course, using simuPOP's scripting power, you can apply a penetrance or quantitative trait model to the population and draw different types of samples from the resulting population. [[attach:quanTraits.py | This script]] demonstrates how to apply a quantitative trait model and draw individuals with extreme traits from the simulated population. More examples could be provided if needed.%0a%3c %0a23,25c14,15%0a%3c This script requires simuPOP 1.0.4 to execute. Because simuPOP 1.0.4 has not been officially released, you can download a snapshot version of it from [[http://sourceforge.net/projects/simupop/files/ | the download page of simuPOP]]. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. This version is slower but is sufficient in demonstrating features of this script.%0a%3c %0a%3c %0a---%0a> This script needs simuPOP 1.0.4. Because this version is still under development as of writing, a snapshot version can be used. %0a> %0a28,35c18,21%0a%3c This script can be run from a graphical user interface.%0a%3c %0a%3c [[Attach:simuRareVariants.jpg]]%0a%3c %0a%3c  command line, using options such as%0a%3c %0a%3c ->@@> simuRareVariants.py --gui=False --selDist=gamma3@@%0a%3c %0a---%0a> This script can be run from command line, using options such as%0a> %0a> > simuRareVariants.py --gui=False --selDist=gamma3%0a> %0a37,39c23%0a%3c %0a%3c ->@@> simuRareVariants.py -h@@%0a%3c %0a---%0a> > simuRareVariants.py -h %0a
host:1276351145=127.0.0.1
author:1276349877=
diff:1276349877:1276349075:=4c4%0a%3c %25color=red%25NOTE: This page is still under development.%25%25 This script is provided but it requires simuPOP 1.0.4 to execute. Because simuPOP 1.0.4 has not been officially released, you can download a snapshot version of it from [[http://sourceforge.net/projects/simupop/files/ | the download page of simuPOP]]. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. This version is slower but is sufficient in demonstrating features of this script.%0a---%0a> NOTE: This page is still under development. This script is provided but it requires simuPOP 1.0.4 to execute. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. The 1.0.3 version does not use features of version 1.0.4 so it is much slower.  Detailed documentations will be added later.%0a
host:1276349877=127.0.0.1
author:1276349075=
diff:1276349075:1276205762:=4c4%0a%3c NOTE: This page is still under development. This script is provided but it requires simuPOP 1.0.4 to execute. If you have simuPOP 1.0.3, you can use [[Attach:simuRareVariants_1.0.3.py | a version that is written in 1.0.3]]. The 1.0.3 version does not use features of version 1.0.4 so it is much slower.  Detailed documentations will be added later.%0a---%0a> NOTE: This page is still under development. This script is provided but it requires simuPOP 1.0.4 to execute. Detailed documentations will be added later.%0a
host:1276349075=127.0.0.1
author:1276205762=
diff:1276205762:1276205703:=8c8%0a%3c We use a demographic model that consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of a default demographic model evolves a relatively small population of 7900 individuals until it reaches a mutation selection equilibrium. After a short bottleneck stage, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009), but it can also be used to simulate other demographic models with constant population size or instant population expansion (Boyko, et al., 2008). We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. Although back mutations are allowed, their impact on the evolutionary process is negligible due to the relatively small number of mutants.%0a---%0a> We use a demographic model that consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of a default demographic model evolves a relatively small population of 7900 individuals until it reaches a mutation selection equilibrium (QUESTION: neutral case?). After a short bottleneck stage, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009), but it can also be used to simulate other demographic models with constant population size or instant population expansion (Boyko, et al., 2008). We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. Although back mutations are allowed, their impact on the evolutionary process is negligible due to the relatively small number of mutants.%0a
host:1276205762=127.0.0.1
author:1276205703=
diff:1276205703:1276205703:=1,28d0%0a%3c (:title Simulation of genome sequences with rare variants:)%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:simuRareVariants.py | http://simupop.sourceforge.net/images/download.jpg]]|simuRareVariants.py%0a%3c %0a%3c NOTE: This page is still under development. This script is provided but it requires simuPOP 1.0.4 to execute. Detailed documentations will be added later.%0a%3c %0a%3c !!! Introduction%0a%3c %0a%3c We use a demographic model that consists of a long burn-in stage, a short bottleneck stage and a rapid population expansion stage. The burn-in stage of a default demographic model evolves a relatively small population of 7900 individuals until it reaches a mutation selection equilibrium (QUESTION: neutral case?). After a short bottleneck stage, the population grows exponentially to a population of 900,000 individuals in 370 generations. This demographic model reflects a demographic model of the European population (Kryukov, et al., 2009), but it can also be used to simulate other demographic models with constant population size or instant population expansion (Boyko, et al., 2008). We use a diallelic mutation model that mutates alleles at a rate of 1.8x10-8 per generation per basepair. Although back mutations are allowed, their impact on the evolutionary process is negligible due to the relatively small number of mutants.%0a%3c %0a%3c A random distribution is used to assign selection coefficients to newly arising mutations. This program incorporates multiple sets of selection parameters estimated from human genome data using different demographic models (Boyko, et al., 2008; Eyre-Walker, et al., 2006; Kryukov, et al., 2009; Williamson, et al., 2005).  For example, using a mixed gamma distribution, a mutant can have a selection coefficient of zeros (neutral alleles) or a random number drawn from a gamma distribution ranging from -0.00001 to -0.1 (Kryukov, et al., 2009). The overall fitness of an individual is determined by either a multiplicative, an additive, or an exponential model. The differences between these models are small when s_i are small.%0a%3c %0a%3c !!! Installation%0a%3c %0a%3c This script needs simuPOP 1.0.4. Because this version is still under development as of writing, a snapshot version can be used. %0a%3c %0a%3c !!! How to use this script%0a%3c %0a%3c This script can be run from command line, using options such as%0a%3c %0a%3c > simuRareVariants.py --gui=False --selDist=gamma3%0a%3c %0a%3c Please use %0a%3c > simuRareVariants.py -h %0a%3c for a list of options.%0a%3c %0a%3c You can also use a GUI to enter parameters, or use import this script from another script.%0a%3c %0a%3c %0a
host:1276205703=127.0.0.1
