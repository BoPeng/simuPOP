version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
charset=ISO-8859-1
csum=
ctime=1244686367
host=127.0.0.1
name=Cookbook.SpatialMigration
rev=11
targets=
text=(:title A spatial migration model:)%0a%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:migrSpatial.py | http://simupop.sourceforge.net/images/download.jpg]]|migrSpatial.py%0a%0aGiven a list of subpopulations with their geometric locations, the following function%0areturns a migration rate matrix with {$ r_ij=\exp{(-r\times d_{ij})} $} where {$d_{ij}=\sqrt{(x_i-x_j)^2 + (y_i-y_j)^2}$} is the Euclidean distance between subpopulations {$i$} and {$j$}. %0a%0a=python [=%0adef spatialMigrRates(xy, r):%0a    '''%0a    Return a migration matrix where migration rates between two%0a    subpopulations vary according to Euclidean distance between them.%0a%0a    xy%0a        A list of (x,y) location for each subpopulation.%0a%0a    r%0a        Migrate rate between two subpopulations is exp(-r*d_ij) where%0a        d_ij is the Euclidean distance between subpopulations i and j.%0a    '''%0a    nSubPop = len(xy)%0a    rate = []%0a    for i in range(nSubPop):%0a        rate.append([])%0a        for j in range(nSubPop):%0a            if i == j:%0a                rate[-1].append(0)%0a                continue%0a            d_ij = math.sqrt((xy[i][0] - xy[j][0])**2 + (xy[i][1] - xy[j][1])**2)%0a            rate[-1].append(math.exp(-1 * r * d_ij))%0a    return rate%0a%0a=]%0a%0aThis function could be used as follows%0a%0a=python [=%0a%0adef simuSpatial():%0a    '''%0a    A example.%0a    '''%0a    xy = []%0a    for i in range(10):%0a        for j in range(10):%0a            xy.append((i, j))%0a    r = spatialMigrRates(xy, 3)%0a    pop = Population(size=[100]*100, loci=[1],%0a        infoFields='migrate_to')%0a    pop.evolve(%0a        # only subpopulation 55 has genotype 1, 1%0a        initOps = [%0a            InitSex(),%0a            InitGenotype(genotype=[1, 1], subPops=55),%0a        ],%0a        preOps = Migrator(rate=r),%0a        matingScheme = RandomSelection(),%0a        postOps = PyOperator(printAlleleFreq, at=3),%0a        gen = 10%0a    )%0a%0a=]%0a%0awhere @@printAlleleFreq(pop)@@ is a simple function to print allele frequency in all subpopulations%0a%0a=python [=%0adef printAlleleFreq(pop):%0a    'Print allele frequencies of all subpopulations'%0a    Stat(pop, alleleFreq=[0])%0a    print 'Allele frequencies at generation', pop.dvars().gen%0a    for i in range(10):%0a        for j in range(10):%0a            print '%25.2f' %25 pop.dvars(10*i + j).alleleFreq[0][1],%0a        print%0a    return True%0a=]%0a%0aSubpopulation 55 is around the center of the 100 subpopulations. After a few generations, the 1 alleles in this subpopulation migrate to surrounding subpopulations, as shown in a sample output%0a%0a=python [=%0aAllele frequencies at generation 3%0a0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.02 0.00 0.00 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.04 0.11 0.04 0.01 0.00 0.00%0a0.00 0.00 0.00 0.00 0.15 0.38 0.08 0.01 0.00 0.00%0a0.00 0.00 0.00 0.03 0.04 0.19 0.05 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.00 0.02 0.00 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a=]
time=1262665893
title=A spatial migration model
author:1262665893=
diff:1262665893:1262473669:=38d37%0a%3c %0a48c47%0a%3c     pop = Population(size=[100]*100, loci=[1],%0a---%0a>     pop = population(size=[100]*100, loci=[1],%0a53,54c52,53%0a%3c             InitSex(),%0a%3c             InitGenotype(genotype=[1, 1], subPops=55),%0a---%0a>             initSex(),%0a>             initByValue([1, 1], subPops=55),%0a56,58c55,57%0a%3c         preOps = Migrator(rate=r),%0a%3c         matingScheme = RandomSelection(),%0a%3c         postOps = PyOperator(printAlleleFreq, at=3),%0a---%0a>         preOps = migrator(rate=r),%0a>         matingScheme = randomSelection(),%0a>         postOps = pyOperator(printAlleleFreq, at=3),%0a
host:1262665893=127.0.0.1
author:1262473669=
diff:1262473669:1261111966:=47,49c47,49%0a%3c     pop = population(size=[100]*100, loci=[1],%0a%3c         infoFields='migrate_to')%0a%3c     pop.evolve(%0a---%0a>     simu = simulator(population(size=[100]*100, loci=[1],%0a>         infoFields='migrate_to'), randomSelection())%0a>     simu.evolve(%0a56d55%0a%3c         matingScheme = randomSelection(),%0a60d58%0a%3c %0a
host:1262473669=127.0.0.1
author:1261111966=
diff:1261111966:1261111946:=63a64%0a> %0a
host:1261111966=127.0.0.1
author:1261111946=
diff:1261111946:1244757203:=51,53c51,54%0a%3c         initOps = [%0a%3c             initSex(),%0a%3c             initByValue([1, 1], subPops=55),%0a---%0a>         preOps = initByValue([1, 1], subPops=55),%0a>         ops = [%0a>             migrator(rate=r),%0a>             pyOperator(printAlleleFreq, at=3)%0a55,56d55%0a%3c         preOps = migrator(rate=r),%0a%3c         postOps = pyOperator(printAlleleFreq, at=3),%0a58a58%0a> %0a
host:1261111946=127.0.0.1
author:1244757203=
diff:1244757203:1244756912:=6c6%0a%3c returns a migration rate matrix with {$ r_ij=\exp{(-r\times d_{ij})} $} where {$d_{ij}=\sqrt{(x_i-x_j)^2 + (y_i-y_j)^2}$} is the Euclidean distance between subpopulations {$i$} and {$j$}. %0a---%0a> returns a migration rate matrix with {$ r_ij=\exp{(-r\times d_{ij})} $} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}. %0a
host:1244757203=127.0.0.1
author:1244756912=
diff:1244756912:1244756893:=6c6%0a%3c returns a migration rate matrix with {$ r_ij=\exp{(-r\times d_{ij})} $} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}. %0a---%0a> returns a migration rate matrix with {$ r_ij=\exp{-r\times d_{ij}} $} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}. %0a
host:1244756912=127.0.0.1
author:1244756893=
diff:1244756893:1244756221:=6c6,7%0a%3c returns a migration rate matrix with {$ r_ij=\exp{-r\times d_{ij}} $} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}. %0a---%0a> returns a migration rate matrix with {$ r_ij=\exp{-r\times d_{ij}} $} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}.%0a> {$\sqrt{n}, \int_a^b f(x) dx, \displaystyle \int_a^b f(x) dx$} %0a
host:1244756893=127.0.0.1
author:1244756221=
diff:1244756221:1244752640:=7,8c7,8%0a%3c {$\sqrt{n}, \int_a^b f(x) dx, \displaystyle \int_a^b f(x) dx$} %0a%3c %0a---%0a> %0a> %0a62,63c62,63%0a%3c where @@printAlleleFreq(pop)@@ is a simple function to print allele frequency in all subpopulations%0a%3c %0a---%0a> where printAlleleFreq(pop) is a simple function to print allele frequency in all subpopulations%0a> %0a77,79c77,79%0a%3c Subpopulation 55 is around the center of the 100 subpopulations. After a few generations, the 1 alleles in this subpopulation migrate to surrounding subpopulations, as shown in a sample output%0a%3c %0a%3c =python [=%0a---%0a> The result, after three generations, the alleles have spread to surrounding subpopulations, as shown in the output%0a> %0a> [=%0a
host:1244756221=127.0.0.1
author:1244752640=
diff:1244752640:1244751946:=6,8c6,8%0a%3c returns a migration rate matrix with {$ r_ij=\exp{-r\times d_{ij}} $} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}.%0a%3c %0a%3c %0a---%0a> returns a migration rate matrix with {$r_ij=\exp{-r\times d_{ij}}$} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}.%0a> %0a> %0a36,91c36%0a%3c This function could be used as follows%0a%3c %0a%3c =python [=%0a%3c def simuSpatial():%0a%3c     '''%0a%3c     A example.%0a%3c     '''%0a%3c     xy = []%0a%3c     for i in range(10):%0a%3c         for j in range(10):%0a%3c             xy.append((i, j))%0a%3c     r = spatialMigrRates(xy, 3)%0a%3c     simu = simulator(population(size=[100]*100, loci=[1],%0a%3c         infoFields='migrate_to'), randomSelection())%0a%3c     simu.evolve(%0a%3c         # only subpopulation 55 has genotype 1, 1%0a%3c         preOps = initByValue([1, 1], subPops=55),%0a%3c         ops = [%0a%3c             migrator(rate=r),%0a%3c             pyOperator(printAlleleFreq, at=3)%0a%3c         ],%0a%3c         gen = 10%0a%3c     )%0a%3c %0a%3c =]%0a%3c %0a%3c where printAlleleFreq(pop) is a simple function to print allele frequency in all subpopulations%0a%3c %0a%3c =python [=%0a%3c %0a%3c def printAlleleFreq(pop):%0a%3c     'Print allele frequencies of all subpopulations'%0a%3c     Stat(pop, alleleFreq=[0])%0a%3c     print 'Allele frequencies at generation', pop.dvars().gen%0a%3c     for i in range(10):%0a%3c         for j in range(10):%0a%3c             print '%25.2f' %25 pop.dvars(10*i + j).alleleFreq[0][1],%0a%3c         print%0a%3c     return True%0a%3c =]%0a%3c %0a%3c The result, after three generations, the alleles have spread to surrounding subpopulations, as shown in the output%0a%3c %0a%3c [=%0a%3c Allele frequencies at generation 3%0a%3c 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.00 0.01 0.00 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.02 0.00 0.00 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.04 0.11 0.04 0.01 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.15 0.38 0.08 0.01 0.00 0.00%0a%3c 0.00 0.00 0.00 0.03 0.04 0.19 0.05 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.00 0.02 0.00 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a%3c 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00%0a%3c =]%0a\ No newline at end of file%0a---%0a> %0a
host:1244752640=127.0.0.1
author:1244751946=
diff:1244751946:1244686367:=5,8c5%0a%3c Given a list of subpopulations with their geometric locations, the following function%0a%3c returns a migration rate matrix with {$r_ij=\exp{-r\times d_{ij}}$} where {$d_{ij}$} is the Euclidean distance between subpopulations {$i$} and {$j$}.%0a%3c %0a%3c %0a---%0a> %0a10,32d6%0a%3c def spatialMigrRates(xy, r):%0a%3c     '''%0a%3c     Return a migration matrix where migration rates between two%0a%3c     subpopulations vary according to Euclidean distance between them.%0a%3c %0a%3c     xy%0a%3c         A list of (x,y) location for each subpopulation.%0a%3c %0a%3c     r%0a%3c         Migrate rate between two subpopulations is exp(-r*d_ij) where%0a%3c         d_ij is the Euclidean distance between subpopulations i and j.%0a%3c     '''%0a%3c     nSubPop = len(xy)%0a%3c     rate = []%0a%3c     for i in range(nSubPop):%0a%3c         rate.append([])%0a%3c         for j in range(nSubPop):%0a%3c             if i == j:%0a%3c                 rate[-1].append(0)%0a%3c                 continue%0a%3c             d_ij = math.sqrt((xy[i][0] - xy[j][0])**2 + (xy[i][1] - xy[j][1])**2)%0a%3c             rate[-1].append(math.exp(-1 * r * d_ij))%0a%3c     return rate%0a
host:1244751946=127.0.0.1
author:1244686367=
diff:1244686367:1244686367:=1,10d0%0a%3c (:title A spatial migration model:)%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:migrSpatial.py | http://simupop.sourceforge.net/images/download.jpg]]|migrSpatial.py%0a%3c %0a%3c %0a%3c =python [=%0a%3c %0a%3c =]%0a%3c %0a%3c %0a
host:1244686367=127.0.0.1
