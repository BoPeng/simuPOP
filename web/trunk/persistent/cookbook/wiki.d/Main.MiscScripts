version=pmwiki-2.2.0 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.100 Safari/534.30
author=
charset=ISO-8859-1
csum=
ctime=1260998504
host=172.29.30.66
name=Main.MiscScripts
rev=74
targets=
text=(:title Miscellaneous topics:)%0a%0a!! Scalability of simuPOP %0a%0aThe maximum population size that simuPOP can simulate depends on the size of memory of a computer, and the speed of simulation depends on CPU speed and number of cores. The higher specification you have, the more scalability of simuPOP. Most of the memory allocated for a simuPOP population is used to store genotypes and individual information so you can estimate the usage of memory by number of individuals and loci, and type of allele, which differs between short (1 byte per locus), binary (1 bit) and long (4-8 bytes) modules. The following table lists the estimated maximum  population size of a simuPOP population:%0a%0a(:table border=1 cellpadding=5 cellspacing=0:)%0a(:cellnr:) '''Allele Type'''%0a(:cell:) '''Maximum Population Size'''%0a(:cellnr:)short%0a(:cell:) (memory size(GB) * 1024 * 1024 * 1024) / (2 * loci * ploidy + 56)%0a(:cellnr:)long%0a(:cell:) (memory size(GB) * 1024 * 1024 * 1024) / (8 * loci * ploidy + 56)%0a(:cellnr:)binary%0a(:cell:) (memory size(GB) * 1024 * 1024 * 1024) / (loci * ploidy / 4 + 72)%0a(:tableend:)%0a%0aFor example, the maximum population size of 8 GB memory with allele type=short, loci=100, and ploidy=2 is \\%0a(8 * 1024 * 1024 * 1024)/(2 * 100 * 2 + 56) = 18,837,575 \\%0aThe following is the python script used to estimate the maximum population size of basic random mating scheme:%0a%25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:estimatedSize.py | http://simupop.sourceforge.net/images/download.jpg]]|estimatedSize.py%0a=python [=%0aimport os, sys, timeit, time%0a%0aalleleType='short'%0aloci = 1000%0aploidy=2%0a# Number of generation%0agen = 10%0a# Memory Size (GB)%0amemsize = 8%0a# Number of processors(CPU Core)%0anumThreads=1%0a%0a%0afrom simuOpt import setOptions%0asetOptions(quiet=True)%0asetOptions(alleleType = alleleType)%0asetOptions(numThreads = numThreads)%0afrom simuPOP import *%0a%0aif alleleType == 'short':%0a    size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*1.0 + 24.0)*2.0 + 8)%0aelif alleleType == 'long':%0a    size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*4.0 + 24.0)*2.0 + 8)%0aelif alleleType == 'binary':%0a    size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy/8.0 + 32.0)*2.0 + 8)%0amating = timeit.Timer(%0a    setup = 'from __main__ import Population, InitSex, RandomMating,'%0a        'MendelianGenoTransmitter\n'%0a        "pop = Population(size=%25d, loci=%25d, ploidy = %25d)" %25 (size, loci, ploidy),%0a    stmt = "pop.evolve(\n"%0a        "initOps=InitSex(),\n"%0a        "matingScheme=RandomMating(ops=MendelianGenoTransmitter()),\n"%0a        "gen=%25d)" %25 gen)%0aprint "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,%0a    mating.timeit(number=1))%0a%0a=]%0a%0aNext, we show the example of simuPOP experiment with basic random mating scheme. The technical hardware and environment specification used in the experiment is as follows:%0a%0a* Model Name: Intel(R) Core(TM) i7 CPU 870 @ 2.93GHz %0a* Number of Processors: 8 %0a* Memory: 15.5 GB (16,650,493,952 bytes) %0a* Operation system: Red Hat Enterprise Linux Workstation Release 6.1%0a* Compiler: GNU compiler %0a%0aOur system have 15.5 GB memory. We can't use all 15.5 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 15.5 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, 12, and 14 GB respectively as follows:%0a%0a(:table border=1 cellpadding=5 cellspacing=0:)%0a(:cellnr colspan=8:) '''loci''' = 100, '''ploidy'''= 2, '''gens'''=10%0a(:cellnr colspan=2:)''' AlleleType '''%0a(:cell colspan=2:) ''short''%0a(:cell colspan=2:)''long''%0a(:cell colspan=2:)''binary''%0a(:cellnr:) '''Memory Size'''%0a(:cell:)'''CPU Core'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cellnr rowspan=3 valign=center:)4GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)9,418,787%0a(:cell:)72.48%0a(:cell rowspan=3 valign=center:)2,593,579%0a(:cell:)23.45%0a(:cell rowspan=3 valign=center:)35,204,649%0a(:cell:)266.22%0a(:cellnr:)2%0a(:cell:)41.78%0a(:cell:)13.70%0a(:cell:)152.5%0a(:cellnr:)4%0a(:cell:)25.76%0a(:cell:)9.16%0a(:cell:)92.31%0a(:cellnr rowspan=3 valign=center:)8GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)18,837,575%0a(:cell:)142.84%0a(:cell rowspan=3 valign=center:)5,187,158%0a(:cell:)46.42%0a(:cell rowspan=3 valign=center:)70,409,299%0a(:cell:)528.92%0a(:cellnr:)2%0a(:cell:)83.32%0a(:cell:)27.88%0a(:cell:)305.95%0a(:cellnr:)4%0a(:cell:)52.30%0a(:cell:)18.48%0a(:cell:)183.88%0a(:cellnr rowspan=3 valign=center:)12GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)28,256,363%0a(:cell:)227.30%0a(:cell rowspan=3 valign=center:)7,780,737%0a(:cell:)70.57%0a(:cell rowspan=3 valign=center:)105,613,949%0a(:cell:)796.33%0a(:cellnr:)2%0a(:cell:)126.29%0a(:cell:)41.86%0a(:cell:)463.29%0a(:cellnr:)4%0a(:cell:)78.25%0a(:cell:)27.67%0a(:cell:)282.09%0a(:cellnr rowspan=3 valign=center:)14GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)32,965,757%0a(:cell:)306.67%0a(:cell rowspan=3 valign=center:)9,077,527%0a(:cell:)90.47%0a(:cell rowspan=3 valign=center:)123,216,274%0a(:cell:)959.62%0a(:cellnr:)2%0a(:cell:)154.10%0a(:cell:)52.11%0a(:cell:)530.84%0a(:cellnr:)4%0a(:cell:)94.29%0a(:cell:)33.46%0a(:cell:)327.85%0a(:tableend:)%0a%0a(:table border=1 cellpadding=5 cellspacing=0:)%0a(:cellnr colspan=8:) '''loci''' = 1000, '''ploidy'''= 2, '''gens'''=10%0a(:cellnr colspan=2:)''' AlleleType '''%0a(:cell colspan=2:) ''short''%0a(:cell colspan=2:)''long''%0a(:cell colspan=2:)''binary''%0a(:cellnr:) '''Memory Size'''%0a(:cell:)'''CPU Core'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cellnr rowspan=3 valign=center:)4GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)1,058,916%0a(:cell:)12.58%0a(:cell rowspan=3 valign=center:)267,499%0a(:cell:)7.00%0a(:cell rowspan=3 valign=center:)7,508,684%0a(:cell:)61.48%0a(:cellnr:)2%0a(:cell:)8.26%0a(:cell:)5.71%0a(:cell:)35.36%0a(:cellnr:)4%0a(:cell:)6.68%0a(:cell:)5.29%0a(:cell:)22.18%0a(:cellnr rowspan=3 valign=center:)8GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)2,117,833%0a(:cell:)25.72%0a(:cell rowspan=3 valign=center:)534,998%0a(:cell:)13.95%0a(:cell rowspan=3 valign=center:)15,017,368%0a(:cell:)126.74%0a(:cellnr:)2%0a(:cell:)16.57%0a(:cell:)11.33%0a(:cell:)71.69%0a(:cellnr:)4%0a(:cell:)13.28%0a(:cell:)10.61%0a(:cell:)44.5%0a(:cellnr rowspan=3 valign=center:)12GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)3,176,750%0a(:cell:)38.77%0a(:cell rowspan=3 valign=center:)802,497%0a(:cell:)20.83%0a(:cell rowspan=3 valign=center:)22,526,052%0a(:cell:)185.14%0a(:cellnr:)2%0a(:cell:)24.22%0a(:cell:)16.89%0a(:cell:)107.90%0a(:cellnr:)4%0a(:cell:)19.91%0a(:cell:)15.88%0a(:cell:)67.08%0a(:cellnr rowspan=3 valign=center:)14GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)3,706,209%0a(:cell:)45.02%0a(:cell rowspan=3 valign=center:)936,247%0a(:cell:)22.83%0a(:cell rowspan=3 valign=center:)26,280,394%0a(:cell:)218.45%0a(:cellnr:)2%0a(:cell:)27.99%0a(:cell:)18.70%0a(:cell:)124.66%0a(:cellnr:)4%0a(:cell:)22.98%0a(:cell:)18.44%0a(:cell:)77.40%0a(:tableend:)%0a%0aIn addition, we demonstrate the experiment with the maximum loci size in the memory size 4, 8, 12, and 14 GB respectively as follows:%0a%0a(:table border=1 cellpadding=5 cellspacing=0:)%0a(:cellnr colspan=8:) '''Population size''' = 1000, '''ploidy'''= 2, '''gens'''=10%0a(:cellnr colspan=2:)''' AlleleType '''%0a(:cell colspan=2:) ''short''%0a(:cell colspan=2:)''long''%0a(:cell colspan=2:)''binary''%0a(:cellnr:) '''Memory Size'''%0a(:cell:)'''CPU Core'''%0a(:cell:)'''Max Loci'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Loci'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Loci'''%0a(:cell:)'''time (sec)'''%0a(:cellnr rowspan=3 valign=center:)4GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)1,073,727%0a(:cell:)6.11%0a(:cell rowspan=3 valign=center:)268,431%0a(:cell:)5.72%0a(:cell rowspan=3 valign=center:)8,589,790%0a(:cell:)5.96%0a(:cellnr:)2%0a(:cell:)4.97%0a(:cell:)4.90%0a(:cell:)4.94%0a(:cellnr:)4%0a(:cell:)4.63%0a(:cell:)4.57%0a(:cell:)4.60%0a(:cellnr rowspan=3 valign=center:)8GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)2,147,469%0a(:cell:)12.11%0a(:cell rowspan=3 valign=center:)536,867%0a(:cell:)11.45%0a(:cell rowspan=3 valign=center:)17,179,725%0a(:cell:)12%0a(:cellnr:)2%0a(:cell:)10.01%0a(:cell:)9.68%0a(:cell:)9.91%0a(:cellnr:)4%0a(:cell:)9.24%0a(:cell:)9.1%0a(:cell:)9.2%0a(:cellnr rowspan=3 valign=center:)12GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)3,221,211%0a(:cell:)17.25%0a(:cell rowspan=3 valign=center:)805,302%0a(:cell:)16.35%0a(:cell rowspan=3 valign=center:)25,769,659%0a(:cell:)17.09%0a(:cellnr:)2%0a(:cell:)14.92%0a(:cell:)14.13%0a(:cell:)14.75%0a(:cellnr:)4%0a(:cell:)14.01%0a(:cell:)14.03%0a(:cell:)13.84%0a(:cellnr rowspan=3 valign=center:)14GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)3,758,082%0a(:cell:)18.12%0a(:cell rowspan=3 valign=center:)939,520%0a(:cell:)17.69%0a(:cell rowspan=3 valign=center:)30,064,627%0a(:cell:)21.10%0a(:cellnr:)2%0a(:cell:)16.10%0a(:cell:)15.48%0a(:cell:)21.35%0a(:cellnr:)4%0a(:cell:)15.79%0a(:cell:)15.63%0a(:cell:)19.36%0a(:tableend:)%0a%0a(:table border=1 cellpadding=5 cellspacing=0:)%0a(:cellnr colspan=8:) '''Population size''' = 100000, '''ploidy'''= 2, '''gens'''=10%0a(:cellnr colspan=2:)''' AlleleType '''%0a(:cell colspan=2:) ''short''%0a(:cell colspan=2:)''long''%0a(:cell colspan=2:)''binary''%0a(:cellnr:) '''Memory Size'''%0a(:cell:)'''CPU Core'''%0a(:cell:)'''Max Loci'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Loci'''%0a(:cell:)'''time (sec)'''%0a(:cell:)'''Max Loci'''%0a(:cell:)'''time (sec)'''%0a(:cellnr rowspan=3 valign=center:)4GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)10,723%0a(:cell:)6.35%0a(:cell rowspan=3 valign=center:)2,680%0a(:cell:)5.92%0a(:cell rowspan=3 valign=center:)85,755%0a(:cell:)6.52%0a(:cellnr:)2%0a(:cell:)5.42%0a(:cell:)5.14%0a(:cell:)5.44%0a(:cellnr:)4%0a(:cell:)5.01%0a(:cell:)4.89%0a(:cell:)4.97%0a(:cellnr rowspan=3 valign=center:)8GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)21,460%0a(:cell:)12.10%0a(:cell rowspan=3 valign=center:)5,365%0a(:cell:)12.04%0a(:cell rowspan=3 valign=center:)171,654%0a(:cell:)12.32%0a(:cellnr:)2%0a(:cell:)10.32%0a(:cell:)10.14%0a(:cell:)10.2%0a(:cellnr:)4%0a(:cell:)9.62%0a(:cell:)9.58%0a(:cell:)9.62%0a(:cellnr rowspan=3 valign=center:)12GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)32,198%0a(:cell:)17.59%0a(:cell rowspan=3 valign=center:)8,049%0a(:cell:)17.92%0a(:cell rowspan=3 valign=center:)257,554%0a(:cell:)18.43%0a(:cellnr:)2%0a(:cell:)15.38%0a(:cell:)15.07%0a(:cell:)15.52%0a(:cellnr:)4%0a(:cell:)14.61%0a(:cell:)14.27%0a(:cell:)14.35%0a(:cellnr rowspan=3 valign=center:)14GB%0a(:cell:)1%0a(:cell rowspan=3 valign=center:)37,566%0a(:cell:)18.84%0a(:cell rowspan=3 valign=center:)9,391%0a(:cell:)18.76%0a(:cell rowspan=3 valign=center:)300,503%0a(:cell:)19.39%0a(:cellnr:)2%0a(:cell:)16.58%0a(:cell:)16.57%0a(:cell:)17.01%0a(:cellnr:)4%0a(:cell:)16.41%0a(:cell:)16.28%0a(:cell:)16.35%0a(:tableend:)%0a%0a%0aFinally, we show the worst scenario when we run the experiment in 15GB memory, which almost equals to the memory size of our system as follows:%0a%0a(:table border=1 cellpadding=5 cellspacing=0:)%0a(:cellnr colspan=4:)'''AlleleType'''=short, '''loci''' = 1000, '''ploidy'''= 2, '''gens'''=5%0a(:cellnr:) '''Memory Size'''%0a(:cell:)'''CPU Core'''%0a(:cell:)'''Max Population'''%0a(:cell:)'''time (sec)'''%0a(:cellnr:) 15GB%0a(:cell:)4%0a(:cell:)3,970,938%0a(:cell:)31,581.11 (8.7 hours)%0a(:tableend:)%0a%0aWe can see the execution time of simuPOP is very slow because we use too much memory, and operation system don't have enough space to run its system.%0a%0a%0a%0a
time=1309365359
title=Miscellaneous topics
author:1309365359=
diff:1309365359:1309365131:=5c5,7%0a%3c The maximum population size that simuPOP can simulate depends on the size of memory of a computer, and the speed of simulation depends on CPU speed and number of cores. The higher specification you have, the more scalability of simuPOP. Most of the memory allocated for a simuPOP population is used to store genotypes and individual information so you can estimate the usage of memory by number of individuals and loci, and type of allele, which differs between short (1 byte per locus), binary (1 bit) and long (4-8 bytes) modules. The following table lists the estimated maximum  population size of a simuPOP population:%0a---%0a> The maximum population size that simuPOP can simulate depends on the size of memory of a computer, and the speed of simulation depends on CPU speed and number of cores. The higher specification you have, the more scalability of simuPOP. Most of the memory allocated for a simuPOP population is used to store genotypes and individual information so you can estimate the usage of memory by%0a> %0a>  The following table is the maximum estimated size of population in the random mating scheme.%0a
host:1309365359=172.29.30.66
author:1309365131=
diff:1309365131:1309364638:=5,7c5%0a%3c The maximum population size that simuPOP can simulate depends on the size of memory of a computer, and the speed of simulation depends on CPU speed and number of cores. The higher specification you have, the more scalability of simuPOP. Most of the memory allocated for a simuPOP population is used to store genotypes and individual information so you can estimate the usage of memory by%0a%3c %0a%3c  The following table is the maximum estimated size of population in the random mating scheme.%0a---%0a> The maximum population size of simuPOP depends on the memory size of a computer, and The speed of the simuPOP depends on the CPU speed and the number of cores. The higher specification you have, the more scalability of simuPOP. In the simuPOP, when we create population, the most of memory will be allocated in pool of genotypic information, and individuals in the population. In addition, there are three type of allele in genotypic information and individuals: short, long, binary. Each types is allocated memory in the different size. In the random mating, there is internal index allocated the memory. The following table is the maximum estimated size of population in the random mating scheme.%0a
host:1309365131=172.29.30.68
author:1309364638=
diff:1309364638:1309364582:=1a2,7%0a> %0a> !! Performance tricks%0a> %0a> * [[Cookbook/Performance]] This page lists some tricks that can make your script runs faster.%0a> %0a> %0a
host:1309364638=172.29.30.75
author:1309364582=
diff:1309364582:1309362497:=7c7,9%0a%3c %0a---%0a> !! A power calculator for case control association studies with known family histories%0a> %0a> Script [[ Cookbook/caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions. Please refer to Peng et al, Human Genetics, 2010 for details.%0a
host:1309364582=172.29.30.68
author:1309362497=
diff:1309362497:1309362139:=402c402%0a%3c Finally, we show the worst scenario when we run the experiment in 15GB memory, which almost equals to the memory size of our system as follows:%0a---%0a> Finally, we show the worst scenario with 15GB memory experiment that almost equals to the memory size of our system as follows:%0a
host:1309362497=172.29.30.65
author:1309362139=
diff:1309362139:1309361950:=402c402%0a%3c Finally, we show the worst scenario with 15GB memory experiment that almost equals to the memory size of our system as follows:%0a---%0a> Finally, we show the worst scenario that we run 15GB memory experiment, which almost equals to the memory size of our system as follows:%0a
host:1309362139=172.29.30.70
author:1309361950=
diff:1309361950:1309361582:=239c239%0a%3c In addition, we demonstrate the experiment with the maximum loci size in the memory size 4, 8, 12, and 14 GB respectively as follows:%0a---%0a> In addition, we perform the experiment with the maximum loci in the memory size 4, 8, 12, and 14 GB respectively as follows:%0a
host:1309361950=172.29.30.72
author:1309361582=
diff:1309361582:1309361501:=28c28%0a%3c The following is the python script used to estimate the maximum population size of basic random mating scheme:%0a---%0a> The following is the python script used to estimate the maximum population size:%0a
host:1309361582=172.29.30.65
author:1309361501=
diff:1309361501:1309361435:=28c28%0a%3c The following is the python script used to estimate the maximum population size:%0a---%0a> The following is the python script used for estimated the maximum population size:%0a
host:1309361501=172.29.30.73
author:1309361435=
diff:1309361435:1309361419:=27c27%0a%3c (8 * 1024 * 1024 * 1024)/(2 * 100 * 2 + 56) = 18,837,575 \\%0a---%0a> (8 * 1024 * 1024 * 1024)/(2 * 100 * 2 + 56) = 18837575 \\%0a
host:1309361435=172.29.30.73
author:1309361419=
diff:1309361419:1309361348:=26c26%0a%3c For example, the maximum population size of 8 GB memory with allele type=short, loci=100, and ploidy=2 is \\%0a---%0a> For example, the maximum population size of 8 GB memory in short allele type, loci=100, and ploidy=2 is \\%0a
host:1309361419=172.29.30.76
author:1309361348=
diff:1309361348:1309361092:=26,27c26,28%0a%3c For example, the maximum population size of 8 GB memory in short allele type, loci=100, and ploidy=2 is \\%0a%3c (8 * 1024 * 1024 * 1024)/(2 * 100 * 2 + 56) = 18837575 \\%0a---%0a> For example, the maximum population size of 8 GB memory in short allele type, loci=100, and ploidy=2 is:%0a> Maximum population size = (8 * 1024 * 1024 * 1024)/(2 * 100 * 2 + 56)%0a>                         = 18837575%0a
host:1309361348=172.29.30.71
author:1309361092=
diff:1309361092:1309360534:=19c19%0a%3c (:cell:) (memory size(GB) * 1024 * 1024 * 1024) / (2 * loci * ploidy + 56)%0a---%0a> (:cell:) = Memory size(GB) * 1024 * 1024 / ((2 * loci * ploidy) + 56)%0a21c21%0a%3c (:cell:) (memory size(GB) * 1024 * 1024 * 1024) / (8 * loci * ploidy + 56)%0a---%0a> (:cell:) = Memory size(GB) * 1024 * 1024 / ((8 * loci * ploidy) + 56)%0a23c23%0a%3c (:cell:) (memory size(GB) * 1024 * 1024 * 1024) / (loci * ploidy / 4 + 72)%0a---%0a> (:cell:) = Memory size(GB) * 1024 * 1024 / ((loci * ploidy / 4) + 72)%0a26,28c26%0a%3c For example, the maximum population size of 8 GB memory in short allele type, loci=100, and ploidy=2 is:%0a%3c Maximum population size = (8 * 1024 * 1024 * 1024)/(2 * 100 * 2 + 56)%0a%3c                         = 18837575%0a---%0a> The number two multiplies Population because there are two populations. The first population is the actual population, and second population is temporary population that is used to generate next generation of population. %0a
host:1309361092=172.29.30.68
author:1309360534=
diff:1309360534:1309359258:=17c17%0a%3c (:cell:) '''Maximum Population Size'''%0a---%0a> (:cell:) '''Memory allocated (bytes)'''%0a19c19,21%0a%3c (:cell:) = Memory size(GB) * 1024 * 1024 / ((2 * loci * ploidy) + 56)%0a---%0a> (:cell:) = 2 * Population + internal index%0a> = 2 * (genotypic information + individuals) + internal index \\%0a> = 2 * ( (PopSize * loci * ploidy * 1) + (PopSize * 24) ) + PopSize * 8%0a21c23,25%0a%3c (:cell:) = Memory size(GB) * 1024 * 1024 / ((8 * loci * ploidy) + 56)%0a---%0a> (:cell:) = 2 * Population + internal index%0a> = 2 * (genotypic information + individuals) + internal index \\%0a> = 2 * ( (PopSize * loci * ploidy * 4) + (PopSize * 24) ) + PopSize * 8%0a23c27,29%0a%3c (:cell:) = Memory size(GB) * 1024 * 1024 / ((loci * ploidy / 4) + 72)%0a---%0a> (:cell:) = 2 * Population + internal index%0a> = 2 * (genotypic information + individuals) + internal index \\%0a> = 2 * ( (PopSize * loci * ploidy / 8) + (PopSize * 32) ) + PopSize * 8%0a69d74%0a%3c %0a
host:1309360534=172.29.30.74
author:1309359258=
diff:1309359258:1309359255:=
host:1309359258=172.29.30.75
author:1309359255=
diff:1309359255:1309359096:=406c406%0a%3c Finally, we show the worst scenario that we run 15GB memory experiment, which almost equals to the memory size of our system as follows:%0a---%0a> Finally, we show the worst scenario that we run the experiment 15GB memory, which almost equals to the memory size of our system as follows:%0a
host:1309359255=172.29.30.75
author:1309359096=
diff:1309359096:1309358856:=309,314c309,314%0a%3c (:cell rowspan=3 valign=center:)3,758,082%0a%3c (:cell:)18.12%0a%3c (:cell rowspan=3 valign=center:)939,520%0a%3c (:cell:)17.69%0a%3c (:cell rowspan=3 valign=center:)30,064,627%0a%3c (:cell:)21.10%0a---%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a316,318c316,318%0a%3c (:cell:)16.10%0a%3c (:cell:)15.48%0a%3c (:cell:)21.35%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a320,322c320,322%0a%3c (:cell:)15.79%0a%3c (:cell:)15.63%0a%3c (:cell:)19.36%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a389,394c389,394%0a%3c (:cell rowspan=3 valign=center:)37,566%0a%3c (:cell:)18.84%0a%3c (:cell rowspan=3 valign=center:)9,391%0a%3c (:cell:)18.76%0a%3c (:cell rowspan=3 valign=center:)300,503%0a%3c (:cell:)19.39%0a---%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a396,398c396,398%0a%3c (:cell:)16.58%0a%3c (:cell:)16.57%0a%3c (:cell:)17.01%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a400,402c400,402%0a%3c (:cell:)16.41%0a%3c (:cell:)16.28%0a%3c (:cell:)16.35%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a
host:1309359096=172.29.30.67
author:1309358856=
diff:1309358856:1309358291:=147,152c147,152%0a%3c (:cell rowspan=3 valign=center:)32,965,757%0a%3c (:cell:)306.67%0a%3c (:cell rowspan=3 valign=center:)9,077,527%0a%3c (:cell:)90.47%0a%3c (:cell rowspan=3 valign=center:)123,216,274%0a%3c (:cell:)959.62%0a---%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a154,156c154,156%0a%3c (:cell:)154.10%0a%3c (:cell:)52.11%0a%3c (:cell:)530.84%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a158,160c158,160%0a%3c (:cell:)94.29%0a%3c (:cell:)33.46%0a%3c (:cell:)327.85%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a227,232c227,232%0a%3c (:cell rowspan=3 valign=center:)3,706,209%0a%3c (:cell:)45.02%0a%3c (:cell rowspan=3 valign=center:)936,247%0a%3c (:cell:)22.83%0a%3c (:cell rowspan=3 valign=center:)26,280,394%0a%3c (:cell:)218.45%0a---%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a> (:cell rowspan=3 valign=center:)%0a> (:cell:)%0a234,236c234,236%0a%3c (:cell:)27.99%0a%3c (:cell:)18.70%0a%3c (:cell:)124.66%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a238,240c238,240%0a%3c (:cell:)22.98%0a%3c (:cell:)18.44%0a%3c (:cell:)77.40%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a
host:1309358856=172.29.30.76
author:1309358291=
diff:1309358291:1309358201:=69,70c69%0a%3c print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,%0a%3c     mating.timeit(number=1))%0a---%0a> print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,mating.timeit(number=1))%0a
host:1309358291=172.29.30.67
author:1309358201=
diff:1309358201:1309357992:=62c62%0a%3c     setup = 'from __main__ import Population, InitSex, RandomMating,'%0a---%0a>     setup = 'from __main__ import Population, InitSex, RandomMating,\n'%0a69c69,70%0a%3c print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,mating.timeit(number=1))%0a---%0a> print "Maximum number of population size: %25d\nTime(sec):%25f" %0a>     %25 (size,mating.timeit(number=1))%0a
host:1309358201=172.29.30.68
author:1309357992=
diff:1309357992:1309293773:=62,63c62%0a%3c     setup = 'from __main__ import Population, InitSex, RandomMating,\n'%0a%3c         'MendelianGenoTransmitter\n'%0a---%0a>     setup = 'from __main__ import Population, InitSex, RandomMating, MendelianGenoTransmitter\n'%0a69,70c68%0a%3c print "Maximum number of population size: %25d\nTime(sec):%25f" %0a%3c     %25 (size,mating.timeit(number=1))%0a---%0a> print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,mating.timeit(number=1))%0a
host:1309357992=172.29.30.72
author:1309293773=
diff:1309293773:1309293474:=404c404%0a%3c Finally, we show the worst scenario that we run the experiment 15GB memory, which almost equals to the memory size of our system as follows:%0a---%0a> Finally, we run the experiment 15GB memory that almost equals to the memory size of our system as follows:%0a
host:1309293773=172.29.30.69
author:1309293474=
diff:1309293474:1309293225:=240,241d239%0a%3c %0a%3c In addition, we perform the experiment with the maximum loci in the memory size 4, 8, 12, and 14 GB respectively as follows:%0a
host:1309293474=172.29.30.74
author:1309293225=
diff:1309293225:1309292925:=45c45%0a%3c # Number of processors(CPU Core)%0a---%0a> # Number of processors%0a
host:1309293225=172.29.30.70
author:1309292925=
diff:1309292925:1309292683:=275c275%0a%3c (:cell rowspan=3 valign=center:)536,867%0a---%0a> (:cell rowspan=3 valign=center:)5,536,867%0a
host:1309292925=172.29.30.65
author:1309292683=
diff:1309292683:1309292674:=
host:1309292683=172.29.30.68
author:1309292674=
diff:1309292674:1309281438:=240,400d239%0a%3c %0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr colspan=8:) '''Population size''' = 1000, '''ploidy'''= 2, '''gens'''=10%0a%3c (:cellnr colspan=2:)''' AlleleType '''%0a%3c (:cell colspan=2:) ''short''%0a%3c (:cell colspan=2:)''long''%0a%3c (:cell colspan=2:)''binary''%0a%3c (:cellnr:) '''Memory Size'''%0a%3c (:cell:)'''CPU Core'''%0a%3c (:cell:)'''Max Loci'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Loci'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Loci'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cellnr rowspan=3 valign=center:)4GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)1,073,727%0a%3c (:cell:)6.11%0a%3c (:cell rowspan=3 valign=center:)268,431%0a%3c (:cell:)5.72%0a%3c (:cell rowspan=3 valign=center:)8,589,790%0a%3c (:cell:)5.96%0a%3c (:cellnr:)2%0a%3c (:cell:)4.97%0a%3c (:cell:)4.90%0a%3c (:cell:)4.94%0a%3c (:cellnr:)4%0a%3c (:cell:)4.63%0a%3c (:cell:)4.57%0a%3c (:cell:)4.60%0a%3c (:cellnr rowspan=3 valign=center:)8GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)2,147,469%0a%3c (:cell:)12.11%0a%3c (:cell rowspan=3 valign=center:)5,536,867%0a%3c (:cell:)11.45%0a%3c (:cell rowspan=3 valign=center:)17,179,725%0a%3c (:cell:)12%0a%3c (:cellnr:)2%0a%3c (:cell:)10.01%0a%3c (:cell:)9.68%0a%3c (:cell:)9.91%0a%3c (:cellnr:)4%0a%3c (:cell:)9.24%0a%3c (:cell:)9.1%0a%3c (:cell:)9.2%0a%3c (:cellnr rowspan=3 valign=center:)12GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)3,221,211%0a%3c (:cell:)17.25%0a%3c (:cell rowspan=3 valign=center:)805,302%0a%3c (:cell:)16.35%0a%3c (:cell rowspan=3 valign=center:)25,769,659%0a%3c (:cell:)17.09%0a%3c (:cellnr:)2%0a%3c (:cell:)14.92%0a%3c (:cell:)14.13%0a%3c (:cell:)14.75%0a%3c (:cellnr:)4%0a%3c (:cell:)14.01%0a%3c (:cell:)14.03%0a%3c (:cell:)13.84%0a%3c (:cellnr rowspan=3 valign=center:)14GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cellnr:)2%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)4%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:tableend:)%0a%3c %0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr colspan=8:) '''Population size''' = 100000, '''ploidy'''= 2, '''gens'''=10%0a%3c (:cellnr colspan=2:)''' AlleleType '''%0a%3c (:cell colspan=2:) ''short''%0a%3c (:cell colspan=2:)''long''%0a%3c (:cell colspan=2:)''binary''%0a%3c (:cellnr:) '''Memory Size'''%0a%3c (:cell:)'''CPU Core'''%0a%3c (:cell:)'''Max Loci'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Loci'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Loci'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cellnr rowspan=3 valign=center:)4GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)10,723%0a%3c (:cell:)6.35%0a%3c (:cell rowspan=3 valign=center:)2,680%0a%3c (:cell:)5.92%0a%3c (:cell rowspan=3 valign=center:)85,755%0a%3c (:cell:)6.52%0a%3c (:cellnr:)2%0a%3c (:cell:)5.42%0a%3c (:cell:)5.14%0a%3c (:cell:)5.44%0a%3c (:cellnr:)4%0a%3c (:cell:)5.01%0a%3c (:cell:)4.89%0a%3c (:cell:)4.97%0a%3c (:cellnr rowspan=3 valign=center:)8GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)21,460%0a%3c (:cell:)12.10%0a%3c (:cell rowspan=3 valign=center:)5,365%0a%3c (:cell:)12.04%0a%3c (:cell rowspan=3 valign=center:)171,654%0a%3c (:cell:)12.32%0a%3c (:cellnr:)2%0a%3c (:cell:)10.32%0a%3c (:cell:)10.14%0a%3c (:cell:)10.2%0a%3c (:cellnr:)4%0a%3c (:cell:)9.62%0a%3c (:cell:)9.58%0a%3c (:cell:)9.62%0a%3c (:cellnr rowspan=3 valign=center:)12GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)32,198%0a%3c (:cell:)17.59%0a%3c (:cell rowspan=3 valign=center:)8,049%0a%3c (:cell:)17.92%0a%3c (:cell rowspan=3 valign=center:)257,554%0a%3c (:cell:)18.43%0a%3c (:cellnr:)2%0a%3c (:cell:)15.38%0a%3c (:cell:)15.07%0a%3c (:cell:)15.52%0a%3c (:cellnr:)4%0a%3c (:cell:)14.61%0a%3c (:cell:)14.27%0a%3c (:cell:)14.35%0a%3c (:cellnr rowspan=3 valign=center:)14GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cellnr:)2%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)4%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:tableend:)%0a%3c %0a
host:1309292674=172.29.30.73
author:1309281438=
diff:1309281438:1309281080:=76c76%0a%3c * Operation system: Red Hat Enterprise Linux Workstation Release 6.1%0a---%0a> * Operation system: Red Hat Enterprise Linux Workstation Release 6.1 %0a
host:1309281438=172.29.30.66
author:1309281080=
diff:1309281080:1309281069:=
host:1309281080=172.29.30.76
author:1309281069=
diff:1309281069:1309280694:=33,71c33%0a%3c The following is the python script used for estimated the maximum population size:%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:estimatedSize.py | http://simupop.sourceforge.net/images/download.jpg]]|estimatedSize.py%0a%3c =python [=%0a%3c import os, sys, timeit, time%0a%3c %0a%3c alleleType='short'%0a%3c loci = 1000%0a%3c ploidy=2%0a%3c # Number of generation%0a%3c gen = 10%0a%3c # Memory Size (GB)%0a%3c memsize = 8%0a%3c # Number of processors%0a%3c numThreads=1%0a%3c %0a%3c %0a%3c from simuOpt import setOptions%0a%3c setOptions(quiet=True)%0a%3c setOptions(alleleType = alleleType)%0a%3c setOptions(numThreads = numThreads)%0a%3c from simuPOP import *%0a%3c %0a%3c if alleleType == 'short':%0a%3c     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*1.0 + 24.0)*2.0 + 8)%0a%3c elif alleleType == 'long':%0a%3c     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*4.0 + 24.0)*2.0 + 8)%0a%3c elif alleleType == 'binary':%0a%3c     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy/8.0 + 32.0)*2.0 + 8)%0a%3c mating = timeit.Timer(%0a%3c     setup = 'from __main__ import Population, InitSex, RandomMating, MendelianGenoTransmitter\n'%0a%3c         "pop = Population(size=%25d, loci=%25d, ploidy = %25d)" %25 (size, loci, ploidy),%0a%3c     stmt = "pop.evolve(\n"%0a%3c         "initOps=InitSex(),\n"%0a%3c         "matingScheme=RandomMating(ops=MendelianGenoTransmitter()),\n"%0a%3c         "gen=%25d)" %25 gen)%0a%3c print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,mating.timeit(number=1))%0a%3c %0a%3c =]%0a%3c %0a---%0a> %0a257c219,256%0a%3c %0a---%0a> The following is the python script used for estimated the maximum population size:%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:estimatedSize.py | http://simupop.sourceforge.net/images/download.jpg]]|estimatedSize.py%0a> =python [=%0a> import os, sys, timeit, time%0a> %0a> alleleType='short'%0a> loci = 1000%0a> ploidy=2%0a> # Number of generation%0a> gen = 10%0a> # Memory Size (GB)%0a> memsize = 8%0a> # Number of processors%0a> numThreads=1%0a> %0a> %0a> from simuOpt import setOptions%0a> setOptions(quiet=True)%0a> setOptions(alleleType = alleleType)%0a> setOptions(numThreads = numThreads)%0a> from simuPOP import *%0a> %0a> if alleleType == 'short':%0a>     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*1.0 + 24.0)*2.0 + 8)%0a> elif alleleType == 'long':%0a>     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*4.0 + 24.0)*2.0 + 8)%0a> elif alleleType == 'binary':%0a>     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy/8.0 + 32.0)*2.0 + 8)%0a> mating = timeit.Timer(%0a>     setup = 'from __main__ import Population, InitSex, RandomMating, MendelianGenoTransmitter\n'%0a>         "pop = Population(size=%25d, loci=%25d, ploidy = %25d)" %25 (size, loci, ploidy),%0a>     stmt = "pop.evolve(\n"%0a>         "initOps=InitSex(),\n"%0a>         "matingScheme=RandomMating(ops=MendelianGenoTransmitter()),\n"%0a>         "gen=%25d)" %25 gen)%0a> print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,mating.timeit(number=1))%0a> %0a> =]%0a
host:1309281069=172.29.30.76
author:1309280694=
diff:1309280694:1309280684:=
host:1309280694=172.29.30.70
author:1309280684=
diff:1309280684:1309280558:=220d219%0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:estimatedSize.py | http://simupop.sourceforge.net/images/download.jpg]]|estimatedSize.py%0a257a257%0a> %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:estimatedSize.py | http://simupop.sourceforge.net/images/download.jpg]]|estimatedSize.py%0a\ No newline at end of file%0a
host:1309280684=172.29.30.70
author:1309280558=
diff:1309280558:1309280174:=255,257c255%0a%3c =]%0a%3c %0a%3c %25rfloat text-align=center margin-top=5px margin-right=25px margin-bottom=15px margin-left=25px %25 [[Attach:estimatedSize.py | http://simupop.sourceforge.net/images/download.jpg]]|estimatedSize.py%0a\ No newline at end of file%0a---%0a> =]%0a\ No newline at end of file%0a
host:1309280558=172.29.30.69
author:1309280174=
diff:1309280174:1309280169:=
host:1309280174=172.29.30.73
author:1309280169=
diff:1309280169:1309280060:=223c223%0a%3c alleleType='short'%0a---%0a> alleleType=short%0a236c236%0a%3c setOptions(alleleType = alleleType)%0a---%0a> setOptions(alleleType = arg)%0a240c240%0a%3c if alleleType == 'short':%0a---%0a> if arg == 'short':%0a242c242%0a%3c elif alleleType == 'long':%0a---%0a> elif arg == 'long':%0a244c244%0a%3c elif alleleType == 'binary':%0a---%0a> elif arg == 'binary':%0a
host:1309280169=172.29.30.73
author:1309280060=
diff:1309280060:1309279989:=
host:1309280060=172.29.30.68
author:1309279989=
diff:1309279989:1309279851:=253c253%0a%3c print "Maximum number of population size: %25d\nTime(sec):%25f" %25 (size,mating.timeit(number=1))%0a---%0a> print "AlleleType=%25s,Threads:%25d,Memsize:%25d Bytes,Gens:%25d,loci:%25d,ploidy:%25d,MaxPopSize:%25d,Time(sec):%25f" %25 (alleleType,numThreads,memsize*1024*1024*1024,gen,loci,ploidy,size,mating.timeit(number=1))%0a
host:1309279989=172.29.30.75
author:1309279851=
diff:1309279851:1309279515:=223d222%0a%3c alleleType=short%0a224a224%0a> gen = 10%0a226,228d225%0a%3c # Number of generation%0a%3c gen = 10%0a%3c # Memory Size (GB)%0a230d226%0a%3c # Number of processors%0a233d228%0a%3c %0a236,237c231,249%0a%3c setOptions(alleleType = arg)%0a%3c setOptions(numThreads = numThreads)%0a---%0a> for arg in sys.argv:%0a>     if arg in ['short', 'long', 'binary']:%0a>         setOptions(alleleType = arg)%0a>         alleleType = arg%0a>     elif arg.startswith('-j'):%0a>         numThreads= int(arg[2:])%0a>         setOptions(numThreads = numThreads)%0a>     elif '-memsize' == arg:%0a>         idx = sys.argv.index('-memsize')%0a>         memsize = float(sys.argv[idx+1])%0a>     elif '-loci' == arg:%0a>         idx = sys.argv.index('-loci')%0a>         loci = int(sys.argv[idx+1])%0a>     elif '-gen' == arg:%0a>         idx = sys.argv.index('-gen')%0a>         gen = int(sys.argv[idx+1])%0a>     elif '-ploidy' == arg:%0a>         idx = sys.argv.index('-ploidy')%0a>         ploidy = int(sys.argv[idx+1])%0a
host:1309279851=172.29.30.72
author:1309279515=
diff:1309279515:1309278647:=217,267c217%0a%3c We can see the execution time of simuPOP is very slow because we use too much memory, and operation system don't have enough space to run its system.%0a%3c %0a%3c The following is the python script used for estimated the maximum population size:%0a%3c =python [=%0a%3c import os, sys, timeit, time%0a%3c %0a%3c loci = 1000%0a%3c gen = 10%0a%3c ploidy=2%0a%3c memsize = 8%0a%3c numThreads=1%0a%3c %0a%3c from simuOpt import setOptions%0a%3c setOptions(quiet=True)%0a%3c for arg in sys.argv:%0a%3c     if arg in ['short', 'long', 'binary']:%0a%3c         setOptions(alleleType = arg)%0a%3c         alleleType = arg%0a%3c     elif arg.startswith('-j'):%0a%3c         numThreads= int(arg[2:])%0a%3c         setOptions(numThreads = numThreads)%0a%3c     elif '-memsize' == arg:%0a%3c         idx = sys.argv.index('-memsize')%0a%3c         memsize = float(sys.argv[idx+1])%0a%3c     elif '-loci' == arg:%0a%3c         idx = sys.argv.index('-loci')%0a%3c         loci = int(sys.argv[idx+1])%0a%3c     elif '-gen' == arg:%0a%3c         idx = sys.argv.index('-gen')%0a%3c         gen = int(sys.argv[idx+1])%0a%3c     elif '-ploidy' == arg:%0a%3c         idx = sys.argv.index('-ploidy')%0a%3c         ploidy = int(sys.argv[idx+1])%0a%3c from simuPOP import *%0a%3c %0a%3c if arg == 'short':%0a%3c     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*1.0 + 24.0)*2.0 + 8)%0a%3c elif arg == 'long':%0a%3c     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy*4.0 + 24.0)*2.0 + 8)%0a%3c elif arg == 'binary':%0a%3c     size = (memsize * 1024.0 * 1024.0 * 1024.0) / ((loci*ploidy/8.0 + 32.0)*2.0 + 8)%0a%3c mating = timeit.Timer(%0a%3c     setup = 'from __main__ import Population, InitSex, RandomMating, MendelianGenoTransmitter\n'%0a%3c         "pop = Population(size=%25d, loci=%25d, ploidy = %25d)" %25 (size, loci, ploidy),%0a%3c     stmt = "pop.evolve(\n"%0a%3c         "initOps=InitSex(),\n"%0a%3c         "matingScheme=RandomMating(ops=MendelianGenoTransmitter()),\n"%0a%3c         "gen=%25d)" %25 gen)%0a%3c print "AlleleType=%25s,Threads:%25d,Memsize:%25d Bytes,Gens:%25d,loci:%25d,ploidy:%25d,MaxPopSize:%25d,Time(sec):%25f" %25 (alleleType,numThreads,memsize*1024*1024*1024,gen,loci,ploidy,size,mating.timeit(number=1))%0a%3c %0a%3c =]%0a\ No newline at end of file%0a---%0a> We can see the execution time of simuPOP is very slow because we use too much memory, and operation system don't have enough space to run its system.%0a\ No newline at end of file%0a
host:1309279515=172.29.30.67
author:1309278647=
diff:1309278647:1309277839:=216,217d215%0a%3c %0a%3c We can see the execution time of simuPOP is very slow because we use too much memory, and operation system don't have enough space to run its system.%0a\ No newline at end of file%0a
host:1309278647=172.29.30.65
author:1309277839=
diff:1309277839:1309277593:=41c41%0a%3c Our system have 15.5 GB memory. We can't use all 15.5 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 15.5 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, 12, and 14 GB respectively as follows:%0a---%0a> Our system have 15.5 GB memory. We can't use all 15.5 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 15.5 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, and 12 GB respectively as follows:%0a
host:1309277839=172.29.30.65
author:1309277593=
diff:1309277593:1309276131:=203,204c203%0a%3c Finally, we run the experiment 15GB memory that almost equals to the memory size of our system as follows:%0a%3c %0a---%0a> Finally, we run the experiment with maximum population size in 15GB memory.%0a
host:1309277593=172.29.30.71
author:1309276131=
diff:1309276131:1309275990:=203,214c203%0a%3c Finally, we run the experiment with maximum population size in 15GB memory.%0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr colspan=4:)'''AlleleType'''=short, '''loci''' = 1000, '''ploidy'''= 2, '''gens'''=5%0a%3c (:cellnr:) '''Memory Size'''%0a%3c (:cell:)'''CPU Core'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cellnr:) 15GB%0a%3c (:cell:)4%0a%3c (:cell:)3,970,938%0a%3c (:cell:)31,581.11 (8.7 hours)%0a%3c (:tableend:)%0a---%0a> Finally, we run the experiment with maximum population size in 15GB memory.%0a\ No newline at end of file%0a
host:1309276131=172.29.30.76
author:1309275990=
diff:1309275990:1309274112:=34,42c34,42%0a%3c Next, we show the example of simuPOP experiment with basic random mating scheme. The technical hardware and environment specification used in the experiment is as follows:%0a%3c * Model Name: Intel(R) Core(TM) i7 CPU 870 @ 2.93GHz %0a%3c * Number of Processors: 8 %0a%3c * Memory: 15.5 GB (16,650,493,952 bytes) %0a%3c * Operation system: Red Hat Enterprise Linux Workstation Release 6.1 %0a%3c * Compiler: GNU compiler %0a%3c %0a%3c Our system have 15.5 GB memory. We can't use all 15.5 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 15.5 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, and 12 GB respectively as follows:%0a%3c %0a---%0a> Next, we show the example of simuPOP experiment with basic random mating scheme. The technical hardware and environment specification used in the experiment is as follows: \\%0a> * Model Name: Intel(R) Core(TM) i7 CPU 870 @ 2.93GHz \\%0a> * Number of Processors: 8 \\%0a> * Memory: 16 GB \\%0a> * Operation system: Red Hat Enterprise Linux Workstation Release 6.1 \\%0a> * Compiler: GNU compiler \\%0a> %0a> Our system have 16 GB memory. We can't use all 16 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 16 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, and 12 GB respectively as follows:%0a> %0a202,203d201%0a%3c %0a%3c Finally, we run the experiment with maximum population size in 15GB memory.%0a\ No newline at end of file%0a
host:1309275990=172.29.30.72
author:1309274112=
diff:1309274112:1309273027:=44,46c44,46%0a%3c (:cellnr colspan=8:) '''loci''' = 100, '''ploidy'''= 2, '''gens'''=10%0a%3c (:cellnr colspan=2:)''' AlleleType '''%0a%3c (:cell colspan=2:) ''short''%0a---%0a> (:cellnr colspan=2 rowspan=2:)%0a> (:cell colspan=6 align=center:) ''' AlleleType '''%0a> (:cellnr colspan=2:) ''short''%0a73c73%0a%3c (:cellnr rowspan=3 valign=center:)8GB%0a---%0a> (:cellnr rowspan=3:)8GB%0a75c75%0a%3c (:cell rowspan=3 valign=center:)18,837,575%0a---%0a> (:cell rowspan=3:)18,837,575%0a77c77%0a%3c (:cell rowspan=3 valign=center:)5,187,158%0a---%0a> (:cell rowspan=3:)5,187,158%0a79c79%0a%3c (:cell rowspan=3 valign=center:)70,409,299%0a---%0a> (:cell rowspan=3:)70,409,299%0a89c89%0a%3c (:cellnr rowspan=3 valign=center:)12GB%0a---%0a> (:cellnr rowspan=3:)12GB%0a91c91%0a%3c (:cell rowspan=3 valign=center:)28,256,363%0a---%0a> (:cell rowspan=3:)28,256,363%0a93c93%0a%3c (:cell rowspan=3 valign=center:)7,780,737%0a---%0a> (:cell rowspan=3:)7,780,737%0a95c95%0a%3c (:cell rowspan=3 valign=center:)105,613,949%0a---%0a> (:cell rowspan=3:)105,613,949%0a105c105%0a%3c (:cellnr rowspan=3 valign=center:)14GB%0a---%0a> (:cellnr rowspan=3:)14GB%0a107c107%0a%3c (:cell rowspan=3 valign=center:)%0a---%0a> (:cell rowspan=3:)%0a109c109%0a%3c (:cell rowspan=3 valign=center:)%0a---%0a> (:cell rowspan=3:)%0a111c111%0a%3c (:cell rowspan=3 valign=center:)%0a---%0a> (:cell rowspan=3:)%0a123,201d122%0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr colspan=8:) '''loci''' = 1000, '''ploidy'''= 2, '''gens'''=10%0a%3c (:cellnr colspan=2:)''' AlleleType '''%0a%3c (:cell colspan=2:) ''short''%0a%3c (:cell colspan=2:)''long''%0a%3c (:cell colspan=2:)''binary''%0a%3c (:cellnr:) '''Memory Size'''%0a%3c (:cell:)'''CPU Core'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cellnr rowspan=3 valign=center:)4GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)1,058,916%0a%3c (:cell:)12.58%0a%3c (:cell rowspan=3 valign=center:)267,499%0a%3c (:cell:)7.00%0a%3c (:cell rowspan=3 valign=center:)7,508,684%0a%3c (:cell:)61.48%0a%3c (:cellnr:)2%0a%3c (:cell:)8.26%0a%3c (:cell:)5.71%0a%3c (:cell:)35.36%0a%3c (:cellnr:)4%0a%3c (:cell:)6.68%0a%3c (:cell:)5.29%0a%3c (:cell:)22.18%0a%3c (:cellnr rowspan=3 valign=center:)8GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)2,117,833%0a%3c (:cell:)25.72%0a%3c (:cell rowspan=3 valign=center:)534,998%0a%3c (:cell:)13.95%0a%3c (:cell rowspan=3 valign=center:)15,017,368%0a%3c (:cell:)126.74%0a%3c (:cellnr:)2%0a%3c (:cell:)16.57%0a%3c (:cell:)11.33%0a%3c (:cell:)71.69%0a%3c (:cellnr:)4%0a%3c (:cell:)13.28%0a%3c (:cell:)10.61%0a%3c (:cell:)44.5%0a%3c (:cellnr rowspan=3 valign=center:)12GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)3,176,750%0a%3c (:cell:)38.77%0a%3c (:cell rowspan=3 valign=center:)802,497%0a%3c (:cell:)20.83%0a%3c (:cell rowspan=3 valign=center:)22,526,052%0a%3c (:cell:)185.14%0a%3c (:cellnr:)2%0a%3c (:cell:)24.22%0a%3c (:cell:)16.89%0a%3c (:cell:)107.90%0a%3c (:cellnr:)4%0a%3c (:cell:)19.91%0a%3c (:cell:)15.88%0a%3c (:cell:)67.08%0a%3c (:cellnr rowspan=3 valign=center:)14GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cell rowspan=3 valign=center:)%0a%3c (:cell:)%0a%3c (:cellnr:)2%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)4%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:tableend:)%0a
host:1309274112=172.29.30.72
author:1309273027=
diff:1309273027:1309272860:=41,42c41,42%0a%3c Our system have 16 GB memory. We can't use all 16 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 16 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, and 12 GB respectively as follows:%0a%3c %0a---%0a> Our system have 16 GB memory. We can't use all 16 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 16 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, and 12 GB respectively.%0a> %0a57c57%0a%3c (:cellnr rowspan=3 valign=center:)4GB%0a---%0a> (:cellnr rowspan=3:)4GB%0a59c59%0a%3c (:cell rowspan=3 valign=center:)9,418,787%0a---%0a> (:cell rowspan=3:)9,418,787%0a61c61%0a%3c (:cell rowspan=3 valign=center:)2,593,579%0a---%0a> (:cell rowspan=3:)2,593,579%0a63c63%0a%3c (:cell rowspan=3 valign=center:)35,204,649%0a---%0a> (:cell rowspan=3:)35,204,649%0a120a121%0a> %0a
host:1309273027=172.29.30.68
author:1309272860=
diff:1309272860:1309272824:=72a73%0a> %0a88a90%0a> %0a105c107,108%0a%3c (:cellnr rowspan=3:)14GB%0a---%0a> %0a> (:cellnr rowspan=3:)8GB%0a
host:1309272860=172.29.30.75
author:1309272824=
diff:1309272824:1309272819:=
host:1309272824=172.29.30.71
author:1309272819=
diff:1309272819:1309211878:=60c60%0a%3c (:cell:)72.48%0a---%0a> (:cell:)72%0a62c62%0a%3c (:cell:)23.45%0a---%0a> (:cell:)23%0a64c64,65%0a%3c (:cell:)266.22%0a---%0a> (:cell:)274%0a> %0a66,68c67,70%0a%3c (:cell:)41.78%0a%3c (:cell:)13.70%0a%3c (:cell:)152.5%0a---%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a> %0a70,110d71%0a%3c (:cell:)25.76%0a%3c (:cell:)9.16%0a%3c (:cell:)92.31%0a%3c %0a%3c (:cellnr rowspan=3:)8GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3:)18,837,575%0a%3c (:cell:)142.84%0a%3c (:cell rowspan=3:)5,187,158%0a%3c (:cell:)46.42%0a%3c (:cell rowspan=3:)70,409,299%0a%3c (:cell:)528.92%0a%3c (:cellnr:)2%0a%3c (:cell:)83.32%0a%3c (:cell:)27.88%0a%3c (:cell:)305.95%0a%3c (:cellnr:)4%0a%3c (:cell:)52.30%0a%3c (:cell:)18.48%0a%3c (:cell:)183.88%0a%3c %0a%3c (:cellnr rowspan=3:)12GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3:)28,256,363%0a%3c (:cell:)227.30%0a%3c (:cell rowspan=3:)7,780,737%0a%3c (:cell:)70.57%0a%3c (:cell rowspan=3:)105,613,949%0a%3c (:cell:)796.33%0a%3c (:cellnr:)2%0a%3c (:cell:)126.29%0a%3c (:cell:)41.86%0a%3c (:cell:)463.29%0a%3c (:cellnr:)4%0a%3c (:cell:)78.25%0a%3c (:cell:)27.67%0a%3c (:cell:)282.09%0a%3c %0a%3c (:cellnr rowspan=3:)8GB%0a%3c (:cell:)1%0a%3c (:cell rowspan=3:)%0a112d72%0a%3c (:cell rowspan=3:)%0a114d73%0a%3c (:cell rowspan=3:)%0a116,124d74%0a%3c (:cellnr:)2%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)4%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c %0a
host:1309272819=172.29.30.73
author:1309211878=
diff:1309211878:1309211802:=59c59%0a%3c (:cell rowspan=3:)9,418,787%0a---%0a> (:cell rowspan=3:)9418787%0a61c61%0a%3c (:cell rowspan=3:)2,593,579%0a---%0a> (:cell rowspan=3:)2593579%0a63c63%0a%3c (:cell rowspan=3:)35,204,649%0a---%0a> (:cell rowspan=3:)35204649%0a
host:1309211878=172.29.30.74
author:1309211802=
diff:1309211802:1309211673:=59,64c59,64%0a%3c (:cell rowspan=3:)9418787%0a%3c (:cell:)72%0a%3c (:cell rowspan=3:)2593579%0a%3c (:cell:)23%0a%3c (:cell rowspan=3:)35204649%0a%3c (:cell:)274%0a---%0a> (:cell rowspan=3:)%0a> (:cell:)%0a> (:cell rowspan=3:)%0a> (:cell:)%0a> (:cell rowspan=3:)%0a> (:cell:)%0a
host:1309211802=172.29.30.76
author:1309211673=
diff:1309211673:1309211574:=59d58%0a%3c (:cell rowspan=3:)%0a61d59%0a%3c (:cell rowspan=3:)%0a63d60%0a%3c (:cell rowspan=3:)%0a65,66d61%0a%3c %0a%3c (:cellnr:)2%0a71c66,77%0a%3c (:cellnr:)4%0a---%0a> (:cellnr:)2%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a> %0a> (:cellnr:)4%0a> (:cell:)%0a> (:cell:)%0a> (:cell:)%0a
host:1309211673=172.29.30.69
author:1309211574=
diff:1309211574:1309211467:=57c57%0a%3c (:cellnr rowspan=3:)4GB%0a---%0a> (:cellnr:)4GB%0a65,66c65,66%0a%3c %0a%3c (:cellnr:)2%0a---%0a> (:cellnr:)4GB%0a> (:cell:)2%0a73,74c73,74%0a%3c %0a%3c (:cellnr:)4%0a---%0a> (:cellnr:)4GB%0a> (:cell:)4%0a
host:1309211574=172.29.30.66
author:1309211467=
diff:1309211467:1309206968:=44,57c44,50%0a%3c (:cellnr colspan=2 rowspan=2:)%0a%3c (:cell colspan=6 align=center:) ''' AlleleType '''%0a%3c (:cellnr colspan=2:) ''short''%0a%3c (:cell colspan=2:)''long''%0a%3c (:cell colspan=2:)''binary''%0a%3c (:cellnr:) '''Memory Size'''%0a%3c (:cell:)'''CPU Core'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Population'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cellnr:)4GB%0a---%0a> (:cellnr:) '''AlleleType'''%0a> (:cell:) '''MemSize(GB)'''%0a> (:cell:) '''Processor#'''%0a> (:cell:)'''Max Population size'''%0a> (:cell:)'''Execution time(sec)'''%0a> (:cellnr:)short%0a> (:cell:)4%0a60a54,56%0a> (:cellnr:)long%0a> (:cell:)4%0a> (:cell:)1%0a62a59,61%0a> (:cellnr:)binary%0a> (:cell:)4%0a> (:cell:)1%0a64a64,80%0a> (:tableend:)%0a> %0a> (:table border=1 cellpadding=5 cellspacing=0:)%0a> (:cellnr:) '''Mem Size (GB)'''%0a> (:cell:)'''CPU Core'''%0a> (:cell colspan=6 align=center:) ''' AlleleType '''%0a> (:cellnr colspan=2 rowspan=2:)%0a> (:cell colspan=2:) ''short''%0a> (:cell colspan=2:)''long''%0a> (:cell colspan=2:)''binary''%0a> %0a> (:cellnr:)'''Max Population size'''%0a> (:cell:)'''time (sec)'''%0a> (:cell:)'''Max Population size'''%0a> (:cell:)'''time (sec)'''%0a> (:cell:)'''Max Population size'''%0a> (:cell:)'''time (sec)'''%0a66c82%0a%3c (:cell:)2%0a---%0a> (:cell:)1%0a73,80c89,90%0a%3c (:cellnr:)4GB%0a%3c (:cell:)4%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cell:)%0a---%0a> %0a> %0a
host:1309211467=172.29.30.72
author:1309206968=
diff:1309206968:1309205281:=67,76c67,69%0a%3c (:cellnr:) '''Mem Size (GB)'''%0a%3c (:cell:)'''CPU Core'''%0a%3c (:cell colspan=6 align=center:) ''' AlleleType '''%0a%3c (:cellnr colspan=2 rowspan=2:)%0a%3c (:cell colspan=2:) ''short''%0a%3c (:cell colspan=2:)''long''%0a%3c (:cell colspan=2:)''binary''%0a%3c %0a%3c (:cellnr:)'''Max Population size'''%0a%3c (:cell:)'''time (sec)'''%0a---%0a> (:cellnr:) '''AlleleType'''%0a> (:cell:) '''MemSize(GB)'''%0a> (:cell:) '''Processor#'''%0a78,81c71,73%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cell:)'''Max Population size'''%0a%3c (:cell:)'''time (sec)'''%0a%3c (:cellnr:)4GB%0a---%0a> (:cell:)'''Execution time(sec)'''%0a> (:cellnr:)short%0a> (:cell:)4%0a84a77,79%0a> (:cellnr:)long%0a> (:cell:)4%0a> (:cell:)1%0a86a82,84%0a> (:cellnr:)binary%0a> (:cell:)4%0a> (:cell:)1%0a89,90d86%0a%3c %0a%3c %0a
host:1309206968=172.29.30.69
author:1309205281=
diff:1309205281:1309204516:=44,48c44,47%0a%3c (:cellnr:) '''AlleleType'''%0a%3c (:cell:) '''MemSize(GB)'''%0a%3c (:cell:) '''Processor#'''%0a%3c (:cell:)'''Max Population size'''%0a%3c (:cell:)'''Execution time(sec)'''%0a---%0a> (:cellnr:) '''Memory Size (GB)'''%0a> (:cell:) '''Number of Processors (Thread)'''%0a> (:cell:)'''Maximum Population size'''%0a> (:cell:)'''Execution time'''%0a50,86c49,51%0a%3c (:cell:)4%0a%3c (:cell:)1%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)long%0a%3c (:cell:)4%0a%3c (:cell:)1%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)binary%0a%3c (:cell:)4%0a%3c (:cell:)1%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:tableend:)%0a%3c %0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr:) '''AlleleType'''%0a%3c (:cell:) '''MemSize(GB)'''%0a%3c (:cell:) '''Processor#'''%0a%3c (:cell:)'''Max Population size'''%0a%3c (:cell:)'''Execution time(sec)'''%0a%3c (:cellnr:)short%0a%3c (:cell:)4%0a%3c (:cell:)1%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)long%0a%3c (:cell:)4%0a%3c (:cell:)1%0a%3c (:cell:)%0a%3c (:cell:)%0a%3c (:cellnr:)binary%0a%3c (:cell:)4%0a%3c (:cell:)1%0a%3c (:cell:)%0a%3c (:cell:)%0a---%0a> (:cell:) 1%0a> (:cell:)100%0a> (:cell:)10%0a
host:1309205281=172.29.30.71
author:1309204516=
diff:1309204516:1309203063:=42,52d41%0a%3c %0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr:) '''Memory Size (GB)'''%0a%3c (:cell:) '''Number of Processors (Thread)'''%0a%3c (:cell:)'''Maximum Population size'''%0a%3c (:cell:)'''Execution time'''%0a%3c (:cellnr:)short%0a%3c (:cell:) 1%0a%3c (:cell:)100%0a%3c (:cell:)10%0a%3c (:tableend:)%0a
host:1309204516=172.29.30.73
author:1309203063=
diff:1309203063:1309201878:=41c41%0a%3c Our system have 16 GB memory. We can't use all 16 GB to run simuPOP, because we have to leave some space of memory for operation system. If we don't leave the memory for the operation system or allocated memory more the 16 GB, the operation system will map the memory to disk (virtual memory) causing the simuPOP run extremely slow. In the experiment we show the maximum population in the memory size 4, 8, and 12 GB respectively.%0a---%0a> %0a
host:1309203063=172.29.30.71
author:1309201878=
diff:1309201878:1309201844:=35,39c35,39%0a%3c * Model Name: Intel(R) Core(TM) i7 CPU 870 @ 2.93GHz \\%0a%3c * Number of Processors: 8 \\%0a%3c * Memory: 16 GB \\%0a%3c * Operation system: Red Hat Enterprise Linux Workstation Release 6.1 \\%0a%3c * Compiler: GNU compiler \\%0a---%0a> Model Name: Intel(R) Core(TM) i7 CPU 870 @ 2.93GHz%0a> Number of Processors: 8%0a> Memory: 16 GB%0a> Operation system: Red Hat Enterprise Linux Workstation Release 6.1%0a> Compiler: GNU compiler%0a
host:1309201878=172.29.30.67
author:1309201844=
diff:1309201844:1309195689:=19c19%0a%3c (:cell:) = 2 * Population + internal index%0a---%0a> (:cell:) = 2 * Population + internal index \\%0a23c23%0a%3c (:cell:) = 2 * Population + internal index%0a---%0a> (:cell:) = 2 * Population + internal index \\ %0a27c27%0a%3c (:cell:) = 2 * Population + internal index%0a---%0a> (:cell:) = 2 * Population + internal index \\%0a31,41d30%0a%3c %0a%3c The number two multiplies Population because there are two populations. The first population is the actual population, and second population is temporary population that is used to generate next generation of population. %0a%3c %0a%3c Next, we show the example of simuPOP experiment with basic random mating scheme. The technical hardware and environment specification used in the experiment is as follows: \\%0a%3c Model Name: Intel(R) Core(TM) i7 CPU 870 @ 2.93GHz%0a%3c Number of Processors: 8%0a%3c Memory: 16 GB%0a%3c Operation system: Red Hat Enterprise Linux Workstation Release 6.1%0a%3c Compiler: GNU compiler%0a%3c %0a%3c %0a
host:1309201844=172.29.30.67
author:1309195689=
diff:1309195689:1309195572:=19,20c19,20%0a%3c (:cell:) = 2 * Population + internal index \\%0a%3c = 2 * (genotypic information + individuals) + internal index \\%0a---%0a> (:cell:) = 2 * Population + internal index %0a> = 2 * (genotypic information + individuals) + internal index%0a23,24c23,24%0a%3c (:cell:) = 2 * Population + internal index \\ %0a%3c = 2 * (genotypic information + individuals) + internal index \\%0a---%0a> (:cell:) = 2 * Population + internal index %0a> = 2 * (genotypic information + individuals) + internal index%0a27,28c27,28%0a%3c (:cell:) = 2 * Population + internal index \\%0a%3c = 2 * (genotypic information + individuals) + internal index \\%0a---%0a> (:cell:) = 2 * Population + internal index%0a> = 2 * (genotypic information + individuals) + internal index%0a
host:1309195689=172.29.30.65
author:1309195572=
diff:1309195572:1309195310:=19,20c19%0a%3c (:cell:) = 2 * Population + internal index %0a%3c = 2 * (genotypic information + individuals) + internal index%0a---%0a> (:cell:) = 2 * (genotypic information + individuals) + internal index%0a23,24c22%0a%3c (:cell:) = 2 * Population + internal index %0a%3c = 2 * (genotypic information + individuals) + internal index%0a---%0a> (:cell:) = 2 * (genotypic information + individuals) + internal index%0a27,28c25%0a%3c (:cell:) = 2 * Population + internal index%0a%3c = 2 * (genotypic information + individuals) + internal index%0a---%0a> (:cell:) = 2 * (genotypic information + individuals) + internal index%0a
host:1309195572=172.29.30.76
author:1309195310=
diff:1309195310:1309195216:=19,20c19,20%0a%3c (:cell:) = 2 * (genotypic information + individuals) + internal index%0a%3c = 2 * ( (PopSize * loci * ploidy * 1) + (PopSize * 24) ) + PopSize * 8%0a---%0a> (:cell:) 2 * (genotypic information + individuals) + internal index:%0a> 2 * ( (PopSize * loci * ploidy * 1) + (PopSize * 24) ) + PopSize * 8%0a22,23c22,23%0a%3c (:cell:) = 2 * (genotypic information + individuals) + internal index%0a%3c = 2 * ( (PopSize * loci * ploidy * 4) + (PopSize * 24) ) + PopSize * 8%0a---%0a> (:cell:) 2 * (genotypic information + individuals) + internal index:%0a> 2 * ( (PopSize * loci * ploidy * 4) + (PopSize * 24) ) + PopSize * 8%0a25,26c25,26%0a%3c (:cell:) = 2 * (genotypic information + individuals) + internal index%0a%3c = 2 * ( (PopSize * loci * ploidy / 8) + (PopSize * 32) ) + PopSize * 8%0a---%0a> (:cell:) 2 * (genotypic information + individuals) + internal index:%0a> 2 * ( (PopSize * loci * ploidy / 8) + (PopSize * 32) ) + PopSize * 8%0a
host:1309195310=172.29.30.75
author:1309195216=
diff:1309195216:1309194683:=19,20c19%0a%3c (:cell:) 2 * (genotypic information + individuals) + internal index:%0a%3c 2 * ( (PopSize * loci * ploidy * 1) + (PopSize * 24) ) + PopSize * 8%0a---%0a> (:cell:) abc%0a22,23c21%0a%3c (:cell:) 2 * (genotypic information + individuals) + internal index:%0a%3c 2 * ( (PopSize * loci * ploidy * 4) + (PopSize * 24) ) + PopSize * 8%0a---%0a> (:cell:)Done%0a25,26c23%0a%3c (:cell:) 2 * (genotypic information + individuals) + internal index:%0a%3c 2 * ( (PopSize * loci * ploidy / 8) + (PopSize * 32) ) + PopSize * 8%0a---%0a> (:cell:)Not parallelizable(base transmitter does not need to be parallelized)%0a
host:1309195216=172.29.30.70
author:1309194683=
diff:1309194683:1309194662:=17c17%0a%3c (:cell:) '''Memory allocated (bytes)'''%0a---%0a> (:cell:) '''Memory allocated'''%0a
host:1309194683=172.29.30.70
author:1309194662=
diff:1309194662:1309194280:=13,14c13,14%0a%3c The maximum population size of simuPOP depends on the memory size of a computer, and The speed of the simuPOP depends on the CPU speed and the number of cores. The higher specification you have, the more scalability of simuPOP. In the simuPOP, when we create population, the most of memory will be allocated in pool of genotypic information, and individuals in the population. In addition, there are three type of allele in genotypic information and individuals: short, long, binary. Each types is allocated memory in the different size. In the random mating, there is internal index allocated the memory. The following table is the maximum estimated size of population in the random mating scheme.%0a%3c %0a---%0a> The maximum population size of simuPOP depends on the memory size of a computer, and The speed of the simuPOP depends on the CPU speed and the number of cores. The higher specification you have, the more scalability of simuPOP. In the simuPOP, when we create population, the most of memory will be allocated in pool of genotypic information, and individuals in the population. In addition, there are three type of genotypic information and individuals: short, long, binary. Each types is allocated memory in the different size. In the random mating, there is internal index allocated the memory. The following table is the maximum estimated size of population in the random mating scheme.%0a> %0a16,20c16,17%0a%3c (:cellnr:) '''Allele Type'''%0a%3c (:cell:) '''Memory allocated'''%0a%3c (:cellnr:)short%0a%3c (:cell:) abc%0a%3c (:cellnr:)long%0a---%0a> (:cellnr colspan=2:) '''Genotype transmitters'''%0a> (:cellnr:)MendelianGenoTransmitter%0a22c19,21%0a%3c (:cellnr:)binary%0a---%0a> (:cellnr:)CloneGenoTransmitter%0a> (:cell:)Done%0a> (:cellnr:)GenoTransmitter%0a23a23,26%0a> (:cellnr:)SelfingGenoTransmitter%0a> (:cell:)Done%0a> (:cellnr:)HaplodiploidGenoTransmitter%0a> (:cell:)Done%0a
host:1309194662=172.29.30.70
author:1309194280=
diff:1309194280:1309192661:=14,27d13%0a%3c %0a%3c (:table border=1 cellpadding=5 cellspacing=0:)%0a%3c (:cellnr colspan=2:) '''Genotype transmitters'''%0a%3c (:cellnr:)MendelianGenoTransmitter%0a%3c (:cell:)Done%0a%3c (:cellnr:)CloneGenoTransmitter%0a%3c (:cell:)Done%0a%3c (:cellnr:)GenoTransmitter%0a%3c (:cell:)Not parallelizable(base transmitter does not need to be parallelized)%0a%3c (:cellnr:)SelfingGenoTransmitter%0a%3c (:cell:)Done%0a%3c (:cellnr:)HaplodiploidGenoTransmitter%0a%3c (:cell:)Done%0a%3c (:tableend:)%0a
host:1309194280=172.29.30.72
author:1309192661=
diff:1309192661:1295319258:=9,14c9%0a%3c Script [[ Cookbook/caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions. Please refer to Peng et al, Human Genetics, 2010 for details.%0a%3c %0a%3c !! Scalability of simuPOP %0a%3c %0a%3c The maximum population size of simuPOP depends on the memory size of a computer, and The speed of the simuPOP depends on the CPU speed and the number of cores. The higher specification you have, the more scalability of simuPOP. In the simuPOP, when we create population, the most of memory will be allocated in pool of genotypic information, and individuals in the population. In addition, there are three type of genotypic information and individuals: short, long, binary. Each types is allocated memory in the different size. In the random mating, there is internal index allocated the memory. The following table is the maximum estimated size of population in the random mating scheme.%0a%3c %0a---%0a> Script [[ Cookbook/caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions. Please refer to Peng et al, Human Genetics, 2010 for details.%0a\ No newline at end of file%0a
host:1309192661=172.29.30.75
author:1295319258=
diff:1295319258:1270419615:=2,5d1%0a%3c %0a%3c !! Performance tricks%0a%3c %0a%3c * [[Cookbook/Performance]] This page lists some tricks that can make your script runs faster.%0a
host:1295319258=127.0.0.1
author:1270419615=
diff:1270419615:1262470191:=3,5c3,5%0a%3c !! A power calculator for case control association studies with known family histories%0a%3c %0a%3c Script [[ Cookbook/caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions. Please refer to Peng et al, Human Genetics, 2010 for details.%0a\ No newline at end of file%0a---%0a> !! A power calculator for case control association studies with known family history or cases and/or controls.%0a> %0a> Script [[ Cookbook/caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions.%0a\ No newline at end of file%0a
host:1270419615=127.0.0.1
author:1262470191=
diff:1262470191:1261000246:=5c5%0a%3c Script [[ Cookbook/caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions.%0a\ No newline at end of file%0a---%0a> Script [[ caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions.%0a\ No newline at end of file%0a
host:1262470191=127.0.0.1
author:1261000246=
diff:1261000246:1261000141:=3,5c3%0a%3c !! A power calculator for case control association studies with known family history or cases and/or controls.%0a%3c %0a%3c Script [[ caseControlPower | caseControlPower.py]] calculates statistical power of case control association studies with known family histories. It makes use of simuPOP's simuOpt module for its graphical user interface and simuPOP.gsl module for probability functions.%0a\ No newline at end of file%0a---%0a> !! A power calculator for case control association studies with known family history or cases and/or controls. [[ caseControlPower | caseControlPower.py]]%0a\ No newline at end of file%0a
host:1261000246=127.0.0.1
author:1261000141=
diff:1261000141:1260998504:=3c3%0a%3c !! A power calculator for case control association studies with known family history or cases and/or controls. [[ caseControlPower | caseControlPower.py]]%0a\ No newline at end of file%0a---%0a> !! A power calculator%0a\ No newline at end of file%0a
host:1261000141=127.0.0.1
author:1260998504=
diff:1260998504:1260998504:=1,3d0%0a%3c (:title Miscellaneous topics:)%0a%3c %0a%3c !! A power calculator%0a\ No newline at end of file%0a
host:1260998504=127.0.0.1
