version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.6) Gecko/2009011913 Firefox/3.0.6
author=
csum=
ctime=1232232138
host=127.0.0.1
name=Main.BasicConcepts
rev=10
targets=
text=!!An overview of simuPOP concepts%0a%0aA simuPOP '''population''' consists of individuals of the same '''genotype structure''', which include properties such as number of homologous sets of chromosomes (ploidy), number of chromosomes, and names and locations of markers on each chromosome. Individuals can be divided into subpopulations that can be further divided into virtual subpopulations according to individual properties such as sex, affection status, or arbitrary auxiliary information such as age.%0a%0a%0a'''Operators''' are Python objects that act on a population. They can be applied to a population before or after mating during a life cycle of an evolutionary process (Figure [fig:life-cycle]), or to one or two parents during the production of each offspring. Arbitrary numbers of operators can be applied to an evolving population.%0a%0aA simuPOP '''mating scheme''' is responsible for choosing parent or parents from a parental (virtual) subpopulation and for populating an offspring subpopulation. simuPOP provides a number of pre-defined mating schemes, such as random, consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid mating in hymenoptera. More complicated nonrandom mating schemes such as mating in age-structured populations can be constructed using '''heterogeneous mating schemes'''. %0a%0asimuPOP evolves a population generation by generation, following the evolutionary cycle depicted in here:%0a%0a%25lfloat width=720%25 http://simupop.sourceforge.net/images/evolve.png%0a%0aBriefly speaking, a number of '''pre-mating operators''' such as a ''mutator'' are applied to a population before a mating scheme repeatedly chooses a parent or parents to produce offspring. '''During-mating operators''' such as ''recombinator'' can be used to adjust how offspring genotypes are formed from parental genotypes. After an offspring population is populated, post-mating operators can be applied, for example, to calculate population statistics. The offspring population will then become the parental population of the next evolutionary cycle.%0a%0a!! A simple example:%0a%0a=python [=%0a>>> from simuPOP import *%0a>>> pop = population(size=1000, loci=[2])%0a>>> simu = simulator(pop, randomMating(), rep=3)%0a>>> simu.evolve(%0a...     preOps = [initByValue([1, 2, 2, 1])],  %0a...     ops = [%0a...         recombinator(rate=0.01),%0a...         stat(LD=[0, 1]),%0a...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a...         pyOutput('\n', rep=-1, step=10)%0a...     ],%0a...     gen=100%0a... )%0a0.24	0.25	0.24	%0a0.21	0.23	0.22	%0a0.17	0.21	0.20	%0a0.13	0.17	0.18	%0a0.10	0.15	0.18	%0a0.11	0.14	0.16	%0a0.12	0.10	0.16	%0a0.11	0.11	0.15	%0a0.09	0.10	0.14	%0a0.07	0.10	0.11	%0a(100, 100, 100)%0a>>>%0a=]%0a%0a%0aThis example simulates a standard diploid Wright-Fisher model with recombination. %0a* The first line imports the standard simuPOP module.%0a* The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci.%0a* The third line creates a simulator with three replicates of this population. Random mating will be used to generate offspring.%0a* The last statement uses the '''evolve()''' function to evolve the populations for 100 generations, subject to five ''operators''.%0a%0aThe first operator '''initByValue''' is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. '''recombinator''' is a during-mating operator that recombines parental chromosomes with the given recombination rate 0.01 during the generation of offspring; stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators '''pyEval''' and '''pyOutput''' are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate.%0a%0aThe result of this example is a table of three columns, representing the decay of linkage disequilibrium of each replicate at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a%0a
time=1235573987
author:1235573987=
diff:1235573987:1232413214:=25c25%0a%3c ...         recombinator(rate=0.01),%0a---%0a> ...         recombinator(rate=0.01)%25newwin%25 ,%0a
host:1235573987=127.0.0.1
author:1232413214=
diff:1232413214:1232413071:=13c13,14%0a%3c %0a---%0a> %25lfloat width=720%25 Attach:evolve.png%0a> %0a
host:1232413214=127.0.0.1
author:1232413071=
diff:1232413071:1232342646:=13,14c13%0a%3c %25lfloat width=720%25 Attach:evolve.png%0a%3c %0a---%0a> %0a
host:1232413071=127.0.0.1
author:1232342646=
diff:1232342646:1232342631:=12,13c12,13%0a%3c %25lfloat width=720%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=800%25 http://simupop.sourceforge.net/images/evolve.png%0a> %0a
host:1232342646=127.0.0.1
author:1232342631=
diff:1232342631:1232333849:=12,13c12,13%0a%3c %25lfloat width=800%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a> %0a
host:1232342631=127.0.0.1
author:1232333849=
diff:1232333849:1232333818:=12,13c12,13%0a%3c %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 Attach:evolve.png%0a> %0a
host:1232333849=127.0.0.1
author:1232333818=
diff:1232333818:1232333549:=
host:1232333818=127.0.0.1
author:1232333549=
diff:1232333549:1232262674:=12,13c12,13%0a%3c %25lfloat width=600%25 Attach:evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a> %0a
host:1232333549=127.0.0.1
author:1232262674=
diff:1232262674:1232232138:=12,13c12,13%0a%3c %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 Attach:evolve.png%0a> %0a
host:1232262674=127.0.0.1
author:1232232138=
diff:1232232138:1232232138:=1,56d0%0a%3c !!An overview of simuPOP concepts%0a%3c %0a%3c A simuPOP '''population''' consists of individuals of the same '''genotype structure''', which include properties such as number of homologous sets of chromosomes (ploidy), number of chromosomes, and names and locations of markers on each chromosome. Individuals can be divided into subpopulations that can be further divided into virtual subpopulations according to individual properties such as sex, affection status, or arbitrary auxiliary information such as age.%0a%3c %0a%3c %0a%3c '''Operators''' are Python objects that act on a population. They can be applied to a population before or after mating during a life cycle of an evolutionary process (Figure [fig:life-cycle]), or to one or two parents during the production of each offspring. Arbitrary numbers of operators can be applied to an evolving population.%0a%3c %0a%3c A simuPOP '''mating scheme''' is responsible for choosing parent or parents from a parental (virtual) subpopulation and for populating an offspring subpopulation. simuPOP provides a number of pre-defined mating schemes, such as random, consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid mating in hymenoptera. More complicated nonrandom mating schemes such as mating in age-structured populations can be constructed using '''heterogeneous mating schemes'''. %0a%3c %0a%3c simuPOP evolves a population generation by generation, following the evolutionary cycle depicted in here:%0a%3c %0a%3c %25lfloat width=600%25 Attach:evolve.png%0a%3c %0a%3c Briefly speaking, a number of '''pre-mating operators''' such as a ''mutator'' are applied to a population before a mating scheme repeatedly chooses a parent or parents to produce offspring. '''During-mating operators''' such as ''recombinator'' can be used to adjust how offspring genotypes are formed from parental genotypes. After an offspring population is populated, post-mating operators can be applied, for example, to calculate population statistics. The offspring population will then become the parental population of the next evolutionary cycle.%0a%3c %0a%3c !! A simple example:%0a%3c %0a%3c =python [=%0a%3c >>> from simuPOP import *%0a%3c >>> pop = population(size=1000, loci=[2])%0a%3c >>> simu = simulator(pop, randomMating(), rep=3)%0a%3c >>> simu.evolve(%0a%3c ...     preOps = [initByValue([1, 2, 2, 1])],  %0a%3c ...     ops = [%0a%3c ...         recombinator(rate=0.01)%25newwin%25 ,%0a%3c ...         stat(LD=[0, 1]),%0a%3c ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a%3c ...         pyOutput('\n', rep=-1, step=10)%0a%3c ...     ],%0a%3c ...     gen=100%0a%3c ... )%0a%3c 0.24	0.25	0.24	%0a%3c 0.21	0.23	0.22	%0a%3c 0.17	0.21	0.20	%0a%3c 0.13	0.17	0.18	%0a%3c 0.10	0.15	0.18	%0a%3c 0.11	0.14	0.16	%0a%3c 0.12	0.10	0.16	%0a%3c 0.11	0.11	0.15	%0a%3c 0.09	0.10	0.14	%0a%3c 0.07	0.10	0.11	%0a%3c (100, 100, 100)%0a%3c >>>%0a%3c =]%0a%3c %0a%3c %0a%3c This example simulates a standard diploid Wright-Fisher model with recombination. %0a%3c * The first line imports the standard simuPOP module.%0a%3c * The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci.%0a%3c * The third line creates a simulator with three replicates of this population. Random mating will be used to generate offspring.%0a%3c * The last statement uses the '''evolve()''' function to evolve the populations for 100 generations, subject to five ''operators''.%0a%3c %0a%3c The first operator '''initByValue''' is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. '''recombinator''' is a during-mating operator that recombines parental chromosomes with the given recombination rate 0.01 during the generation of offspring; stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators '''pyEval''' and '''pyOutput''' are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate.%0a%3c %0a%3c The result of this example is a table of three columns, representing the decay of linkage disequilibrium of each replicate at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a%3c %0a
host:1232232138=127.0.0.1
