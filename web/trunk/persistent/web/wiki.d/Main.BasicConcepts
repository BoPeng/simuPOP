version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729)
author=
csum=
ctime=1232232138
host=127.0.0.1
name=Main.BasicConcepts
rev=25
targets=Main.MailingList
text=(:title An introduction to basic simuPOP concepts:)%0a!! Introduction%0a%0asimuPOP is a '''general-purpose forward-time population genetics simulation environment'''. It is%0a%0a* A '''population genetics simulation''' program: simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a ''non-overlap generation'' model, aged structured populations can be mimicked using special non-random mating schemes.%0a%0a* '''Forward-time''':  Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically  which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a%0a* '''General-purpose''': Many population genetics simulation programs are available. However, they are all designed for specific types of evolutionary scenarios and are limited in their ability to simulate complex evolutionary processes. ''simuPOP'' is the only general-purpose simulation program that is capable of simulation arbitrarily complex evolutionary scenarios. As a matter of fact, using a large number of functions, simuPOP can be a powerful tool to manipulate and analyze genetic data.%0a%0a* A '''simulation environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%0a%0a!!An overview of simuPOP concepts%0a%0aA simuPOP '''population''' consists of individuals of the same '''genotype structure''', which include properties such as number of homologous sets of chromosomes (ploidy), number of chromosomes, and names and locations of markers on each chromosome. Individuals can be divided into subpopulations that can be further divided into virtual subpopulations according to individual properties such as sex, affection status, or arbitrary auxiliary information such as age.%0a%0a%0a'''Operators''' are Python objects that act on a population. They can be applied to a population before or after mating during a life cycle of an evolutionary process (Figure [fig:life-cycle]), or to one or two parents during the production of each offspring. Arbitrary numbers of operators can be applied to an evolving population.%0a%0aA simuPOP '''mating scheme''' is responsible for choosing parent or parents from a parental (virtual) subpopulation and for populating an offspring subpopulation. simuPOP provides a number of pre-defined mating schemes, such as random, consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid mating in hymenoptera. More complicated nonrandom mating schemes such as mating in age-structured populations can be constructed using '''heterogeneous mating schemes'''. %0a%0asimuPOP evolves a population generation by generation, following the evolutionary cycle depicted in here:%0a%0a%25lfloat width=720%25 http://simupop.sourceforge.net/images/evolve.png%0a%0aBriefly speaking, a number of '''pre-mating operators''' such as a ''mutator'' are applied to a population before a mating scheme repeatedly chooses a parent or parents to produce offspring. '''During-mating operators''' such as ''recombinator'' can be used to adjust how offspring genotypes are formed from parental genotypes. After an offspring population is populated, post-mating operators can be applied, for example, to calculate population statistics. The offspring population will then become the parental population of the next evolutionary cycle.%0a%0a!! A simple example:%0a%0a=python [=%0a>>> from simuPOP import *%0a>>> pop = population(size=1000, loci=[2]))%0a>>> pop.evolve(%0a...     initOps = [%0a...         initSex(),%0a...         initGenotype(genotype=[1, 2, 2, 1])],  %0a...     matingScheme=randomMating(ops=recombinator(rates=0.01)),%0a...     postOps = [%0a...         stat(LD=[0, 1]),%0a...         pyEval(r"'%25.2f\n' %25 LD[0][1]", step=10),%0a...     ],%0a...     gen=100%0a... )%0a0.24%0a0.21%0a0.17%0a0.13%0a0.10%0a0.11%0a0.12%0a0.11%0a0.09%0a0.07%0a(100,)%0a>>>%0a=]%0a%0a%0aThis example simulates a standard diploid Wright-Fisher model with recombination. %0a* The first line imports the standard simuPOP module.%0a* The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci.%0a* The last statement uses the '''evolve()''' function to evolve the populations for 100 generations, subject to four ''operators''. It uses a random mating scheme. However, instead of a standard Mendelian genotype transmitter, this script uses a recombinator (a during-mating operator) to recombine parental chromosomes to form offspring genotype.%0a%0aThe first two operators are applied to the population before evolution. Operator '''initSex''' initializes sex of individuals randomly and operator '''initByValue''' initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. Operator '''stat''' calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of the population. The last operator '''pyEval''' is applied at the end of every 10 generations to output calculated linkage disequilibrium values with a trailing newline.%0a%0aThe result of this example is a list of linkage disequilibrium values, representing the decay of linkage disequilibrium of this population at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a%0a!!Is simuPOP the right tool for you?%0a%0aThere are quite a number of population genetics simulation programs that have been created for various purposes. If one of them happens to fit your need, it may be easier to use (at least you do not need to write a script) or has better performance. Here is a few links for such programs:%0a* [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]]%0a* [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]]%0a* [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]]%0a* [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]]%0a* [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]]%0a* [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]]%0a* [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]]%0a* [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]%0a* [[http://sfscode.sourceforge.net | SFS_CODE]]%0aPlease note that these links are not actively maintained so some of them might not work.%0a%0aIf you cannot find a program that fits your need, you might want to browse this website and the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]] and get some idea how simuPOP works. It might be a good idea to send an email to the simuPOP [[Main/MailingList]], describing the kind of simulation you would like to perform. Some simuPOP users might have run similar simulations and are able to provide useful information on how to implement your simulation with simuPOP.%0a%0a%0a!! How to cite simuPOP%0a%0aIf you use simuPOP for your research, please cite it using:%0a%0a->Bo Peng and Marek Kimmal (2005) '''simuPOP: a forward-time population genetics simulation environment'''. ''bioinformatics'', 21(18): 3686-3687. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a%0aand optionally (if nonrandom mating is used)%0a%0a->Bo Peng and Christopher Amos (2008) '''Forward-time simulations of nonrandom mating populations using simuPOP'''. ''bioinformatics'', 24 (11): 1408-1409. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/24/11/1408 | Link]])%0a
time=1262662257
title=An introduction to basic simuPOP concepts
author:1262662257=
diff:1262662257:1262467850:=38c38%0a%3c ...         initGenotype(genotype=[1, 2, 2, 1])],  %0a---%0a> ...         initByValue([1, 2, 2, 1])],  %0a
host:1262662257=127.0.0.1
author:1262467850=
diff:1262467850:1258347507:=34,35c34,38%0a%3c >>> pop = population(size=1000, loci=[2]))%0a%3c >>> pop.evolve(%0a---%0a> >>> simu = simulator(%0a>     population(size=1000, loci=[2]),%0a>     randomMating(ops=recombinator(rates=0.01)),%0a>     rep=3)%0a> >>> simu.evolve(%0a39d41%0a%3c ...     matingScheme=randomMating(ops=recombinator(rates=0.01)),%0a42c44,45%0a%3c ...         pyEval(r"'%25.2f\n' %25 LD[0][1]", step=10),%0a---%0a> ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a> ...         pyOutput('\n', rep=-1, step=10)%0a46,56c49,59%0a%3c 0.24%0a%3c 0.21%0a%3c 0.17%0a%3c 0.13%0a%3c 0.10%0a%3c 0.11%0a%3c 0.12%0a%3c 0.11%0a%3c 0.09%0a%3c 0.07%0a%3c (100,)%0a---%0a> 0.24	0.25	0.24	%0a> 0.21	0.23	0.22	%0a> 0.17	0.21	0.20	%0a> 0.13	0.17	0.18	%0a> 0.10	0.15	0.18	%0a> 0.11	0.14	0.16	%0a> 0.12	0.10	0.16	%0a> 0.11	0.11	0.15	%0a> 0.09	0.10	0.14	%0a> 0.07	0.10	0.11	%0a> (100, 100, 100)%0a63,69c66,72%0a%3c * The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci.%0a%3c * The last statement uses the '''evolve()''' function to evolve the populations for 100 generations, subject to four ''operators''. It uses a random mating scheme. However, instead of a standard Mendelian genotype transmitter, this script uses a recombinator (a during-mating operator) to recombine parental chromosomes to form offspring genotype.%0a%3c %0a%3c The first two operators are applied to the population before evolution. Operator '''initSex''' initializes sex of individuals randomly and operator '''initByValue''' initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. Operator '''stat''' calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of the population. The last operator '''pyEval''' is applied at the end of every 10 generations to output calculated linkage disequilibrium values with a trailing newline.%0a%3c %0a%3c The result of this example is a list of linkage disequilibrium values, representing the decay of linkage disequilibrium of this population at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a%3c %0a---%0a> * The second line creates a simulator with three replicates of a diploid population with 1000 individuals, each having one chromosome with two loci. Random mating will be used to generate offspring but a recombinator (a during-mating operator) is used instead of the default Medelian genotype transmitter.%0a> * The last statement uses the '''evolve()''' function to evolve the populations for 100 generations, subject to five ''operators''.%0a> %0a> The first operator '''initByValue''' is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators '''pyEval''' and '''pyOutput''' are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate.%0a> %0a> The result of this example is a table of three columns, representing the decay of linkage disequilibrium of each replicate at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a> %0a
host:1262467850=127.0.0.1
author:1258347507=
diff:1258347507:1256370540:=39c39%0a%3c ...     initOps = [%0a---%0a> ...     preOps = [%0a42c42%0a%3c ...     postOps = [%0a---%0a> ...     ops = [%0a
host:1258347507=127.0.0.1
author:1256370540=
diff:1256370540:1253935036:=10,11c10,11%0a%3c * '''General-purpose''': Many population genetics simulation programs are available. However, they are all designed for specific types of evolutionary scenarios and are limited in their ability to simulate complex evolutionary processes. ''simuPOP'' is the only general-purpose simulation program that is capable of simulation arbitrarily complex evolutionary scenarios. As a matter of fact, using a large number of functions, simuPOP can be a powerful tool to manipulate and analyze genetic data.%0a%3c %0a---%0a> * '''General-purpose''': Many population genetics simulation programs are available. However, they are all designed for specific types of evolutionary scenarios and are limited in their ability to simulate complex evolutionary processes. ''simuPOP'' is the only general-purpose simulation program that is capable of simulation arbitrarily complex evolutionary scenarios.%0a> %0a
host:1256370540=127.0.0.1
author:1253935036=
diff:1253935036:1244328159:=34,37c34,35%0a%3c >>> simu = simulator(%0a%3c     population(size=1000, loci=[2]),%0a%3c     randomMating(ops=recombinator(rates=0.01)),%0a%3c     rep=3)%0a---%0a> >>> pop = population(size=1000, loci=[2])%0a> >>> simu = simulator(pop, randomMating(), rep=3)%0a39,41c37%0a%3c ...     preOps = [%0a%3c ...         initSex(),%0a%3c ...         initByValue([1, 2, 2, 1])],  %0a---%0a> ...     preOps = [initByValue([1, 2, 2, 1])],  %0a42a39%0a> ...         recombinator(rates=0.01),%0a66c63,64%0a%3c * The second line creates a simulator with three replicates of a diploid population with 1000 individuals, each having one chromosome with two loci. Random mating will be used to generate offspring but a recombinator (a during-mating operator) is used instead of the default Medelian genotype transmitter.%0a---%0a> * The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci.%0a> * The third line creates a simulator with three replicates of this population. Random mating will be used to generate offspring.%0a69,70c67,68%0a%3c The first operator '''initByValue''' is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators '''pyEval''' and '''pyOutput''' are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate.%0a%3c %0a---%0a> The first operator '''initByValue''' is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. '''recombinator''' is a during-mating operator that recombines parental chromosomes with the given recombination rate 0.01 during the generation of offspring; stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators '''pyEval''' and '''pyOutput''' are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate.%0a> %0a
host:1253935036=127.0.0.1
author:1244328159=
diff:1244328159:1240196286:=39c39%0a%3c ...         recombinator(rates=0.01),%0a---%0a> ...         recombinator(rate=0.01),%0a
host:1244328159=127.0.0.1
author:1240196286=
diff:1240196286:1240196136:=14c14,29%0a%3c %0a---%0a> !!Is simuPOP the right tool for you?%0a> %0a> There are quite a number of population genetics simulation programs that have been created for various purposes. If one of them happens to fit your need, it may be easier to use (at least you do not need to write a script) or has better performance. Here is a few links for such programs:%0a> * [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]]%0a> * [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]]%0a> * [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]]%0a> * [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]]%0a> * [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]]%0a> * [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]]%0a> * [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]]%0a> * [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]%0a> * [[http://sfscode.sourceforge.net | SFS_CODE]]%0a> Please note that these links are not actively maintained so they might not work.%0a> %0a> If you cannot find a program that fits your need, you might want to browse this website and the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]] and get some idea how simuPOP works. It might be a good idea to send an email to the simuPOP [[Main/MailingList]], describing the kind of simulation you would like to perform. Some simuPOP users might have run similar simulations and are able to provide useful information on how to implement your simulation with simuPOP.%0a> %0a71,87d85%0a%3c !!Is simuPOP the right tool for you?%0a%3c %0a%3c There are quite a number of population genetics simulation programs that have been created for various purposes. If one of them happens to fit your need, it may be easier to use (at least you do not need to write a script) or has better performance. Here is a few links for such programs:%0a%3c * [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]]%0a%3c * [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]]%0a%3c * [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]]%0a%3c * [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]]%0a%3c * [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]]%0a%3c * [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]]%0a%3c * [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]]%0a%3c * [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]%0a%3c * [[http://sfscode.sourceforge.net | SFS_CODE]]%0a%3c Please note that these links are not actively maintained so some of them might not work.%0a%3c %0a%3c If you cannot find a program that fits your need, you might want to browse this website and the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]] and get some idea how simuPOP works. It might be a good idea to send an email to the simuPOP [[Main/MailingList]], describing the kind of simulation you would like to perform. Some simuPOP users might have run similar simulations and are able to provide useful information on how to implement your simulation with simuPOP.%0a%3c %0a%3c %0a
host:1240196286=127.0.0.1
author:1240196136=
diff:1240196136:1240195895:=28,29c28,29%0a%3c If you cannot find a program that fits your need, you might want to browse this website and the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]] and get some idea how simuPOP works. It might be a good idea to send an email to the simuPOP [[Main/MailingList]], describing the kind of simulation you would like to perform. Some simuPOP users might have run similar simulations and are able to provide useful information on how to implement your simulation with simuPOP.%0a%3c %0a---%0a> If you cannot find a program that fits your need, you might want to browse this website and the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]] and get some idea how simuPOP works. It might be a good idea to send an email to the simuPOP [[Main/MailingList]], describing the kind of simulation you would like to perform. Some simuPOP might have run similar simulations and be able to provide useful information how to implement it with simuPOP.%0a> %0a
host:1240196136=127.0.0.1
author:1240195895=
diff:1240195895:1240194689:=28,29c28,29%0a%3c If you cannot find a program that fits your need, you might want to browse this website and the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]] and get some idea how simuPOP works. It might be a good idea to send an email to the simuPOP [[Main/MailingList]], describing the kind of simulation you would like to perform. Some simuPOP might have run similar simulations and be able to provide useful information how to implement it with simuPOP.%0a%3c %0a---%0a> If you cannot find a program that fits your need, simuPOP might be your only choice because it is, as far as I know, the only program that is designed to implement complex evolutionary scenarios.%0a> %0a
host:1240195895=127.0.0.1
author:1240194689=
diff:1240194689:1240193846:=16c16%0a%3c There are quite a number of population genetics simulation programs that have been created for various purposes. If one of them happens to fit your need, it may be easier to use (at least you do not need to write a script) or has better performance. Here is a few links for such programs:%0a---%0a> There are quite a number of population genetics simulation programs that have been created for various purposes. If one of them happens to fit your need, it may provide better user interface or performance. At least, you do not have to write a Python script. Here is a few links for such programs:%0a26,29c26,27%0a%3c Please note that these links are not actively maintained so they might not work.%0a%3c %0a%3c If you cannot find a program that fits your need, simuPOP might be your only choice because it is, as far as I know, the only program that is designed to implement complex evolutionary scenarios.%0a%3c %0a---%0a> Please note that these links are not actively tracked so they might not work.%0a> %0a
host:1240194689=127.0.0.1
author:1240193846=
diff:1240193846:1239829009:=14,27d13%0a%3c !!Is simuPOP the right tool for you?%0a%3c %0a%3c There are quite a number of population genetics simulation programs that have been created for various purposes. If one of them happens to fit your need, it may provide better user interface or performance. At least, you do not have to write a Python script. Here is a few links for such programs:%0a%3c * [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]]%0a%3c * [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]]%0a%3c * [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]]%0a%3c * [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]]%0a%3c * [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]]%0a%3c * [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]]%0a%3c * [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]]%0a%3c * [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]%0a%3c * [[http://sfscode.sourceforge.net | SFS_CODE]]%0a%3c Please note that these links are not actively tracked so they might not work.%0a%3c %0a
host:1240193846=127.0.0.1
author:1239829009=
diff:1239829009:1239828974:=1c1%0a%3c (:title An introduction to basic simuPOP concepts:)%0a---%0a> (:title Introduction of simuPOP concepts:)%0a
host:1239829009=127.0.0.1
author:1239828974=
diff:1239828974:1239828926:=1d0%0a%3c (:title Introduction of simuPOP concepts:)%0a
host:1239828974=127.0.0.1
author:1239828926=
diff:1239828926:1239828862:=1,12d0%0a%3c !! Introduction%0a%3c %0a%3c simuPOP is a '''general-purpose forward-time population genetics simulation environment'''. It is%0a%3c %0a%3c * A '''population genetics simulation''' program: simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a ''non-overlap generation'' model, aged structured populations can be mimicked using special non-random mating schemes.%0a%3c %0a%3c * '''Forward-time''':  Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically  which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a%3c %0a%3c * '''General-purpose''': Many population genetics simulation programs are available. However, they are all designed for specific types of evolutionary scenarios and are limited in their ability to simulate complex evolutionary processes. ''simuPOP'' is the only general-purpose simulation program that is capable of simulation arbitrarily complex evolutionary scenarios.%0a%3c %0a%3c * A '''simulation environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%3c %0a
host:1239828926=127.0.0.1
author:1239828862=
diff:1239828862:1235573987:=57,65d56%0a%3c !! How to cite simuPOP%0a%3c %0a%3c If you use simuPOP for your research, please cite it using:%0a%3c %0a%3c ->Bo Peng and Marek Kimmal (2005) '''simuPOP: a forward-time population genetics simulation environment'''. ''bioinformatics'', 21(18): 3686-3687. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a%3c %0a%3c and optionally (if nonrandom mating is used)%0a%3c %0a%3c ->Bo Peng and Christopher Amos (2008) '''Forward-time simulations of nonrandom mating populations using simuPOP'''. ''bioinformatics'', 24 (11): 1408-1409. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/24/11/1408 | Link]])%0a
host:1239828862=127.0.0.1
author:1235573987=
diff:1235573987:1232413214:=25c25%0a%3c ...         recombinator(rate=0.01),%0a---%0a> ...         recombinator(rate=0.01)%25newwin%25 ,%0a
host:1235573987=127.0.0.1
author:1232413214=
diff:1232413214:1232413071:=13c13,14%0a%3c %0a---%0a> %25lfloat width=720%25 Attach:evolve.png%0a> %0a
host:1232413214=127.0.0.1
author:1232413071=
diff:1232413071:1232342646:=13,14c13%0a%3c %25lfloat width=720%25 Attach:evolve.png%0a%3c %0a---%0a> %0a
host:1232413071=127.0.0.1
author:1232342646=
diff:1232342646:1232342631:=12,13c12,13%0a%3c %25lfloat width=720%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=800%25 http://simupop.sourceforge.net/images/evolve.png%0a> %0a
host:1232342646=127.0.0.1
author:1232342631=
diff:1232342631:1232333849:=12,13c12,13%0a%3c %25lfloat width=800%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a> %0a
host:1232342631=127.0.0.1
author:1232333849=
diff:1232333849:1232333818:=12,13c12,13%0a%3c %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 Attach:evolve.png%0a> %0a
host:1232333849=127.0.0.1
author:1232333818=
diff:1232333818:1232333549:=
host:1232333818=127.0.0.1
author:1232333549=
diff:1232333549:1232262674:=12,13c12,13%0a%3c %25lfloat width=600%25 Attach:evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a> %0a
host:1232333549=127.0.0.1
author:1232262674=
diff:1232262674:1232232138:=12,13c12,13%0a%3c %25lfloat width=600%25 http://simupop.sourceforge.net/images/evolve.png%0a%3c %0a---%0a> %25lfloat width=600%25 Attach:evolve.png%0a> %0a
host:1232262674=127.0.0.1
author:1232232138=
diff:1232232138:1232232138:=1,56d0%0a%3c !!An overview of simuPOP concepts%0a%3c %0a%3c A simuPOP '''population''' consists of individuals of the same '''genotype structure''', which include properties such as number of homologous sets of chromosomes (ploidy), number of chromosomes, and names and locations of markers on each chromosome. Individuals can be divided into subpopulations that can be further divided into virtual subpopulations according to individual properties such as sex, affection status, or arbitrary auxiliary information such as age.%0a%3c %0a%3c %0a%3c '''Operators''' are Python objects that act on a population. They can be applied to a population before or after mating during a life cycle of an evolutionary process (Figure [fig:life-cycle]), or to one or two parents during the production of each offspring. Arbitrary numbers of operators can be applied to an evolving population.%0a%3c %0a%3c A simuPOP '''mating scheme''' is responsible for choosing parent or parents from a parental (virtual) subpopulation and for populating an offspring subpopulation. simuPOP provides a number of pre-defined mating schemes, such as random, consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid mating in hymenoptera. More complicated nonrandom mating schemes such as mating in age-structured populations can be constructed using '''heterogeneous mating schemes'''. %0a%3c %0a%3c simuPOP evolves a population generation by generation, following the evolutionary cycle depicted in here:%0a%3c %0a%3c %25lfloat width=600%25 Attach:evolve.png%0a%3c %0a%3c Briefly speaking, a number of '''pre-mating operators''' such as a ''mutator'' are applied to a population before a mating scheme repeatedly chooses a parent or parents to produce offspring. '''During-mating operators''' such as ''recombinator'' can be used to adjust how offspring genotypes are formed from parental genotypes. After an offspring population is populated, post-mating operators can be applied, for example, to calculate population statistics. The offspring population will then become the parental population of the next evolutionary cycle.%0a%3c %0a%3c !! A simple example:%0a%3c %0a%3c =python [=%0a%3c >>> from simuPOP import *%0a%3c >>> pop = population(size=1000, loci=[2])%0a%3c >>> simu = simulator(pop, randomMating(), rep=3)%0a%3c >>> simu.evolve(%0a%3c ...     preOps = [initByValue([1, 2, 2, 1])],  %0a%3c ...     ops = [%0a%3c ...         recombinator(rate=0.01)%25newwin%25 ,%0a%3c ...         stat(LD=[0, 1]),%0a%3c ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a%3c ...         pyOutput('\n', rep=-1, step=10)%0a%3c ...     ],%0a%3c ...     gen=100%0a%3c ... )%0a%3c 0.24	0.25	0.24	%0a%3c 0.21	0.23	0.22	%0a%3c 0.17	0.21	0.20	%0a%3c 0.13	0.17	0.18	%0a%3c 0.10	0.15	0.18	%0a%3c 0.11	0.14	0.16	%0a%3c 0.12	0.10	0.16	%0a%3c 0.11	0.11	0.15	%0a%3c 0.09	0.10	0.14	%0a%3c 0.07	0.10	0.11	%0a%3c (100, 100, 100)%0a%3c >>>%0a%3c =]%0a%3c %0a%3c %0a%3c This example simulates a standard diploid Wright-Fisher model with recombination. %0a%3c * The first line imports the standard simuPOP module.%0a%3c * The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci.%0a%3c * The third line creates a simulator with three replicates of this population. Random mating will be used to generate offspring.%0a%3c * The last statement uses the '''evolve()''' function to evolve the populations for 100 generations, subject to five ''operators''.%0a%3c %0a%3c The first operator '''initByValue''' is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. '''recombinator''' is a during-mating operator that recombines parental chromosomes with the given recombination rate 0.01 during the generation of offspring; stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators '''pyEval''' and '''pyOutput''' are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate.%0a%3c %0a%3c The result of this example is a table of three columns, representing the decay of linkage disequilibrium of each replicate at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a%3c %0a
host:1232232138=127.0.0.1
