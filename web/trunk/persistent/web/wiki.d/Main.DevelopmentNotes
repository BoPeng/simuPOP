version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.7) Gecko/20091221 Firefox/3.5.7 (.NET CLR 3.5.30729)
author=
csum=
ctime=1262706774
host=127.0.0.1
name=Main.DevelopmentNotes
rev=4
targets=
text=!! How the document of simuPOP is organized and distributed.%0a%0aThe whole ideas are that%0a# Documents are organized around their definitions, e.g. in source code for C++ functions and classes, in Python docstring for Python modules.%0a# Documents are extracted and converted to PDF and HTML formats.%0a# Examples are generated dynamically to make it easy to change examples, accomendate changes of simuPOP and check for errors.%0a%0a%0a!!!Examples in the user's guide%0a%0aExamples in the user's guide are all in file doc/userGuide.py. They are%0aseparated by directives such as%0a%0a    #begin_file log/standard.py%0a    #end_file%0a%0aTo generate source code and their log files (output as if they are executed%0ain an interactive Python session), you can run%0a%0a    > cd doc%0a    > ./runSampleScript.py userGuide.py%0a%0arunSampleScript.py will execute userGuide.py as if the examples are%0ainputted from a Python interactive shell. The examples will be written to%0afiles such as log/standard.py and the output will be written to files such%0aas log/standard.log. The log files, sometimes the the .py files, are%0ainserted into log/userGuide.lyx, and are converted to .PDF or .html format.%0aPieces of code that are included between #begin_ignore and #end_ignore will%0abe will be executed but not saved to output files. If there is any error%0ain the code, runSampleScript will stop and display the errors, unless a%0adirective #expect_error is included between #begin_file and #end_file,%0aindicating that the example is designed to generate some error.%0a%0aThe output files (log/*.py, log/*.log and sometimes log/*.png) are included%0ain doc/userGuide.lyx to generate both PDF and HTML versions of the simuPOP%0auser's guide.%0a%0a%0a%0a!!!Documentation of core simuPOP classes and functions (C++ level)%0a%0aIn order to reduce the workload to maintain different versions of%0adocumentation, all documents are in the source code, together with%0acorresponding function and class definitions. The documentation is written%0ain a format that is recognizable by 'doxygen', a document generator. For%0aexample, instead of using /* this is a C++ comment. */, user documentation%0ais written as /** this is documentation. */. Special format directives such%0aas \e (emph) and \c (fixed font) are used. \e is used for parameter name%0aand \c is used for functions.%0a%0aThe C++ level documentation is converted to XML format using command%0a%0a    > doxygen%0a%0aThe XML format of the documentation is read by a script and is written to%0adifferent formats. By executing%0a%0a    > tools/doxy2swig%0a%0aYou will get the following files:%0a%0a    1. src/simuPOP_doc.i%0a       This is a SWIG interface file with Python docstring for all C++%0a       level classes and functions. This file will be included by%0a       src/simuPOP_common.i to generate docstrings, which could be assessed%0a       by functions such as%0a%0a           >>> help(Population)%0a    %0a    2. doc/simuPOP_doc.tex%0a       This is a latex file with many definitions such as%0a       \loadPopulationRef. This file is included and used by%0a       doc/refManual.lyx to generate PDF documentations.%0a%0a    3. doc/build/*.ref%0a       These are function and class references in reStructuredText format.%0a       They are used by Sphinix to generate online HTML documentation.%0a%0a%0a!!!Documentation of Python modules%0a%0aFunctions and classes in simuPOP utility modules are written in%0areStructuredText format. This format is more or less human readable and is%0abecoming the recommended format for Python modules.%0a%0aScript doc/doxy2swig also scans Python modules and simuPOP interface file.%0aThe results are converted to doc/simuPOP_doc.tex and doc/build/*.ref for%0athe generation of PDF and HTML documentations. Note that doc/doxy2swig%0areads 'live' documents of simuPOP so you may need to run the whole process%0atwice to get the correct documentation becase of the chicken-egg problem%0aof documents.%0a%0a%0a!!!Generation of PDF documents%0a%0aThe PDF documents are prepared by LaTeX using a document processor LyX. You%0awill have to install lyx from http://www.lyx.org to view these files%0a(doc/userGuide.lyx and doc/refManual.lyx). These lyx files includes files%0adoc/simuPOP_doc.tex and many files under doc/log, which has to be prepared%0aas instructed before. If everything is ready, you could simply generate PDF%0aversion of the documents by running commands%0a%0a    > cd doc%0a    > make pdf%0a%0awhich calls lyx to convert .lyx to .pdf files.%0a%0a%0a!!!Generation of HTML documents%0a%0asimuPOP uses a converter to convert latex documents to reStructuredText and%0ause Sphinx (sphinx.pocoo.org) to convert reStructuredText to HTML. The%0aconverter could be checked out from svn.python.org but you will have to%0acustomize this conversion tool using a patch as follows:%0a%0a    > cd doc%0a    > svn co -r 76658 \%0a        http://svn.python.org/projects/doctools/converter/converter converter%0a    > cd converter%0a    > patch -p0 %3c ../converter_patch.diff%0a%0aUsing Python 2.6, you could generate HTML documents using%0a    > make html%0a%0aI have also added two other commands%0a    > make dist_svn%0a    > make dist_release  # for release%0a%0aso that you can upload the subversion or release version of the HTML%0adocuments to appropriate directories under http://simupop.sourceforge.net.%0aPDF versions of the documents should be checked in to the subversion%0arepository, and distributed with a simuPOP release.%0a%0aNOTE: public key could be set up through sourceforge.net/account/services%0aso that you do not have to enter password each time. This service is%0aprovided in the account service page of sourceforge.net (currently%0ahttps://sourceforge.net/account/services with a valid user account).%0a%0a%0a!! How to release simuPOP.%0a%0a1. Update ChangeLog, marking release revision and date.%0a%0a2. Run the following commands to build simuPOP%0a    > doxygen   # process Doxyfile by default%0a    > cd tools; doxy2swig.py; cd ..%0a    > scons install%0a  execute the commands twice so that online documentations are properly%0a  generated (first run) and documented (second run).%0a%0a3. Test simuPOP%0a    > cd test%0a    > run_tests.sh%0a%0a4. Update document%0a    > cd doc%0a    > runSampleCode userGuide.py%0a    > make dist_release%0a%0a5. Update release number in doc/refManual.lyx, doc/userGuide.lyx (document%0a    -> settings -> preamble). Export doc/refManual.pdf and%0a    doc/userGuide.lyx manually or using commands%0a%0a    > cd doc%0a    > make pdf%0a%0a6. Release simuPOP source package%0a    > cd tools%0a    > build.py --release=x.x.x doc  # has been done manually, but run it anyway.%0a    > build.py --release=x.x.x src  # build a source package%0a%0a7. Upload source packages (under the download directory) to a windows%0a   system, decompress source package, use MSVC++2003.net for Python version%0a   2.5 and earlier, use MSVC++ Express 2008 for Python 2.6 and latter, run%0a   command%0a%0a    > c:/python2X/python setup.py bdist_wininst%0a%0a    Build other binary packages on these systems, generally using%0a%0a    > python setup.py bdist%0a%0a8. Release simuPOP svn%0a    > build.py --release=x.x.x svn  # tag the release%0a%0a9. Update source documentation by running%0a    > doxygen Doxy_web%0a    > rsunc -v -rlt -z doxygen_doc/html/ USER,simupop@web.sourceforge.net:htdocs/src_doc%0a    or simply run%0a    > cd doc%0a    > make src_doc%0a%0a10. Go to https://simupop.sourceforge.net, choose sf.net summary, log in%0a  and upload files. Or, simply create the release online and use scp as%0a    > scp simuPOP-x.x.x-* user,simupop@frs.sourceforge.net:/home/frs/project/s/si/simupop/simupop/x.x.x/%0a%0a11. Go to simuPOP webpage and change pages ChangeLog and News.%0a%0a12. Register this release of simuPOP at the pypi website, by running:%0a    > python setup.py register%0a%0a
time=1263022468
author:1263022468=
diff:1263022468:1262984979:=194,196c194,195%0a%3c   and upload files. Or, simply create the release online and use scp as%0a%3c     > scp simuPOP-x.x.x-* user,simupop@frs.sourceforge.net:/home/frs/project/s/si/simupop/simupop/x.x.x/%0a%3c %0a---%0a>   and upload files.%0a> %0a
host:1263022468=127.0.0.1
author:1262984979=
diff:1262984979:1262706920:=188,192c188,189%0a%3c     > rsunc -v -rlt -z doxygen_doc/html/ USER,simupop@web.sourceforge.net:htdocs/src_doc%0a%3c     or simply run%0a%3c     > cd doc%0a%3c     > make src_doc%0a%3c %0a---%0a>     > scp -r doxygen_doc/html USER,simupop@web.sourceforge.net:htdocs/src_doc%0a> %0a
host:1262984979=127.0.0.1
author:1262706920=
diff:1262706920:1262706774:=4,10c4,14%0a%3c # Documents are organized around their definitions, e.g. in source code for C++ functions and classes, in Python docstring for Python modules.%0a%3c # Documents are extracted and converted to PDF and HTML formats.%0a%3c # Examples are generated dynamically to make it easy to change examples, accomendate changes of simuPOP and check for errors.%0a%3c %0a%3c %0a%3c !!!Examples in the user's guide%0a%3c %0a---%0a>     - Documents are organized around their definitions, e.g. in source code%0a>       for C++ functions and classes, in Python docstring for Python%0a>       modules.%0a>     - Documents are extracted and converted to PDF and HTML formats.%0a>     - Examples are generated dynamically to make it easy to change%0a>       examples, accomendate changes of simuPOP and check for errors.%0a> %0a> %0a> Examples in the user's guide%0a> -----------------------------%0a> %0a14,16c18,21%0a%3c     #begin_file log/standard.py%0a%3c     #end_file%0a%3c %0a---%0a> #begin_file log/standard.py%0a> %0a> #end_file%0a> %0a40,41c45,47%0a%3c !!!Documentation of core simuPOP classes and functions (C++ level)%0a%3c %0a---%0a> Documentation of core simuPOP classes and functions (C++ level)%0a> ---------------------------------------------------------------%0a> %0a80,81c86,88%0a%3c !!!Documentation of Python modules%0a%3c %0a---%0a> Documentation of Python modules%0a> -------------------------------%0a> %0a94,95c101,103%0a%3c !!!Generation of PDF documents%0a%3c %0a---%0a> Generation of PDF documents%0a> ----------------------------%0a> %0a109,110c117,119%0a%3c !!!Generation of HTML documents%0a%3c %0a---%0a> Generation of HTML documents%0a> -----------------------------%0a> %0a
host:1262706920=127.0.0.1
author:1262706774=
diff:1262706774:1262706774:=1,206d0%0a%3c !! How the document of simuPOP is organized and distributed.%0a%3c %0a%3c The whole ideas are that%0a%3c     - Documents are organized around their definitions, e.g. in source code%0a%3c       for C++ functions and classes, in Python docstring for Python%0a%3c       modules.%0a%3c     - Documents are extracted and converted to PDF and HTML formats.%0a%3c     - Examples are generated dynamically to make it easy to change%0a%3c       examples, accomendate changes of simuPOP and check for errors.%0a%3c %0a%3c %0a%3c Examples in the user's guide%0a%3c -----------------------------%0a%3c %0a%3c Examples in the user's guide are all in file doc/userGuide.py. They are%0a%3c separated by directives such as%0a%3c %0a%3c #begin_file log/standard.py%0a%3c %0a%3c #end_file%0a%3c %0a%3c To generate source code and their log files (output as if they are executed%0a%3c in an interactive Python session), you can run%0a%3c %0a%3c     > cd doc%0a%3c     > ./runSampleScript.py userGuide.py%0a%3c %0a%3c runSampleScript.py will execute userGuide.py as if the examples are%0a%3c inputted from a Python interactive shell. The examples will be written to%0a%3c files such as log/standard.py and the output will be written to files such%0a%3c as log/standard.log. The log files, sometimes the the .py files, are%0a%3c inserted into log/userGuide.lyx, and are converted to .PDF or .html format.%0a%3c Pieces of code that are included between #begin_ignore and #end_ignore will%0a%3c be will be executed but not saved to output files. If there is any error%0a%3c in the code, runSampleScript will stop and display the errors, unless a%0a%3c directive #expect_error is included between #begin_file and #end_file,%0a%3c indicating that the example is designed to generate some error.%0a%3c %0a%3c The output files (log/*.py, log/*.log and sometimes log/*.png) are included%0a%3c in doc/userGuide.lyx to generate both PDF and HTML versions of the simuPOP%0a%3c user's guide.%0a%3c %0a%3c %0a%3c %0a%3c Documentation of core simuPOP classes and functions (C++ level)%0a%3c ---------------------------------------------------------------%0a%3c %0a%3c In order to reduce the workload to maintain different versions of%0a%3c documentation, all documents are in the source code, together with%0a%3c corresponding function and class definitions. The documentation is written%0a%3c in a format that is recognizable by 'doxygen', a document generator. For%0a%3c example, instead of using /* this is a C++ comment. */, user documentation%0a%3c is written as /** this is documentation. */. Special format directives such%0a%3c as \e (emph) and \c (fixed font) are used. \e is used for parameter name%0a%3c and \c is used for functions.%0a%3c %0a%3c The C++ level documentation is converted to XML format using command%0a%3c %0a%3c     > doxygen%0a%3c %0a%3c The XML format of the documentation is read by a script and is written to%0a%3c different formats. By executing%0a%3c %0a%3c     > tools/doxy2swig%0a%3c %0a%3c You will get the following files:%0a%3c %0a%3c     1. src/simuPOP_doc.i%0a%3c        This is a SWIG interface file with Python docstring for all C++%0a%3c        level classes and functions. This file will be included by%0a%3c        src/simuPOP_common.i to generate docstrings, which could be assessed%0a%3c        by functions such as%0a%3c %0a%3c            >>> help(Population)%0a%3c     %0a%3c     2. doc/simuPOP_doc.tex%0a%3c        This is a latex file with many definitions such as%0a%3c        \loadPopulationRef. This file is included and used by%0a%3c        doc/refManual.lyx to generate PDF documentations.%0a%3c %0a%3c     3. doc/build/*.ref%0a%3c        These are function and class references in reStructuredText format.%0a%3c        They are used by Sphinix to generate online HTML documentation.%0a%3c %0a%3c %0a%3c Documentation of Python modules%0a%3c -------------------------------%0a%3c %0a%3c Functions and classes in simuPOP utility modules are written in%0a%3c reStructuredText format. This format is more or less human readable and is%0a%3c becoming the recommended format for Python modules.%0a%3c %0a%3c Script doc/doxy2swig also scans Python modules and simuPOP interface file.%0a%3c The results are converted to doc/simuPOP_doc.tex and doc/build/*.ref for%0a%3c the generation of PDF and HTML documentations. Note that doc/doxy2swig%0a%3c reads 'live' documents of simuPOP so you may need to run the whole process%0a%3c twice to get the correct documentation becase of the chicken-egg problem%0a%3c of documents.%0a%3c %0a%3c %0a%3c Generation of PDF documents%0a%3c ----------------------------%0a%3c %0a%3c The PDF documents are prepared by LaTeX using a document processor LyX. You%0a%3c will have to install lyx from http://www.lyx.org to view these files%0a%3c (doc/userGuide.lyx and doc/refManual.lyx). These lyx files includes files%0a%3c doc/simuPOP_doc.tex and many files under doc/log, which has to be prepared%0a%3c as instructed before. If everything is ready, you could simply generate PDF%0a%3c version of the documents by running commands%0a%3c %0a%3c     > cd doc%0a%3c     > make pdf%0a%3c %0a%3c which calls lyx to convert .lyx to .pdf files.%0a%3c %0a%3c %0a%3c Generation of HTML documents%0a%3c -----------------------------%0a%3c %0a%3c simuPOP uses a converter to convert latex documents to reStructuredText and%0a%3c use Sphinx (sphinx.pocoo.org) to convert reStructuredText to HTML. The%0a%3c converter could be checked out from svn.python.org but you will have to%0a%3c customize this conversion tool using a patch as follows:%0a%3c %0a%3c     > cd doc%0a%3c     > svn co -r 76658 \%0a%3c         http://svn.python.org/projects/doctools/converter/converter converter%0a%3c     > cd converter%0a%3c     > patch -p0 %3c ../converter_patch.diff%0a%3c %0a%3c Using Python 2.6, you could generate HTML documents using%0a%3c     > make html%0a%3c %0a%3c I have also added two other commands%0a%3c     > make dist_svn%0a%3c     > make dist_release  # for release%0a%3c %0a%3c so that you can upload the subversion or release version of the HTML%0a%3c documents to appropriate directories under http://simupop.sourceforge.net.%0a%3c PDF versions of the documents should be checked in to the subversion%0a%3c repository, and distributed with a simuPOP release.%0a%3c %0a%3c NOTE: public key could be set up through sourceforge.net/account/services%0a%3c so that you do not have to enter password each time. This service is%0a%3c provided in the account service page of sourceforge.net (currently%0a%3c https://sourceforge.net/account/services with a valid user account).%0a%3c %0a%3c %0a%3c !! How to release simuPOP.%0a%3c %0a%3c 1. Update ChangeLog, marking release revision and date.%0a%3c %0a%3c 2. Run the following commands to build simuPOP%0a%3c     > doxygen   # process Doxyfile by default%0a%3c     > cd tools; doxy2swig.py; cd ..%0a%3c     > scons install%0a%3c   execute the commands twice so that online documentations are properly%0a%3c   generated (first run) and documented (second run).%0a%3c %0a%3c 3. Test simuPOP%0a%3c     > cd test%0a%3c     > run_tests.sh%0a%3c %0a%3c 4. Update document%0a%3c     > cd doc%0a%3c     > runSampleCode userGuide.py%0a%3c     > make dist_release%0a%3c %0a%3c 5. Update release number in doc/refManual.lyx, doc/userGuide.lyx (document%0a%3c     -> settings -> preamble). Export doc/refManual.pdf and%0a%3c     doc/userGuide.lyx manually or using commands%0a%3c %0a%3c     > cd doc%0a%3c     > make pdf%0a%3c %0a%3c 6. Release simuPOP source package%0a%3c     > cd tools%0a%3c     > build.py --release=x.x.x doc  # has been done manually, but run it anyway.%0a%3c     > build.py --release=x.x.x src  # build a source package%0a%3c %0a%3c 7. Upload source packages (under the download directory) to a windows%0a%3c    system, decompress source package, use MSVC++2003.net for Python version%0a%3c    2.5 and earlier, use MSVC++ Express 2008 for Python 2.6 and latter, run%0a%3c    command%0a%3c %0a%3c     > c:/python2X/python setup.py bdist_wininst%0a%3c %0a%3c     Build other binary packages on these systems, generally using%0a%3c %0a%3c     > python setup.py bdist%0a%3c %0a%3c 8. Release simuPOP svn%0a%3c     > build.py --release=x.x.x svn  # tag the release%0a%3c %0a%3c 9. Update source documentation by running%0a%3c     > doxygen Doxy_web%0a%3c     > scp -r doxygen_doc/html USER,simupop@web.sourceforge.net:htdocs/src_doc%0a%3c %0a%3c 10. Go to https://simupop.sourceforge.net, choose sf.net summary, log in%0a%3c   and upload files.%0a%3c %0a%3c 11. Go to simuPOP webpage and change pages ChangeLog and News.%0a%3c %0a%3c 12. Register this release of simuPOP at the pypi website, by running:%0a%3c     > python setup.py register%0a%3c %0a
host:1262706774=127.0.0.1
