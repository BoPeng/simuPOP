version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.4) Gecko/20091016 Firefox/3.5.4 (.NET CLR 3.5.30729)
author=
csum=
ctime=1232232260
host=127.0.0.1
name=Main.Features
rev=39
targets=Main.RoadMap
text=(:title simuPOP Features:)%0a%25rfloat margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=125%25 http://simupop.sourceforge.net/images/features.jpg%0a%0a!!! Major features%0a%0asimuPOP offers a long list of features, many of which are unique among all forward-time population genetics simulation programs. The most distinguished features include:%0a%0a# simuPOP provides '''three types of modules''' that use 1, 8 or >=32 bits to store an allele. The binary module (1 bit) is suitable for simulating a large number of SNP markers and the long module (>=32 bits) is suitable for simulating some population genetics models such as the infinite allele mutation model. simuPOP supports different types of chromosomes such as autosome, sex chromosomes and mitochondrial, with arbitrary number of markers.%0a%0a# simuPOP supports '''autosome''', '''chromosome X''', '''chromosome Y''', and '''mitochondrial chromosomes''' as a special case of a group of customized chromosome types.%0a%0a# An arbitrary number of float numbers, called '''information fields''', can be attached to individuals of a population. For example, information field @@father_idx@@ and @@mother_idx@@ are used to track an individual’s parents, and @@pack_year@@ can be used to simulate an environmental factor associated with smoking.%0a%0a# simuPOP does not impose any limit on number of homologous sets of chromosomes, the size of the genome, or the number of individuals in a population. During an evolutionary process, a population can hold more than one most-recent generations. '''Pedigrees''' can be sampled from such '''multi-generation populations'''.%0a%0a# An operator can be native (implemented in C++) or hybrid (Python assisted). A '''hybrid operator''' calls a user-provided Python function to implement arbitrary genetic effects. For example, a hybrid mutator passes to-be-mutated alleles to a user-provided function and mutates these alleles according to the returned values.%0a%0a# simuPOP provides '''more than 70 operators''' that cover all important aspects of genetic studies. These include mutation (''k''-allele, stepwise, generalized stepwise and hybrid), migration (arbitrary, can create new subpopulation), recombination and gene conversion (uniform or nonuniform, sex-specific), quantitative trait (single, multilocus or hybrid), selection (single-locus, additive, multiplicative or hybrid multi-locus models), penetrance (single, multi-locus or hybrid), ascertainment (case–control, affected sibpairs, random, nuclear and large pedigree), statistics calculation (including but not limited to allele, genotype, haplotype, heterozygote number and frequency; expected heterozygosity; di-allelic and multi-allelic , and linkage disequilibrium measures), pedigree tracing, visualization (using [[http://www.r-project.org | R]] or other Python modules) and load/save in simuPOP’s native format and many external formats such as Linkage.%0a%0a# Mating schemes and many operators can work on '''virtual subpopulations''' of a subpopulation. For example, positive assortative mating can be implemented by mating individuals with similar properties such as ancestry. The number of offspring per mating event can be fixed, or can follow a statistical distribution. '''Arbitrary nonrandom mating schemes''' can be simulated, with '''assortative mating''', '''age-structured population''' and '''overlapping-generations''' as special cases. %0a%0a# simuPOP is well documented. The recent versions of simuPOP provides '''more than 150 examples''' in its '''user's guide''' (200 pages), a '''complete reference manual'''. The '''simuPOP online cookbook''' provides many additional modules that allow simuPOP to work with other applications, and functions and scripts for different applications.%0a%0a# Perhaps most importantly, '''simuPOP is completely open''' to you, in the sense that:%0a** You can observe any information of any individual at any generation of an evolving population. A simuPOP evolutionary process is completely transparent to you so that you can examine its properties very closely.%0a** simuPOP is very well documented so that you can find the details of any function and operator you use. Mathematical formula and even implementation details are provided for important genetic factors especially when there are alternative implementations.%0a** simuPOP is open source so you can always check what is going on under the hood.%0a->Although such openness can be overwhelming, it gives serious users a peace of mind of knowing exactly how their simulations are running.%0a%0a!!! Other forward-time simulation programs%0a%0aA number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://www.ensam.inra.fr/URLB/bottleneck/bottleneck.html | Bottleneck]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]] (some links may have become obsolete). These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%0aCompared to such programs, simuPOP has the following advantages:%0a%0a* The '''scripting interface''' gives simuPOP the flexibility to create arbitrarily complex evolutionary scenarios. For example, it is easy to use simuPOP to explicitly introduce a disease predisposing mutant to an evolving population, trace the allele frequency of them, and restart the simulation if they got lost due to genetic drift.%0a%0a* The Python interface allows users to define '''customized genetic effects in Python'''. In contrast, other programs either do not allow customized effects or force users to modify code at a lower (e.g. C++) level.%0a%0a* simuPOP is the only application that embodies the concept of virtual subpopulation that allows '''evolutions at a finer scale'''. This is required for realistic simulations of complex evolutionary scenarios. For example, you can calculate statistics for arbitrary subsets of the population (e.g. all affected individuals, heavy smokers), and apply different mutation, migration, selection schemes to individuals with different properties.%0a%0a* simuPOP allows users to '''examine an evolutionary process very closely''' because all simuPOP objects are Python objects that can be assessed using their member functions. For example, users can keep track of genotype at particular loci during evolution. In contrast, other programs work more or less like a black box where only limited types of statistics can be outputted.%0a%0a!!! Major drawback of simuPOP?%0a%0aThe scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the major drawback of simuPOP because '''the scripting language interface has a steeper learning curve than the command line (or configuration file) interface of program A'''.%0a%0aWhereas this claim is generally true (see, however, simuPOP [[Main/RoadMap]] for improvements in this area), the comparison itself hardly makes sense. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a%0a
time=1256910450
title=simuPOP Features
author:1256910450=
diff:1256910450:1256335296:=22,23c22,23%0a%3c # simuPOP is well documented. The recent versions of simuPOP provides '''more than 150 examples''' in its '''user's guide''' (200 pages), a '''complete reference manual'''. The '''simuPOP online cookbook''' provides many additional modules that allow simuPOP to work with other applications, and functions and scripts for different applications.%0a%3c %0a---%0a> # simuPOP is well documented. The recent versions of simuPOP provides '''more than 150 examples''' in its '''pages user's guide''' (200 pages), a '''complete reference manual'''. The '''simuPOP online cookbook''' provides many additional modules that allow simuPOP to work with other applications, and functions and scripts for different applications.%0a> %0a
host:1256910450=127.0.0.1
author:1256335296=
diff:1256335296:1256335036:=40,41c40,41%0a%3c * simuPOP is the only application that embodies the concept of virtual subpopulation that allows '''evolutions at a finer scale'''. This is required for realistic simulations of complex evolutionary scenarios. For example, you can calculate statistics for arbitrary subsets of the population (e.g. all affected individuals, heavy smokers), and apply different mutation, migration, selection schemes to individuals with different properties.%0a%3c %0a---%0a> * simuPOP is the only application that embodies the concept of virtual subpopulation that allows '''evolutions at a finer scale'''. This is required for realistic simulations of complex evolutionary scenarios.%0a> %0a
host:1256335296=127.0.0.1
author:1256335036=
diff:1256335036:1256334624:=22,23c22,23%0a%3c # simuPOP is well documented. The recent versions of simuPOP provides '''more than 150 examples''' in its '''pages user's guide''' (200 pages), a '''complete reference manual'''. The '''simuPOP online cookbook''' provides many additional modules that allow simuPOP to work with other applications, and functions and scripts for different applications.%0a%3c %0a---%0a> # simuPOP is well documented. The recent versions of simuPOP provides '''more than 150 examples''' in its '''>200 pages user's guide''', a '''complete reference manual'''. The '''simuPOP online cookbook''' provides many additional modules that allow simuPOP to work with other applications, and functions and scripts for different applications.%0a> %0a
host:1256335036=127.0.0.1
author:1256334624=
diff:1256334624:1253282920:=8,9c8,9%0a%3c # simuPOP provides '''three types of modules''' that use 1, 8 or >=32 bits to store an allele. The binary module (1 bit) is suitable for simulating a large number of SNP markers and the long module (>=32 bits) is suitable for simulating some population genetics models such as the infinite allele mutation model. simuPOP supports different types of chromosomes such as autosome, sex chromosomes and mitochondrial, with arbitrary number of markers.%0a%3c %0a---%0a> # simuPOP provides '''three types of modules''' that use 1, 8 or 16 bits to store an allele. The binary module (1 bit) is suitable for simulating a large number of SNP markers and the long module (16 bits) is suitable for simulating some population genetics models such as the infinite allele mutation model. simuPOP supports different types of chromosomes such as autosome, sex chromosomes and mitochondrial, with arbitrary number of markers.%0a> %0a14,15c14,15%0a%3c # simuPOP does not impose any limit on number of homologous sets of chromosomes, the size of the genome, or the number of individuals in a population. During an evolutionary process, a population can hold more than one most-recent generations. '''Pedigrees''' can be sampled from such '''multi-generation populations'''.%0a%3c %0a---%0a> # simuPOP does not impose any limit on number of homologous sets of chromosomes, the size of the genome, or the number of individuals in a population. During an evolutionary process, a population can hold more than one most-recent generations. Pedigrees can be sampled from such '''multi-generation populations'''.%0a> %0a20,23c20,21%0a%3c # Mating schemes and many operators can work on '''virtual subpopulations''' of a subpopulation. For example, positive assortative mating can be implemented by mating individuals with similar properties such as ancestry. The number of offspring per mating event can be fixed, or can follow a statistical distribution. '''Arbitrary nonrandom mating schemes''' can be simulated, with '''assortative mating''', '''age-structured population''' and '''overlapping-generations''' as special cases. %0a%3c %0a%3c # simuPOP is well documented. The recent versions of simuPOP provides '''more than 150 examples''' in its '''>200 pages user's guide''', a '''complete reference manual'''. The '''simuPOP online cookbook''' provides many additional modules that allow simuPOP to work with other applications, and functions and scripts for different applications.%0a%3c %0a---%0a> # Mating schemes and many operators can work on '''virtual subpopulations''' of a subpopulation. For example, positive assortative mating can be implemented by mating individuals with similar properties such as ancestry. The number of offspring per mating event can be fixed, or can follow a statistical distribution.%0a> %0a
host:1256334624=127.0.0.1
author:1253282920=
diff:1253282920:1253282820:=30,31c30,31%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://www.ensam.inra.fr/URLB/bottleneck/bottleneck.html | Bottleneck]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]] (some links may have become obsolete). These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://www.ensam.inra.fr/URLB/bottleneck/bottleneck.html | Bottleneck]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a> %0a
host:1253282920=127.0.0.1
author:1253282820=
diff:1253282820:1253282804:=30,31c30,31%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://www.ensam.inra.fr/URLB/bottleneck/bottleneck.html | Bottleneck]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://www.ensam.inra.fr/URLB/bottleneck/bottleneck.html | Bottleneck], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a> %0a
host:1253282820=127.0.0.1
author:1253282804=
diff:1253282804:1244241899:=30,31c30,31%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://www.ensam.inra.fr/URLB/bottleneck/bottleneck.html | Bottleneck], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a> %0a
host:1253282804=127.0.0.1
author:1244241899=
diff:1244241899:1244046366:=22c22%0a%3c # Perhaps most importantly, '''simuPOP is completely open''' to you, in the sense that:%0a---%0a> # Perhaps most importantly, '''simuPOP is completely''' open to you, in the sense that:%0a
host:1244241899=127.0.0.1
author:1244046366=
diff:1244046366:1244039012:=46,47c46,47%0a%3c Whereas this claim is generally true (see, however, simuPOP [[Main/RoadMap]] for improvements in this area), the comparison itself hardly makes sense. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a%3c %0a---%0a> While this claim is generally true (see, however, simuPOP [[Main/RoadMap]] for improvements in this area), the comparison itself hardly makes sense. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a> %0a
host:1244046366=127.0.0.1
author:1244039012=
diff:1244039012:1244038921:=23c23%0a%3c ** You can observe any information of any individual at any generation of an evolving population. A simuPOP evolutionary process is completely transparent to you so that you can examine its properties very closely.%0a---%0a> ** You can observe any information of any individual or population at any generation. A simuPOP evolutionary process is completely transparent to you so that you can examine its properties very closely.%0a26,27c26,27%0a%3c ->Although such openness can be overwhelming, it gives serious users a peace of mind of knowing exactly how their simulations are running.%0a%3c %0a---%0a> ->Although such openness can be overwhelming, it gives serious users a peace of mind to know exactly how their simulations are running.%0a> %0a
host:1244039012=127.0.0.1
author:1244038921=
diff:1244038921:1244038495:=26,27c26%0a%3c ->Although such openness can be overwhelming, it gives serious users a peace of mind to know exactly how their simulations are running.%0a%3c %0a---%0a> %0a
host:1244038921=127.0.0.1
author:1244038495=
diff:1244038495:1244038443:=23,26c23,26%0a%3c ** You can observe any information of any individual or population at any generation. A simuPOP evolutionary process is completely transparent to you so that you can examine its properties very closely.%0a%3c ** simuPOP is very well documented so that you can find the details of any function and operator you use. Mathematical formula and even implementation details are provided for important genetic factors especially when there are alternative implementations.%0a%3c ** simuPOP is open source so you can always check what is going on under the hood.%0a%3c %0a---%0a> -># You can observe any information of any individual or population at any generation. A simuPOP evolutionary process is completely transparent to you so that you can examine its properties very closely.%0a> -># simuPOP is very well documented so that you can find the details of any function and operator you use. Mathematical formula and even implementation details are provided for important genetic factors especially when there are alternative implementations.%0a> -># simuPOP is open source so you can always check what is going on under the hood.%0a> %0a
host:1244038495=127.0.0.1
author:1244038443=
diff:1244038443:1242696689:=22,26d21%0a%3c # Perhaps most importantly, '''simuPOP is completely''' open to you, in the sense that:%0a%3c -># You can observe any information of any individual or population at any generation. A simuPOP evolutionary process is completely transparent to you so that you can examine its properties very closely.%0a%3c -># simuPOP is very well documented so that you can find the details of any function and operator you use. Mathematical formula and even implementation details are provided for important genetic factors especially when there are alternative implementations.%0a%3c -># simuPOP is open source so you can always check what is going on under the hood.%0a%3c %0a
host:1244038443=127.0.0.1
author:1242696689=
diff:1242696689:1240195045:=40,41c40,41%0a%3c While this claim is generally true (see, however, simuPOP [[Main/RoadMap]] for improvements in this area), the comparison itself hardly makes sense. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a%3c %0a---%0a> While this claim is generally true, the comparison itself hardly makes sense. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a> %0a
host:1242696689=127.0.0.1
author:1240195045=
diff:1240195045:1238256534:=10,11d9%0a%3c # simuPOP supports '''autosome''', '''chromosome X''', '''chromosome Y''', and '''mitochondrial chromosomes''' as a special case of a group of customized chromosome types.%0a%3c %0a
host:1240195045=127.0.0.1
author:1238256534=
diff:1238256534:1236784323:=38,39c38,39%0a%3c While this claim is generally true, the comparison itself hardly makes sense. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a%3c %0a---%0a> Such a claim is '''extremely misleading''' because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a> %0a
host:1238256534=127.0.0.1
author:1236784323=
diff:1236784323:1236784300:=2,3c2,3%0a%3c %25rfloat margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=125%25 http://simupop.sourceforge.net/images/features.jpg%0a%3c %0a---%0a> %25rfloat height=125%25 http://simupop.sourceforge.net/images/features.jpg%0a> %0a
host:1236784323=127.0.0.1
author:1236784300=
diff:1236784300:1236784290:=2,3c2,3%0a%3c %25rfloat height=125%25 http://simupop.sourceforge.net/images/features.jpg%0a%3c %0a---%0a> %25rfloat height=75%25 http://simupop.sourceforge.net/images/features.jpg%0a> %0a
host:1236784300=127.0.0.1
author:1236784290=
diff:1236784290:1236784276:=2,3c2,3%0a%3c %25rfloat height=75%25 http://simupop.sourceforge.net/images/features.jpg%0a%3c %0a---%0a> %25rfloat height=45%25 http://simupop.sourceforge.net/images/features.jpg%0a> %0a
host:1236784290=127.0.0.1
author:1236784276=
diff:1236784276:1236784198:=2,3c2,3%0a%3c %25rfloat height=45%25 http://simupop.sourceforge.net/images/features.jpg%0a%3c %0a---%0a> %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=45%25 http://simupop.sourceforge.net/images/features.jpg%0a> %0a
host:1236784276=127.0.0.1
author:1236784198=
diff:1236784198:1236784154:=2,3c2%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=45%25 http://simupop.sourceforge.net/images/features.jpg%0a%3c %0a---%0a> %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=25px%25 http://simupop.sourceforge.net/images/features.jpg%0a
host:1236784198=127.0.0.1
author:1236784154=
diff:1236784154:1236784141:=2c2%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=25px%25 http://simupop.sourceforge.net/images/features.jpg%0a---%0a> %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=25pt%25 http://simupop.sourceforge.net/images/features.jpg%0a
host:1236784154=127.0.0.1
author:1236784141=
diff:1236784141:1236784119:=2c2%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px height=25pt%25 http://simupop.sourceforge.net/images/features.jpg%0a---%0a> %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 http://simupop.sourceforge.net/images/features.jpg%0a
host:1236784141=127.0.0.1
author:1236784119=
diff:1236784119:1236784082:=2c2%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 http://simupop.sourceforge.net/images/features.jpg%0a---%0a> %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://simupop.sourceforge.net/images/features.jpg]]%0a
host:1236784119=127.0.0.1
author:1236784082=
diff:1236784082:1236783573:=2,4d1%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://simupop.sourceforge.net/images/features.jpg]]%0a%3c !!! Major features%0a%3c %0a
host:1236784082=127.0.0.1
author:1236783573=
diff:1236783573:1236783477:=34,35c34,35%0a%3c Such a claim is '''extremely misleading''' because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, a configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a%3c %0a---%0a> Such a claim is '''extremely misleading''' because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a> %0a
host:1236783573=127.0.0.1
author:1236783477=
diff:1236783477:1236783338:=34,35c34,35%0a%3c Such a claim is '''extremely misleading''' because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts could be found at the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]]. They are usually quite user-friendly because they can get user inputs from command line arguments, configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP) and no knowledge in Python or simuPOP is required to run them.%0a%3c %0a---%0a> Such a claim is '''extremely misleading''' because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts are usually quite user-friendly because they can get user inputs from command line arguments, configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP).%0a> %0a
host:1236783477=127.0.0.1
author:1236783338=
diff:1236783338:1236783316:=34,35c34,35%0a%3c Such a claim is '''extremely misleading''' because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts are usually quite user-friendly because they can get user inputs from command line arguments, configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP).%0a%3c %0a---%0a> Such a claim is extremely misleading because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts are usually quite user-friendly because they can get user inputs from command line arguments, configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP).%0a> %0a
host:1236783338=127.0.0.1
author:1236783316=
diff:1236783316:1236783276:=32,33c32,33%0a%3c The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the major drawback of simuPOP because '''the scripting language interface has a steeper learning curve than the command line (or configuration file) interface of program A'''.%0a%3c %0a---%0a> The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the major drawback of simuPOP because '''the scripting language interface has a steeper learning curve than the command line interface of program A'''.%0a> %0a
host:1236783316=127.0.0.1
author:1236783276=
diff:1236783276:1236783238:=32,33c32,33%0a%3c The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the major drawback of simuPOP because '''the scripting language interface has a steeper learning curve than the command line interface of program A'''.%0a%3c %0a---%0a> The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the '''major drawback of simuPOP''' because '''the scripting language interface has a steeper learning curve than the command line interface of program A'''.%0a> %0a
host:1236783276=127.0.0.1
author:1236783238=
diff:1236783238:1236782896:=30,35c30,31%0a%3c !!! Major drawback of simuPOP?%0a%3c %0a%3c The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the '''major drawback of simuPOP''' because '''the scripting language interface has a steeper learning curve than the command line interface of program A'''.%0a%3c %0a%3c Such a claim is extremely misleading because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. A fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. These scripts are usually quite user-friendly because they can get user inputs from command line arguments, configuration file and a graphic user interface (using the @@simuOpt@@ module of simuPOP).%0a%3c %0a---%0a> The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the '''major drawback of simuPOP''' because '''the scripting language interface has a steeper learning curve than the command line interface of program A'''. Such a claim is extremely misleading because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. The fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. Such scripts can get user input from command line arguments, configuration file and a graphic user interface.%0a> %0a
host:1236783238=127.0.0.1
author:1236782896=
diff:1236782896:1234416971:=28,31c28%0a%3c * simuPOP allows users to '''examine an evolutionary process very closely''' because all simuPOP objects are Python objects that can be assessed using their member functions. For example, users can keep track of genotype at particular loci during evolution. In contrast, other programs work more or less like a black box where only limited types of statistics can be outputted.%0a%3c %0a%3c The scripting interface gives simuPOP the flexibility to simulate almost arbitrary evolutionary scenarios but it has also been frequently quoted as the '''major drawback of simuPOP''' because '''the scripting language interface has a steeper learning curve than the command line interface of program A'''. Such a claim is extremely misleading because it implies that program A and simuPOP perform more or less the same tasks and differ only in their interfaces. This is of course untrue. The fairer comparison would be comparing program A with a simuPOP script that simulates a similar evolutionary scenario. Such scripts can get user input from command line arguments, configuration file and a graphic user interface.%0a%3c %0a---%0a> * simuPOP allows users to '''examine an evolutionary process very closely''' because all simuPOP objects are Python objects that can be assessed using their member functions. For example, users can keep track of genotype at particular loci during evolution. In contrast, other programs work more or less like a black box where only limited types of statistics can be outputted.%0a\ No newline at end of file%0a
host:1236782896=127.0.0.1
author:1234416971=
diff:1234416971:1234416891:=18,19c18,19%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], and [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a> %0a
host:1234416971=127.0.0.1
author:1234416891=
diff:1234416891:1232428511:=18,19c18,19%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]], [[http://sfscode.sourceforge.net | SFS_CODE]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], and [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a> %0a
host:1234416891=127.0.0.1
author:1232428511=
diff:1232428511:1232428483:=18,21c18,19%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], and [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology.%0a%3c %0a%3c Compared to such programs, simuPOP has the following advantages:%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], and [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology. Compared to such programs, simuPOP has the following advantages:%0a> %0a
host:1232428511=127.0.0.1
author:1232428483=
diff:1232428483:1232428408:=1d0%0a%3c (:title simuPOP Features:)%0a16,17d14%0a%3c !!! Other forward-time simulation programs%0a%3c %0a
host:1232428483=127.0.0.1
author:1232428408=
diff:1232428408:1232232581:=3,23c3,23%0a%3c # simuPOP provides '''three types of modules''' that use 1, 8 or 16 bits to store an allele. The binary module (1 bit) is suitable for simulating a large number of SNP markers and the long module (16 bits) is suitable for simulating some population genetics models such as the infinite allele mutation model. simuPOP supports different types of chromosomes such as autosome, sex chromosomes and mitochondrial, with arbitrary number of markers.%0a%3c %0a%3c # An arbitrary number of float numbers, called '''information fields''', can be attached to individuals of a population. For example, information field @@father_idx@@ and @@mother_idx@@ are used to track an individual’s parents, and @@pack_year@@ can be used to simulate an environmental factor associated with smoking.%0a%3c %0a%3c # simuPOP does not impose any limit on number of homologous sets of chromosomes, the size of the genome, or the number of individuals in a population. During an evolutionary process, a population can hold more than one most-recent generations. Pedigrees can be sampled from such '''multi-generation populations'''.%0a%3c %0a%3c # An operator can be native (implemented in C++) or hybrid (Python assisted). A '''hybrid operator''' calls a user-provided Python function to implement arbitrary genetic effects. For example, a hybrid mutator passes to-be-mutated alleles to a user-provided function and mutates these alleles according to the returned values.%0a%3c %0a%3c # simuPOP provides '''more than 70 operators''' that cover all important aspects of genetic studies. These include mutation (''k''-allele, stepwise, generalized stepwise and hybrid), migration (arbitrary, can create new subpopulation), recombination and gene conversion (uniform or nonuniform, sex-specific), quantitative trait (single, multilocus or hybrid), selection (single-locus, additive, multiplicative or hybrid multi-locus models), penetrance (single, multi-locus or hybrid), ascertainment (case–control, affected sibpairs, random, nuclear and large pedigree), statistics calculation (including but not limited to allele, genotype, haplotype, heterozygote number and frequency; expected heterozygosity; di-allelic and multi-allelic , and linkage disequilibrium measures), pedigree tracing, visualization (using [[http://www.r-project.org | R]] or other Python modules) and load/save in simuPOP’s native format and many external formats such as Linkage.%0a%3c %0a%3c # Mating schemes and many operators can work on '''virtual subpopulations''' of a subpopulation. For example, positive assortative mating can be implemented by mating individuals with similar properties such as ancestry. The number of offspring per mating event can be fixed, or can follow a statistical distribution.%0a%3c %0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], [[http://lifesci.rutgers.edu/~heylab/heylabsoftware.htm | FPG]], [[http://nemo2.sourceforge.net/ | Nemo]] and [[http://www2.unil.ch/popgen/softwares/quantinemo/ | quantiNemo]], [[http://chgr.mc.vanderbilt.edu/ritchielab/method.php?method=genomesim | genoSIM and genomeSIMLA]], [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], and [[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/btn317v1 | ForSim]]. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology. Compared to such programs, simuPOP has the following advantages:%0a%3c %0a%3c * The '''scripting interface''' gives simuPOP the flexibility to create arbitrarily complex evolutionary scenarios. For example, it is easy to use simuPOP to explicitly introduce a disease predisposing mutant to an evolving population, trace the allele frequency of them, and restart the simulation if they got lost due to genetic drift.%0a%3c %0a%3c * The Python interface allows users to define '''customized genetic effects in Python'''. In contrast, other programs either do not allow customized effects or force users to modify code at a lower (e.g. C++) level.%0a%3c %0a%3c * simuPOP is the only application that embodies the concept of virtual subpopulation that allows '''evolutions at a finer scale'''. This is required for realistic simulations of complex evolutionary scenarios.%0a%3c %0a%3c * simuPOP allows users to '''examine an evolutionary process very closely''' because all simuPOP objects are Python objects that can be assessed using their member functions. For example, users can keep track of genotype at particular loci during evolution. In contrast, other programs work more or less like a black box where only limited types of statistics can be outputted.%0a\ No newline at end of file%0a---%0a> # simuPOP provides three types of modules that use 1, 8 or 16 bits to store an allele. The binary module (1 bit) is suitable for simulating a large number of SNP markers and the long module (16 bits) is suitable for simulating some population genetics models such as the infinite allele mutation model. simuPOP supports different types of chromosomes such as autosome, sex chromosomes and mitochondrial, with arbitrary number of markers.%0a> %0a> # An arbitrary number of float numbers, called information fields, can be attached to individuals of a population. For example, information field father_idx and mother_idx are used to track an individual’s parents, and pack_year can be used to simulate an environmental factor associated with smoking.%0a> %0a> # simuPOP does not impose any limit on number of homologous sets of chromosomes, the size of the genome, or the number of individuals in a population. During an evolutionary process, a population can hold more than one most-recent generations. Pedigrees can be sampled from such multi-generation populations.%0a> %0a> # An operator can be native (implemented in C++) or hybrid (Python assisted). A hybrid operator calls a user-provided Python function to implement arbitrary genetic effects. For example, a hybrid mutator passes to-be-mutated alleles to a user-provided function and mutates these alleles according to the returned values.%0a> %0a> # simuPOP provides more than 70 operators that cover all important aspects of genetic studies. These include mutation (k-allele, stepwise, generalized stepwise and hybrid), migration (arbitrary, can create new subpopulation), recombination and gene conversion (uniform or nonuniform, sex-specific), quantitative trait (single, multilocus or hybrid), selection (single-locus, additive, multiplicative or hybrid multi-locus models), penetrance (single, multi-locus or hybrid), ascertainment (case–control, affected sibpairs, random, nuclear and large pedigree), statistics calculation (including but not limited to allele, genotype, haplotype, heterozygote number and frequency; expected heterozygosity; bi-allelic and multi-allelic , and linkage disequilibrium measures), pedigree tracing, visualization (using R or other Python modules) and load/save in simuPOP’s native format and many external formats such as Linkage.%0a> %0a> # Mating schemes and many operators can work on virtual subpopulations of a subpopulation. For example, positive assortative mating can be implemented by mating individuals with similar properties such as ancestry. The number of offspring per mating event can be fixed, or can follow a statistical distribution.%0a> %0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], FPG, Nemo and quantiNemo, genoSIM and genomeSIMLA, [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], and ForSim. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology. Compared to such programs, simuPOP has the following advantages:%0a> %0a> * The scripting interface gives simuPOP the flexibility to create arbitrarily complex evolutionary scenarios. For example, it is easy to use simuPOP to explicitly introduce a disease predisposing mutant to an evolving population, trace the allele frequency of them, and restart the simulation if they got lost due to genetic drift.%0a> %0a> * The Python interface allows users to define customized genetic effects in Python. In contrast, other programs either do not allow customized effects or force users to modify code at a lower (e.g. C++) level.%0a> %0a> * simuPOP is the only application that embodies the concept of virtual subpopulation that allows evolutions at a finer scale. This is required for realistic simulations of complex evolutionary scenarios.%0a> %0a> * simuPOP allows users to examine an evolutionary process very closely because all simuPOP objects are Python objects that can be assessed using their member functions. For example, users can keep track of genotype at particular loci during evolution. In contrast, other programs work more or less like a black box where only limited types of statistics can be outputted.%0a\ No newline at end of file%0a
host:1232428408=127.0.0.1
author:1232232581=
diff:1232232581:1232232260:=15,16c15,16%0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include [[http://www.unil.ch/dee/page36926_fr.html | easyPOP]], FPG, Nemo and quantiNemo, genoSIM and genomeSIMLA, [[http://www.ebi.ac.uk/projects/BARGEN/download/FREGEN/documentation_html.html | FreGene]], [[http://webs.uvigo.es/acraaj/GenomePop.htm | GenomePop]], [[http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2323826 | ForwSim]], and ForSim. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology. Compared to such programs, simuPOP has the following advantages:%0a%3c %0a---%0a> A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include easyPOP, FPG, Nemo and quantiNemo, genoSIM and genomeSIMLA, FreGene, GenomePop, ForwSim, and ForSim. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology. Compared to such programs, simuPOP has the following advantages:%0a> %0a
host:1232232581=127.0.0.1
author:1232232260=
diff:1232232260:1232232260:=1,23d0%0a%3c simuPOP offers a long list of features, many of which are unique among all forward-time population genetics simulation programs. The most distinguished features include:%0a%3c %0a%3c # simuPOP provides three types of modules that use 1, 8 or 16 bits to store an allele. The binary module (1 bit) is suitable for simulating a large number of SNP markers and the long module (16 bits) is suitable for simulating some population genetics models such as the infinite allele mutation model. simuPOP supports different types of chromosomes such as autosome, sex chromosomes and mitochondrial, with arbitrary number of markers.%0a%3c %0a%3c # An arbitrary number of float numbers, called information fields, can be attached to individuals of a population. For example, information field father_idx and mother_idx are used to track an individual’s parents, and pack_year can be used to simulate an environmental factor associated with smoking.%0a%3c %0a%3c # simuPOP does not impose any limit on number of homologous sets of chromosomes, the size of the genome, or the number of individuals in a population. During an evolutionary process, a population can hold more than one most-recent generations. Pedigrees can be sampled from such multi-generation populations.%0a%3c %0a%3c # An operator can be native (implemented in C++) or hybrid (Python assisted). A hybrid operator calls a user-provided Python function to implement arbitrary genetic effects. For example, a hybrid mutator passes to-be-mutated alleles to a user-provided function and mutates these alleles according to the returned values.%0a%3c %0a%3c # simuPOP provides more than 70 operators that cover all important aspects of genetic studies. These include mutation (k-allele, stepwise, generalized stepwise and hybrid), migration (arbitrary, can create new subpopulation), recombination and gene conversion (uniform or nonuniform, sex-specific), quantitative trait (single, multilocus or hybrid), selection (single-locus, additive, multiplicative or hybrid multi-locus models), penetrance (single, multi-locus or hybrid), ascertainment (case–control, affected sibpairs, random, nuclear and large pedigree), statistics calculation (including but not limited to allele, genotype, haplotype, heterozygote number and frequency; expected heterozygosity; bi-allelic and multi-allelic , and linkage disequilibrium measures), pedigree tracing, visualization (using R or other Python modules) and load/save in simuPOP’s native format and many external formats such as Linkage.%0a%3c %0a%3c # Mating schemes and many operators can work on virtual subpopulations of a subpopulation. For example, positive assortative mating can be implemented by mating individuals with similar properties such as ancestry. The number of offspring per mating event can be fixed, or can follow a statistical distribution.%0a%3c %0a%3c A number of forward-time simulation programs are available. If we exclude early forward-time simulation applications developed primarily for teaching purposes, notable forward-time simulation programs include easyPOP, FPG, Nemo and quantiNemo, genoSIM and genomeSIMLA, FreGene, GenomePop, ForwSim, and ForSim. These programs are designed with specific applications and specific evolutionary scenarios in mind, and excel in what they are designed for. For some applications, these programs may be easier to use than simuPOP. For example, using a special look-ahead algorithm, ForwSim is among the fastest programs to simulate a standard Wright-Fisher process, and should be used if such a simulation is needed. However, these programs are not flexible enough to be applied to problems outside of their designed application area. For example, none of these programs can be used to study the evolution of a disease predisposing mutant, a process that is of great importance in statistical genetics and genetic epidemiology. Compared to such programs, simuPOP has the following advantages:%0a%3c %0a%3c * The scripting interface gives simuPOP the flexibility to create arbitrarily complex evolutionary scenarios. For example, it is easy to use simuPOP to explicitly introduce a disease predisposing mutant to an evolving population, trace the allele frequency of them, and restart the simulation if they got lost due to genetic drift.%0a%3c %0a%3c * The Python interface allows users to define customized genetic effects in Python. In contrast, other programs either do not allow customized effects or force users to modify code at a lower (e.g. C++) level.%0a%3c %0a%3c * simuPOP is the only application that embodies the concept of virtual subpopulation that allows evolutions at a finer scale. This is required for realistic simulations of complex evolutionary scenarios.%0a%3c %0a%3c * simuPOP allows users to examine an evolutionary process very closely because all simuPOP objects are Python objects that can be assessed using their member functions. For example, users can keep track of genotype at particular loci during evolution. In contrast, other programs work more or less like a black box where only limited types of statistics can be outputted.%0a\ No newline at end of file%0a
host:1232232260=127.0.0.1
