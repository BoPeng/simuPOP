version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.112 Safari/534.30
author=
csum=
ctime=1232321611
host=172.29.30.74
name=Main.GetInvolved
rev=36
targets=Main.MailingList,Main.DevelopmentNotes
text=%25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 http://simupop.sourceforge.net/images/helpNeeded.gif%0a%0a(:toc:)%0a%0a!! Prepare a development environment%0a%0aYou will first need a subversion client. A subversion client is mostly likely already available under *nix system. For windows, you may want to install [[http://tortoisesvn.tigris.org | tortoiseSVN]].%0a%0a* '''Souce code''': Check out simuPOP source using command,%0a%0a->@@> svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a%0a->If you are using TortoiseSVN, right-click and select SVN checkout ...%0a%0a* '''Boost C++ library''': Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_37_0@@.%0a%0a* '''SWIG''': If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended. Under windows, you need to install swigwin, and add the path to the executable to an environment variable @@$PATH@@ (Control Panel -> system -> advanced -> Environment Variables).%0a%0a* '''Scons''': Although the standard @@Python setup.py@@ process can be used, it is recommended that you download and install [[http://www.scons.org/ | scons]] to build simuPOP. Unlike the Python @@distutil.py@@ module, scons is a real build system that can build several files at the same time, and ignore files that have already been built. Under windows, you need to add @@c:\pythonXX\scripts@@ to environment variable @@$PATH@@.%0a%0a* '''C++ Compiler''': Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you will need to can get a copy of Visual Studio 2008 Professional (needs service pack 1). The free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]] could be used for simuPOP 1.0.5 or earlier but not 1.0.6 or later because it does not support openMP. Note that Visual Studio 2008 only works with Python 2.6 and you will have to purchase a copy of ''Visual Stuidio.NET 2003'' for previous versions of Python.%0a%0a* '''Python header files''': The Python header files are usually installed with Python but you should install @@python-devel@@ or similar packages if this file is unavailable.%0a%0a* '''zlib header files''' (*nix systems only): zlib and its header file zlib.h are usually available under a *nix system. However, for a Ubuntu system, you will need to install the @@zlib1g-dev@@ package to get this header file. Please install package @@build-essential@@ if you still get missing header files.%0a%0a%0a!! Build the subversion version of simuPOP %0a%0asimuPOP can be compiled by python distutil module, python distribute module or scons. They have their own advantage and disadvantages:%0a%0a!!! distutils %0a%0aFor all versions of python, you can compile simuPOP using command%0a%0a->@@> python setup.py install@@%0a%0aand Python will call @@swig@@ to generate Python wrappers and build simuPOP. The problem with this approach is that you will have to compile all files each time when you modified the source code, which can be very slow.%0a%0a!!! distribute%0a%0aIf you installed python distribute module, you can run%0a%0a->@@> python setup.py develop@@%0a%0ato build and install simuPOP. This will create a link in the python dist-package directory that links back to the source directory. The compiled modules will be put in the @@src@@ directory. In order to test simuPOP in place, you will need to create a symbolic link %0a%0a->@@> ln -s src simuPOP%0a%0aso that the source directory appears to contain the simuPOP package (with @@__init__.py@@ underneath). This method works for all versions of Python but does not support parallel build.%0a%0a!!! scons%0a%0aIf you have scons installed, you can run%0a%0a->@@> scons install@@%0a%0aSeveral command line options are available, they are%0a%0a** @@-j n@@: running @@n@@ concurrent processes.%0a%0a** @@prefix=/path/to/local/dir@@: install simuPOP to a local directory.%0a%0a** One or more of @@std@@, @@op@@, @@la@@, @@laop@@, @@ba@@ and @@baop@@: These correspond to the standard, long and short allele and their optimized versions. scons will only build specified modules if their names are provided in the command line. When you are testing a program, it is a good idea to build only the standard module to save building time.%0a%0aThis method is most flexible and fast, but it does not support Python 3.x.%0a%0a!! Build standalone executables for debugging purposes%0a%0aUnder the control of a macro @@STANDALONE_EXECUTABLE@@, simuPOP can be linked to a @@main.cpp@@ file and execute as a standalone application. This allows easier profiling and debugging although it can be cumbersome to write C/C++ versions of test scripts in @@main.cpp@@. Also, because the standalone version does not involve a Python interpreter, features related to Python (such as evaluation of Python expression) are unavailable in such executables. Anyway, to build such executables, you can use%0a%0a** @@scons std_exe@@%0a%0aor other targets such as op_exe. The executables are saved in directory %25%25build%25%25 in names such as @@simuPOP_std_exe@@. These files will not be installed with simuPOP.%0a%0a!! Using MSVC to build standalone versions of simuPOP%0a%0aBefore use Visual Studio 2008 to run SimuPOP, you should check the parameter and run command as follows:%0a** Run ‘scons install’%0a** Open the visual studio project, ‘simPOP.vcproj’. %0a** Check properties in the visual studio project as follows:%0a*** Go to simuPOP Property Pages -> Configuration Properties: C/C++ -> General -> Addition Include directories: @@“.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”@@%0a*** Linker -> General -> Additional Library Directories: @@“build\std_common;C:\Python27\libs”@@ %0a*** Linker ->  Input -> Additional Dependencies: @@“python27.lib common.lib”@@%0a%0a** Check the version of Python and boost version. If they are not the same as your machine, change them.%0a%0a** Run the visual studio 2008 in release mode with your platform (x64 or win32)%0a%0a!! Send a patch to the mailing list%0a%0aAfter you have modified simuPOP source and added your own feature, it might be a good idea to merge your changes to the simuPOP trunk (main branch) so that it can become part of the official simuPOP release. In addition to the possibility of benefiting other users, the immediate benefit to you is that your code will be examined more carefully, and if it gets accepted, you do not have to patch future simuPOP versions when you upgrade simuPOP.%0a%0aThe process to generate a patch is as easy as%0a%0a->@@$ svn diff > patch.diff@@%0a%0aSimply email this patch to the simuPOP [[Main/mailing list]] with a detailed explanation.%0a%0a!! More readings%0a%0aYou can refer to page [[Main/DevelopmentNotes]] for more details on how simuPOP manages its documentation and releases.%0a
time=1310052202
author:1310052202=
diff:1310052202:1310052163:=3,4d2%0a%3c (:toc:)%0a%3c %0a
host:1310052202=172.29.30.74
author:1310052163=
diff:1310052163:1310052138:=2a3,13%0a> !! Your help is needed!%0a> %0a> simuPOP is a large and evolving project and it needs your help in many ways. Even if you are not a C++ or Python expert, you can help simuPOP by %0a> * '''sharing''' your experience with simuPOP,%0a> * '''reporting''' bugs in simuPOP programs and documentations,%0a> * '''requesting''' features for your specific application,%0a> * '''contributing''' your script to the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]], and%0a> * '''suggesting''' ways to improve simuPOP, e.g. better ways to store a large amount of genotypes.%0a> %0a> If you know how to program in C++ and/or Python and cannot wait for a new feature to appear, or if you would like to experiment some new feature by yourself, you can check out the subversion version of simuPOP and compile.%0a> %0a
host:1310052163=172.29.30.67
author:1310052138=
diff:1310052138:1299098110:=39,44c39,40%0a%3c simuPOP can be compiled by python distutil module, python distribute module or scons. They have their own advantage and disadvantages:%0a%3c %0a%3c !!! distutils %0a%3c %0a%3c For all versions of python, you can compile simuPOP using command%0a%3c %0a---%0a> If you do not have scons, you can simply run%0a> %0a47,64c43,44%0a%3c and Python will call @@swig@@ to generate Python wrappers and build simuPOP. The problem with this approach is that you will have to compile all files each time when you modified the source code, which can be very slow.%0a%3c %0a%3c !!! distribute%0a%3c %0a%3c If you installed python distribute module, you can run%0a%3c %0a%3c ->@@> python setup.py develop@@%0a%3c %0a%3c to build and install simuPOP. This will create a link in the python dist-package directory that links back to the source directory. The compiled modules will be put in the @@src@@ directory. In order to test simuPOP in place, you will need to create a symbolic link %0a%3c %0a%3c ->@@> ln -s src simuPOP%0a%3c %0a%3c so that the source directory appears to contain the simuPOP package (with @@__init__.py@@ underneath). This method works for all versions of Python but does not support parallel build.%0a%3c %0a%3c !!! scons%0a%3c %0a%3c If you have scons installed, you can run%0a%3c %0a---%0a> and Python will call @@swig@@ to generate Python wrappers and build simuPOP. Otherwise, run%0a> %0a75,76d54%0a%3c This method is most flexible and fast, but it does not support Python 3.x.%0a%3c %0a
host:1310052138=172.29.30.67
author:1299098110=
diff:1299098110:1299098049:=57,62c57,62%0a%3c Under the control of a macro @@STANDALONE_EXECUTABLE@@, simuPOP can be linked to a @@main.cpp@@ file and execute as a standalone application. This allows easier profiling and debugging although it can be cumbersome to write C/C++ versions of test scripts in @@main.cpp@@. Also, because the standalone version does not involve a Python interpreter, features related to Python (such as evaluation of Python expression) are unavailable in such executables. Anyway, to build such executables, you can use%0a%3c %0a%3c ** @@scons std_exe@@%0a%3c %0a%3c or other targets such as op_exe. The executables are saved in directory %25%25build%25%25 in names such as @@simuPOP_std_exe@@. These files will not be installed with simuPOP.%0a%3c %0a---%0a> Under the control of a macro %25%25STANDALONE_EXECUTABLE%25%25, simuPOP can be linked to a %25%25main.cpp%25%25 file and execute as a standalone application. This allows easier profiling and debugging although it can be cumbersome to write C/C++ versions of test scripts in %25%25main.cpp%25%25. Also, because the standalone version does not involve a Python interpreter, features related to Python (such as evaluation of Python expression) are unavailable in such executables. Anyway, to build such executables, you can use%0a> %0a> ** scons std_exe%0a> %0a> or other targets such as op_exe. The executables are saved in directory %25%25build%25%25 in names such as %25%25simuPOP_std_exe%25%25. These files will not be installed with simuPOP.%0a> %0a69,72c69,72%0a%3c *** Go to simuPOP Property Pages -> Configuration Properties: C/C++ -> General -> Addition Include directories: @@“.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”@@%0a%3c *** Linker -> General -> Additional Library Directories: @@“build\std_common;C:\Python27\libs”@@ %0a%3c *** Linker ->  Input -> Additional Dependencies: @@“python27.lib common.lib”@@%0a%3c %0a---%0a> *** Go to simuPOP Property Pages -> Configuration Properties: C/C++ -> General -> Addition Include directories: %25%25“.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”%25%25%0a> *** Linker -> General -> Additional Library Directories: %25%25“build\std_common;C:\Python27\libs”%25%25 %0a> *** Linker ->  Input -> Additional Dependencies: %25%25“python27.lib common.lib”%25%25%0a> %0a
host:1299098110=172.29.30.66
author:1299098049=
diff:1299098049:1299098006:=69,72c69,72%0a%3c *** Go to simuPOP Property Pages -> Configuration Properties: C/C++ -> General -> Addition Include directories: %25%25“.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”%25%25%0a%3c *** Linker -> General -> Additional Library Directories: %25%25“build\std_common;C:\Python27\libs”%25%25 %0a%3c *** Linker ->  Input -> Additional Dependencies: %25%25“python27.lib common.lib”%25%25%0a%3c %0a---%0a> *** Go to simuPOP Property Pages -> Configuration Properties: C/C++ -> General -> Addition Include directories: “.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”%0a> *** Linker -> General -> Additional Library Directories: “build\std_common;C:\Python27\libs” %0a> *** Linker ->  Input -> Additional Dependencies: “python27.lib common.lib”%0a> %0a
host:1299098049=172.29.30.73
author:1299098006=
diff:1299098006:1299097657:=55,64c55,56%0a%3c !! Build standalone executables for debugging purposes%0a%3c %0a%3c Under the control of a macro %25%25STANDALONE_EXECUTABLE%25%25, simuPOP can be linked to a %25%25main.cpp%25%25 file and execute as a standalone application. This allows easier profiling and debugging although it can be cumbersome to write C/C++ versions of test scripts in %25%25main.cpp%25%25. Also, because the standalone version does not involve a Python interpreter, features related to Python (such as evaluation of Python expression) are unavailable in such executables. Anyway, to build such executables, you can use%0a%3c %0a%3c ** scons std_exe%0a%3c %0a%3c or other targets such as op_exe. The executables are saved in directory %25%25build%25%25 in names such as %25%25simuPOP_std_exe%25%25. These files will not be installed with simuPOP.%0a%3c %0a%3c !! Using MSVC to build standalone versions of simuPOP%0a%3c %0a---%0a> !! Using MSVC to build a single executable fur debugging purposes.%0a> %0a
host:1299098006=172.29.30.72
author:1299097657=
diff:1299097657:1299097610:=62,64c62,63%0a%3c *** Linker -> General -> Additional Library Directories: “build\std_common;C:\Python27\libs” %0a%3c *** Linker ->  Input -> Additional Dependencies: “python27.lib common.lib”%0a%3c %0a---%0a> *** Linker -> General -> Additional Library Directories: “build\std_common;C:\Python27\libs” Linker ->  Input -> Additional Dependencies: “python27.lib common.lib”%0a> %0a
host:1299097657=172.29.30.69
author:1299097610=
diff:1299097610:1299097560:=61,63c61,68%0a%3c *** Go to simuPOP Property Pages -> Configuration Properties: C/C++ -> General -> Addition Include directories: “.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”%0a%3c *** Linker -> General -> Additional Library Directories: “build\std_common;C:\Python27\libs” Linker ->  Input -> Additional Dependencies: “python27.lib common.lib”%0a%3c %0a---%0a> *** Go to simuPOP Property Pages -> Configuration Properties:%0a> C/C++ -> General -> Addition Include directories: %0a> “.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”%0a> Linker -> General -> Additional Library Directories:%0a> “build\std_common;C:\Python27\libs”%0a> Linker ->  Input -> Additional Dependencies:%0a> “python27.lib common.lib”%0a> %0a
host:1299097610=172.29.30.70
author:1299097560=
diff:1299097560:1298313456:=55,72d54%0a%3c !! Using MSVC to build a single executable fur debugging purposes.%0a%3c %0a%3c Before use Visual Studio 2008 to run SimuPOP, you should check the parameter and run command as follows:%0a%3c ** Run ‘scons install’%0a%3c ** Open the visual studio project, ‘simPOP.vcproj’. %0a%3c ** Check properties in the visual studio project as follows:%0a%3c *** Go to simuPOP Property Pages -> Configuration Properties:%0a%3c C/C++ -> General -> Addition Include directories: %0a%3c “.;gsl;boost_1_45_0;win32;"win32\zlib-1.2.3";C:\Python27\include”%0a%3c Linker -> General -> Additional Library Directories:%0a%3c “build\std_common;C:\Python27\libs”%0a%3c Linker ->  Input -> Additional Dependencies:%0a%3c “python27.lib common.lib”%0a%3c %0a%3c ** Check the version of Python and boost version. If they are not the same as your machine, change them.%0a%3c %0a%3c ** Run the visual studio 2008 in release mode with your platform (x64 or win32)%0a%3c %0a
host:1299097560=172.29.30.68
author:1298313456=
diff:1298313456:1262707050:=30,31c30,31%0a%3c * '''C++ Compiler''': Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you will need to can get a copy of Visual Studio 2008 Professional (needs service pack 1). The free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]] could be used for simuPOP 1.0.5 or earlier but not 1.0.6 or later because it does not support openMP. Note that Visual Studio 2008 only works with Python 2.6 and you will have to purchase a copy of ''Visual Stuidio.NET 2003'' for previous versions of Python.%0a%3c %0a---%0a> * '''C++ Compiler''': Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6 and you will have to purchase a copy of ''Visual Stuidio.NET 2003'' for previous versions of Python.%0a> %0a
host:1298313456=172.29.30.76
author:1262707050=
diff:1262707050:1248903025:=64,67d63%0a%3c %0a%3c !! More readings%0a%3c %0a%3c You can refer to page [[Main/DevelopmentNotes]] for more details on how simuPOP manages its documentation and releases.%0a
host:1262707050=127.0.0.1
author:1248903025=
diff:1248903025:1248902987:=26,27c26,27%0a%3c * '''SWIG''': If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended. Under windows, you need to install swigwin, and add the path to the executable to an environment variable @@$PATH@@ (Control Panel -> system -> advanced -> Environment Variables).%0a%3c %0a---%0a> * '''SWIG''': If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended. Under windows, you need to install swigwin, and add the path to the executable to an environment variable $PATH (Control Panel -> system -> advanced -> Environment Variables).%0a> %0a
host:1248903025=127.0.0.1
author:1248902987=
diff:1248902987:1248900374:=22,23c22,23%0a%3c ->If you are using TortoiseSVN, right-click and select SVN checkout ...%0a%3c %0a---%0a> If you are using TortoiseSVN, right-click and select SVN checkout ...%0a> %0a
host:1248902987=127.0.0.1
author:1248900374=
diff:1248900374:1245154294:=22,23d21%0a%3c If you are using TortoiseSVN, right-click and select SVN checkout ...%0a%3c %0a26,29c24,27%0a%3c * '''SWIG''': If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended. Under windows, you need to install swigwin, and add the path to the executable to an environment variable $PATH (Control Panel -> system -> advanced -> Environment Variables).%0a%3c %0a%3c * '''Scons''': Although the standard @@Python setup.py@@ process can be used, it is recommended that you download and install [[http://www.scons.org/ | scons]] to build simuPOP. Unlike the Python @@distutil.py@@ module, scons is a real build system that can build several files at the same time, and ignore files that have already been built. Under windows, you need to add @@c:\pythonXX\scripts@@ to environment variable @@$PATH@@.%0a%3c %0a---%0a> * '''SWIG''': If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended.%0a> %0a> * '''Scons''': Although the standard @@Python setup.py@@ process can be used, it is recommended that you download and install [[http://www.scons.org/ | scons]] to build simuPOP. Unlike the Python @@distutil.py@@ module, scons is a real build system that can build several files at the same time, and ignore files that have already been built.%0a> %0a
host:1248900374=127.0.0.1
author:1245154294=
diff:1245154294:1244899049:=32,34c32,34%0a%3c * '''zlib header files''' (*nix systems only): zlib and its header file zlib.h are usually available under a *nix system. However, for a Ubuntu system, you will need to install the @@zlib1g-dev@@ package to get this header file. Please install package @@build-essential@@ if you still get missing header files.%0a%3c %0a%3c %0a---%0a> * '''zlib header files''' (*nix systems only): zlib and its header file zlib.h are usually available under a *nix system. However, for a Ubuntu system, you will need to install the @@build-essential@@ package to get this header file.%0a> %0a> %0a
host:1245154294=127.0.0.1
author:1244899049=
diff:1244899049:1243975834:=30,34d29%0a%3c * '''Python header files''': The Python header files are usually installed with Python but you should install @@python-devel@@ or similar packages if this file is unavailable.%0a%3c %0a%3c * '''zlib header files''' (*nix systems only): zlib and its header file zlib.h are usually available under a *nix system. However, for a Ubuntu system, you will need to install the @@build-essential@@ package to get this header file.%0a%3c %0a%3c %0a
host:1244899049=127.0.0.1
author:1243975834=
diff:1243975834:1243975759:=12,13c12,13%0a%3c If you know how to program in C++ and/or Python and cannot wait for a new feature to appear, or if you would like to experiment some new feature by yourself, you can check out the subversion version of simuPOP and compile.%0a%3c %0a---%0a> If you cannot wait for a new feature to appear in the next release, or if you would like to experiment some new feature by yourself, you can check out the subversion version of simuPOP and compile.%0a> %0a
host:1243975834=127.0.0.1
author:1243975759=
diff:1243975759:1243974636:=1,2d0%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 http://simupop.sourceforge.net/images/helpNeeded.gif%0a%3c %0a
host:1243975759=127.0.0.1
author:1243974636=
diff:1243974636:1243974596:=52,53c52,53%0a%3c ->@@$ svn diff > patch.diff@@%0a%3c %0a---%0a> ->@@> svn diff > patch.diff@@%0a> %0a
host:1243974636=127.0.0.1
author:1243974596=
diff:1243974596:1243974528:=2a3,4%0a> simuPOP is an open source project, which means that every aspect of the development process is open to public. From this website, you can find the source code of simuPOP, with detailed information on how to build and install it on different operating systems. From the [[http://simupop.svn.sourceforge.net/viewvc/simupop/trunk/ |  subversion activities ]], you can even know what has been done to simuPOP, and when.%0a> %0a
host:1243974596=127.0.0.1
author:1243974528=
diff:1243974528:1242960537:=1,2d0%0a%3c !! Your help is needed!%0a%3c %0a5,11d2%0a%3c simuPOP is a large and evolving project and it needs your help in many ways. Even if you are not a C++ or Python expert, you can help simuPOP by %0a%3c * '''sharing''' your experience with simuPOP,%0a%3c * '''reporting''' bugs in simuPOP programs and documentations,%0a%3c * '''requesting''' features for your specific application,%0a%3c * '''contributing''' your script to the [[http://simupop.sourceforge.net/cookbook | simuPOP online cookbook]], and%0a%3c * '''suggesting''' ways to improve simuPOP, e.g. better ways to store a large amount of genotypes.%0a%3c %0a18,19c9,10%0a%3c * '''Souce code''': Check out simuPOP source using command,%0a%3c %0a---%0a> * Check out simuPOP source using command,%0a> %0a22,29c13,20%0a%3c * '''Boost C++ library''': Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_37_0@@.%0a%3c %0a%3c * '''SWIG''': If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended.%0a%3c %0a%3c * '''Scons''': Although the standard @@Python setup.py@@ process can be used, it is recommended that you download and install [[http://www.scons.org/ | scons]] to build simuPOP. Unlike the Python @@distutil.py@@ module, scons is a real build system that can build several files at the same time, and ignore files that have already been built.%0a%3c %0a%3c * '''C++ Compiler''': Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6 and you will have to purchase a copy of ''Visual Stuidio.NET 2003'' for previous versions of Python.%0a%3c %0a---%0a> * Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_37_0@@.%0a> %0a> * If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended.%0a> %0a> * Although the standard @@Python setup.py@@ process can be used, it is recommended that you download and install [[http://www.scons.org/ | scons]] to build simuPOP. Unlike the Python @@distutil.py@@ module, scons is a real build system that can build several files at the same time, and ignore files that have already been built.%0a> %0a> * Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6 and you will have to purchase a copy of ''Visual Stuidio.NET 2003'' for previous versions of Python.%0a> %0a
host:1243974528=127.0.0.1
author:1242960537=
diff:1242960537:1242412378:=15,16c15,16%0a%3c * If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 and later is recommended.%0a%3c %0a---%0a> * If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 is currently used for all platforms. Other versions of swig might or might not work (1.3.39 DOES NOT work because @@swigpyrun.h@@ generated by this version is incompatible with the one generated by 1.3.36).%0a> %0a
host:1242960537=127.0.0.1
author:1242412378=
diff:1242412378:1236865883:=15,16c15,16%0a%3c * If not already installed, download and install [[http://www.swig.org | SWIG ]]. Swig version 1.3.36 is currently used for all platforms. Other versions of swig might or might not work (1.3.39 DOES NOT work because @@swigpyrun.h@@ generated by this version is incompatible with the one generated by 1.3.36).%0a%3c %0a---%0a> * If not already installed, download and install [[http://www.swig.org | SWIG ]]. A version >= 1.3.36 is recommended, but an older version might also work.%0a> %0a
host:1242412378=127.0.0.1
author:1236865883=
diff:1236865883:1236789936:=13,16c13,16%0a%3c * Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_37_0@@.%0a%3c %0a%3c * If not already installed, download and install [[http://www.swig.org | SWIG ]]. A version >= 1.3.36 is recommended, but an older version might also work.%0a%3c %0a---%0a> * Read the front portion of @@setup.py@@ and see the supported boost version. Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_37_0@@.%0a> %0a> * Download and install [[http://www.swig.org | SWIG ]], a version >= 1.3.36 is recommended, but an older version might also work.%0a> %0a19,20c19,20%0a%3c * Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6 and you will have to purchase a copy of ''Visual Stuidio.NET 2003'' for previous versions of Python.%0a%3c %0a---%0a> * Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6.%0a> %0a37,38c37,38%0a%3c ** One or more of @@std@@, @@op@@, @@la@@, @@laop@@, @@ba@@ and @@baop@@: These correspond to the standard, long and short allele and their optimized versions. scons will only build specified modules if their names are provided in the command line. When you are testing a program, it is a good idea to build only the standard module to save building time.%0a%3c %0a---%0a> ** One or more of @@std@@, @@op@@, @@la@@, @@laop@@, @@ba@@ and @@baop@@: These correspond to the standard, long and short allele and their optimized versions. When you are testing a program, it is a good idea to build only the standard module to save building time.%0a> %0a41,44c41,44%0a%3c After you have modified simuPOP source and added your own feature, it might be a good idea to merge your changes to the simuPOP trunk (main branch) so that it can become part of the official simuPOP release. In addition to the possibility of benefiting other users, the immediate benefit to you is that your code will be examined more carefully, and if it gets accepted, you do not have to patch future simuPOP versions when you upgrade simuPOP.%0a%3c %0a%3c The process to generate a patch is as easy as%0a%3c %0a---%0a> After you have modified simuPOP source and added your own feature, it might be a good idea to merge your change to the simuPOP trunk (main branch). In addition to the possibility of benefiting other users, the immediate benefit to you is that your code will be examined more carefully, and if it gets accepted, you do not have to patch future simuPOP versions when you upgrade simuPOP.%0a> %0a> The process to send a patch is as easy as%0a> %0a
host:1236865883=127.0.0.1
author:1236789936=
diff:1236789936:1235937744:=19,20c19,20%0a%3c * Get a C++ compiler. This is usually not a problem for Linux/Solaris/MacOS systems because GNU gcc/c++ is widely available on these operating systems. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6.%0a%3c %0a---%0a> * Get a C++ compiler. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6.%0a> %0a
host:1236789936=127.0.0.1
author:1235937744=
diff:1235937744:1235687299:=13,14c13,14%0a%3c * Read the front portion of @@setup.py@@ and see the supported boost version. Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_37_0@@.%0a%3c %0a---%0a> * Read the front portion of @@setup.py@@ and see the supported boost version. Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_27_0@@.%0a> %0a
host:1235937744=127.0.0.1
author:1235687299=
diff:1235687299:1235338110:=11,12c11,12%0a%3c ->@@> svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a%3c %0a---%0a> ->@@$ svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a> %0a25,26c25,26%0a%3c ->@@> python setup.py install@@%0a%3c %0a---%0a> ->@@$ python setup.py install@@%0a> %0a29,30c29,30%0a%3c ->@@> scons install@@%0a%3c %0a---%0a> ->@@$ scons install@@%0a> %0a45,46c45,46%0a%3c ->@@> svn diff > patch.diff@@%0a%3c %0a---%0a> ->@@$ svn diff > patch.diff@@%0a> %0a
host:1235687299=127.0.0.1
author:1235338110=
diff:1235338110:1232467238:=7,8c7,8%0a%3c You will first need a subversion client. A subversion client is mostly likely already available under *nix system. For windows, you may want to install [[http://tortoisesvn.tigris.org | tortoiseSVN]].%0a%3c %0a---%0a> You will first need a subversion client. A subversion client is mostly likely already available under *nix system. For windows, you may want to install [[tortoisesvn.tigris.org | tortoiseSVN]].%0a> %0a
host:1235338110=127.0.0.1
author:1232467238=
diff:1232467238:1232467208:=34d33%0a%3c %0a36d34%0a%3c %0a
host:1232467238=127.0.0.1
author:1232467208=
diff:1232467208:1232324620:=19,20c19,20%0a%3c * Get a C++ compiler. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]]. Note that this version only works with Python 2.6.%0a%3c %0a---%0a> * Get a C++ compiler. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]].%0a> %0a
host:1232467208=127.0.0.1
author:1232324620=
diff:1232324620:1232324584:=11,12c11,12%0a%3c ->@@$ svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a%3c %0a---%0a> ->@@> svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a> %0a25,26c25,26%0a%3c ->@@$ python setup.py install@@%0a%3c %0a---%0a> ->@@> python setup.py install@@%0a> %0a29,30c29,30%0a%3c ->@@$ scons install@@%0a%3c %0a---%0a> ->@@> scons install@@%0a> %0a43,44c43,44%0a%3c ->@@$ svn diff > patch.diff@@%0a%3c %0a---%0a> ->@@> svn diff > patch.diff@@%0a> %0a
host:1232324620=127.0.0.1
author:1232324584=
diff:1232324584:1232322523:=25,26c25,26%0a%3c ->@@> python setup.py install@@%0a%3c %0a---%0a> ->@@> python setup.py install%0a> %0a
host:1232324584=127.0.0.1
author:1232322523=
diff:1232322523:1232322504:=43,44c43,44%0a%3c ->@@> svn diff > patch.diff@@%0a%3c %0a---%0a> =>@@> svn diff > patch.diff@@%0a> %0a
host:1232322523=127.0.0.1
author:1232322504=
diff:1232322504:1232322038:=33,36c33,36%0a%3c ** @@-j n@@: running @@n@@ concurrent processes.%0a%3c ** @@prefix=/path/to/local/dir@@: install simuPOP to a local directory.%0a%3c ** One or more of @@std@@, @@op@@, @@la@@, @@laop@@, @@ba@@ and @@baop@@: These correspond to the standard, long and short allele and their optimized versions. When you are testing a program, it is a good idea to build only the standard module to save building time.%0a%3c %0a---%0a> ** @@-j n@@ running @@n@@ concurrent processes.%0a> ** @@prefix=/path/to/local/dir@@ install simuPOP to a local directory.%0a> ** One or more of @@std@@, @@op@@, @@la@@, @@laop@@, @@ba@@ and @@baop@@. These correspond to the standard, long and short allele and their optimized versions. When you are testing a program, it is a good idea to build only the standard module to save building time.%0a> %0a38,45d37%0a%3c %0a%3c After you have modified simuPOP source and added your own feature, it might be a good idea to merge your change to the simuPOP trunk (main branch). In addition to the possibility of benefiting other users, the immediate benefit to you is that your code will be examined more carefully, and if it gets accepted, you do not have to patch future simuPOP versions when you upgrade simuPOP.%0a%3c %0a%3c The process to send a patch is as easy as%0a%3c %0a%3c =>@@> svn diff > patch.diff@@%0a%3c %0a%3c Simply email this patch to the simuPOP [[Main/mailing list]] with a detailed explanation.%0a
host:1232322504=127.0.0.1
author:1232322038=
diff:1232322038:1232321611:=5,6c5,6%0a%3c !! Prepare a development environment%0a%3c %0a---%0a> !! Build the subversion version of simuPOP %0a> %0a11,12c11,12%0a%3c ->@@> svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a%3c %0a---%0a> ->@@svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a> %0a19,37c19,20%0a%3c * Get a C++ compiler. Under windows, you can get a copy of the free Visual C++ Express edition from [[http://www.microsoft.com/express/vc/ | here]].%0a%3c %0a%3c !! Build the subversion version of simuPOP %0a%3c %0a%3c If you do not have scons, you can simply run%0a%3c %0a%3c ->@@> python setup.py install%0a%3c %0a%3c and Python will call @@swig@@ to generate Python wrappers and build simuPOP. Otherwise, run%0a%3c %0a%3c ->@@> scons install@@%0a%3c %0a%3c Several command line options are available, they are%0a%3c %0a%3c ** @@-j n@@ running @@n@@ concurrent processes.%0a%3c ** @@prefix=/path/to/local/dir@@ install simuPOP to a local directory.%0a%3c ** One or more of @@std@@, @@op@@, @@la@@, @@laop@@, @@ba@@ and @@baop@@. These correspond to the standard, long and short allele and their optimized versions. When you are testing a program, it is a good idea to build only the standard module to save building time.%0a%3c %0a%3c !! Send a patch to the mailing list%0a---%0a> %0a> %0a
host:1232322038=127.0.0.1
author:1232321611=
diff:1232321611:1232321611:=1,20d0%0a%3c simuPOP is an open source project, which means that every aspect of the development process is open to public. From this website, you can find the source code of simuPOP, with detailed information on how to build and install it on different operating systems. From the [[http://simupop.svn.sourceforge.net/viewvc/simupop/trunk/ |  subversion activities ]], you can even know what has been done to simuPOP, and when.%0a%3c %0a%3c If you cannot wait for a new feature to appear in the next release, or if you would like to experiment some new feature by yourself, you can check out the subversion version of simuPOP and compile.%0a%3c %0a%3c !! Build the subversion version of simuPOP %0a%3c %0a%3c You will first need a subversion client. A subversion client is mostly likely already available under *nix system. For windows, you may want to install [[tortoisesvn.tigris.org | tortoiseSVN]].%0a%3c %0a%3c * Check out simuPOP source using command,%0a%3c %0a%3c ->@@svn co https://simupop.svn.sourceforge.net/svnroot/simupop/trunk simuPOP@@%0a%3c %0a%3c * Read the front portion of @@setup.py@@ and see the supported boost version. Download the boost C++ library from [[http://www.boost.org/ | the boost website]], decompress it to simuPOP's source directory. It should appear as a directory such as @@boost_1_27_0@@.%0a%3c %0a%3c * Download and install [[http://www.swig.org | SWIG ]], a version >= 1.3.36 is recommended, but an older version might also work.%0a%3c %0a%3c * Although the standard @@Python setup.py@@ process can be used, it is recommended that you download and install [[http://www.scons.org/ | scons]] to build simuPOP. Unlike the Python @@distutil.py@@ module, scons is a real build system that can build several files at the same time, and ignore files that have already been built.%0a%3c %0a%3c %0a%3c %0a
host:1232321611=127.0.0.1
