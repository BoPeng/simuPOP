version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5 (.NET CLR 3.5.30729)
author=
csum=
ctime=1232170129
host=127.0.0.1
name=Main.Home
rev=39
targets=
text=(:title What is simuPOP?:)%0a!! Introduction%0a%0asimuPOP is a '''general-purpose forward-time population genetics simulation environment'''. It is%0a%0a* A '''population genetics simulation''' program: simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a ''non-overlap generation'' model, aged structured populations can be mimicked using special non-random mating schemes.%0a%0a* '''Forward-time''':  Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically  which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a%0a* '''General-purpose''': Many population genetics simulation programs are available. However, they are all designed for specific types of evolutionary scenarios and are limited in their ability to simulate complex evolutionary processes. ''simuPOP'' is the only general-purpose simulation program that is capable of simulation arbitrarily complex evolutionary scenarios.%0a%0a* A '''simulation environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%0a!! How to cite simuPOP%0a%0aIf you use simuPOP for your research, please cite it using:%0a%0a->Bo Peng and Marek Kimmal (2005) '''simuPOP: a forward-time population genetics simulation environment'''. ''bioinformatics'', 21(18): 3686-3687. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a%0aand optionally (if nonrandom mating is used)%0a%0a->Bo Peng and Christopher Amos (2008) '''Forward-time simulations of nonrandom mating populations using simuPOP'''. ''bioinformatics'', 24 (11)” 1408-1409. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/24/11/1408 | Link]])%0a%0a
time=1232260845
title=What is simuPOP?
author:1232260845=
diff:1232260845:1232260801:=2,3c2%0a%3c !! Introduction%0a%3c %0a---%0a> %25newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 | Attach:download.jpg]]%0a
host:1232260845=127.0.0.1
author:1232260801=
diff:1232260801:1232260728:=2c2%0a%3c %25newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 | Attach:download.jpg]]%0a---%0a> %0a
host:1232260801=127.0.0.1
author:1232260728=
diff:1232260728:1232260520:=2a3,4%0a> %25newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a> %0a
host:1232260728=127.0.0.1
author:1232260520=
diff:1232260520:1232259814:=3,4c3,4%0a%3c %25newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a%3c %0a---%0a> %25newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=5px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a> %0a
host:1232260520=127.0.0.1
author:1232259814=
diff:1232259814:1232259801:=
host:1232259814=127.0.0.1
author:1232259801=
diff:1232259801:1232259765:=3,4c3,4%0a%3c %25newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=5px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a%3c %0a---%0a> %25newwin right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a> %0a
host:1232259801=127.0.0.1
author:1232259765=
diff:1232259765:1232259749:=3,4c3,4%0a%3c %25newwin right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a%3c %0a---%0a> %25right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a> %0a
host:1232259765=127.0.0.1
author:1232259749=
diff:1232259749:1232259723:=3,4c3,4%0a%3c %25right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 [[http://sourceforge.net/project/showfiles.php?group_id=143850 |  Attach:download.jpg]]%0a%3c %0a---%0a> [[http://sourceforge.net/project/showfiles.php?group_id=143850 | %25right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg]]%0a> %0a
host:1232259749=127.0.0.1
author:1232259723=
diff:1232259723:1232259608:=3,4c3,4%0a%3c [[http://sourceforge.net/project/showfiles.php?group_id=143850 | %25right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg]]%0a%3c %0a---%0a> %25right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a> %0a
host:1232259723=127.0.0.1
author:1232259608=
diff:1232259608:1232259581:=1,4c1,4%0a%3c (:title What is simuPOP?:)%0a%3c %0a%3c %25right text-align=right margin-top=-25px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a%3c %0a---%0a> (:title What is simuPOP? [[A link]]:)%0a> %0a> %25right text-align=right margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a> %0a
host:1232259608=127.0.0.1
author:1232259581=
diff:1232259581:1232259395:=3,4c3,6%0a%3c %25right text-align=right margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a%3c %0a---%0a> !!Introduction%0a> %0a> %25lfloat text-align=right margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a> %0a
host:1232259581=127.0.0.1
author:1232259395=
diff:1232259395:1232259255:=1,2c1,2%0a%3c (:title What is simuPOP? [[A link]]:)%0a%3c %0a---%0a> (:title What is simuPOP?:)%0a> %0a
host:1232259395=127.0.0.1
author:1232259255=
diff:1232259255:1232259228:=5,6c5,6%0a%3c %25lfloat text-align=right margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a%3c %0a---%0a> %25rfloat text-align=right margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a> %0a
host:1232259255=127.0.0.1
author:1232259228=
diff:1232259228:1232259208:=5,6c5,7%0a%3c %25rfloat text-align=right margin-top=5px margin-right=25px margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a%3c %0a---%0a> %25rfloat text-align=right margin-top=5px margin-right=25px%0a> margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a> %0a
host:1232259228=127.0.0.1
author:1232259208=
diff:1232259208:1232259107:=1,2c1,2%0a%3c (:title What is simuPOP?:)%0a%3c %0a---%0a> (:title What is simuPOP? %25lfloat%25 Attach:download.jpg:)%0a> %0a5,7c5,7%0a%3c %25rfloat text-align=right margin-top=5px margin-right=25px%0a%3c margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a%3c %0a---%0a> %25lfloat text-align=right margin-top=5px margin-right=25px%0a> margin-bottom=5px margin-left=25px%25 %0a> %0a
host:1232259208=127.0.0.1
author:1232259107=
diff:1232259107:1232258894:=1,2c1,2%0a%3c (:title What is simuPOP? %25lfloat%25 Attach:download.jpg:)%0a%3c %0a---%0a> (:title What is simuPOP?:)%0a> %0a6,7c6,7%0a%3c margin-bottom=5px margin-left=25px%25 %0a%3c %0a---%0a> margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a> %0a
host:1232259107=127.0.0.1
author:1232258894=
diff:1232258894:1232258379:=5,7d4%0a%3c %25lfloat text-align=right margin-top=5px margin-right=25px%0a%3c margin-bottom=5px margin-left=25px%25 Attach:download.jpg%0a%3c %0a
host:1232258894=127.0.0.1
author:1232258379=
diff:1232258379:1232258290:=15,16d14%0a%3c !! How to cite simuPOP%0a%3c %0a
host:1232258379=127.0.0.1
author:1232258290=
diff:1232258290:1232258223:=7,8c7,8%0a%3c * A '''population genetics simulation''' program: simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a ''non-overlap generation'' model, aged structured populations can be mimicked using special non-random mating schemes.%0a%3c %0a---%0a> * '''Population genetics simulation''': simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a ''non-overlap generation'' model, aged structured populations can be mimicked using special non-random mating schemes.%0a> %0a13,14c13,14%0a%3c * A '''simulation environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%3c %0a---%0a> * '''Environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a> %0a
host:1232258290=127.0.0.1
author:1232258223=
diff:1232258223:1232258188:=7,8c7,8%0a%3c * '''Population genetics simulation''': simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a ''non-overlap generation'' model, aged structured populations can be mimicked using special non-random mating schemes.%0a%3c %0a---%0a> * '''population genetics simulation''': simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a non-overlap generation model, aged structured populations can be mimicked using special non-random mating schemes.%0a> %0a
host:1232258223=127.0.0.1
author:1232258188=
diff:1232258188:1232257848:=1,2c1,2%0a%3c (:title What is simuPOP?:)%0a%3c %0a---%0a> (:title What is simuPOP:)%0a> %0a7,8d6%0a%3c * '''population genetics simulation''': simuPOP is an ''individual based'' population genetics simulation program. It explicitly models individuals with genotypes and simulates the transmission of individual genotype when a population evolves generation by generation. Although the basic evolutionary scenario follows a non-overlap generation model, aged structured populations can be mimicked using special non-random mating schemes.%0a%3c %0a13,14c11,12%0a%3c * '''Environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%3c %0a---%0a> * '''Simulation environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a> %0a
host:1232258188=127.0.0.1
author:1232257848=
diff:1232257848:1232257775:=11,12c11,12%0a%3c * '''Simulation environment''': simuPOP is provided as a number of [[http://www.python.org | Python ]] modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%3c %0a---%0a> * '''Simulation environment''': simuPOP is provided as a number of Python modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a> %0a
host:1232257848=127.0.0.1
author:1232257775=
diff:1232257775:1232257291:=1,2c1,2%0a%3c (:title What is simuPOP:)%0a%3c %0a---%0a> (:title A general-purpose forward-time population genetics simulation environment:)%0a> %0a5,12c5,8%0a%3c simuPOP is a '''general-purpose forward-time population genetics simulation environment'''. It is%0a%3c %0a%3c * '''Forward-time''':  Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically  which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a%3c %0a%3c * '''General-purpose''': Many population genetics simulation programs are available. However, they are all designed for specific types of evolutionary scenarios and are limited in their ability to simulate complex evolutionary processes. ''simuPOP'' is the only general-purpose simulation program that is capable of simulation arbitrarily complex evolutionary scenarios.%0a%3c %0a%3c * '''Simulation environment''': simuPOP is provided as a number of Python modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%3c %0a---%0a> simuPOP is a ''forward-time'' population genetics simulation environment. Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a> %0a> simuPOP is provided as a number of Python modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a> %0a
host:1232257775=127.0.0.1
author:1232257291=
diff:1232257291:1232257255:=1,2c1,2%0a%3c (:title A general-purpose forward-time population genetics simulation environment:)%0a%3c %0a---%0a> (:title Forward-time population genetics simulator:)%0a> %0a
host:1232257291=127.0.0.1
author:1232257255=
diff:1232257255:1232257230:=11,12c11,12%0a%3c ->Bo Peng and Marek Kimmal (2005) '''simuPOP: a forward-time population genetics simulation environment'''. ''bioinformatics'', 21(18): 3686-3687. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a%3c %0a---%0a> ->Bo Peng and Marek Kimmal (2005) '''simuPOP: a forward-time population genetics simulation environment'''. ''bioinformatics'', 21(18): 3686-3687 ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a> %0a
host:1232257255=127.0.0.1
author:1232257230=
diff:1232257230:1232256974:=9,16c9,13%0a%3c If you use simuPOP for your research, please cite it using:%0a%3c %0a%3c ->Bo Peng and Marek Kimmal (2005) '''simuPOP: a forward-time population genetics simulation environment'''. ''bioinformatics'', 21(18): 3686-3687 ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a%3c %0a%3c and optionally (if nonrandom mating is used)%0a%3c %0a%3c ->Bo Peng and Christopher Amos (2008) '''Forward-time simulations of nonrandom mating populations using simuPOP'''. ''bioinformatics'', 24 (11)” 1408-1409. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/24/11/1408 | Link]])%0a%3c %0a---%0a> Please cite simuPOP using:%0a> %0a> Bo Peng and Marek Kimmal (2005) simuPOP: a forward-time population genetics simulation environment. bioinformatics, 21(18): 3686-3687 ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a> %0a> Bo Peng and Christopher Amos (2008) Forward-time simulations of nonrandom mating populations using simuPOP. bioinformatics, 24 (11)” 1408-1409. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/24/11/1408 | Link]])%0a
host:1232257230=127.0.0.1
author:1232256974=
diff:1232256974:1232256838:=11,13c11%0a%3c Bo Peng and Marek Kimmal (2005) simuPOP: a forward-time population genetics simulation environment. bioinformatics, 21(18): 3686-3687 ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/21/18/3686 | Link]])%0a%3c %0a%3c Bo Peng and Christopher Amos (2008) Forward-time simulations of nonrandom mating populations using simuPOP. bioinformatics, 24 (11)” 1408-1409. ([[http://bioinformatics.oxfordjournals.org/cgi/content/abstract/24/11/1408 | Link]])%0a---%0a> %0a
host:1232256974=127.0.0.1
author:1232256838=
diff:1232256838:1232256648:=5,6c5,6%0a%3c simuPOP is a ''forward-time'' population genetics simulation environment. Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a%3c %0a---%0a> simuPOP is a forward-time population genetics simulation environment. Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a> %0a9,11c9%0a%3c Please cite simuPOP using:%0a%3c %0a%3c %0a---%0a> %0a
host:1232256838=127.0.0.1
author:1232256648=
diff:1232256648:1232254763:=1,2c1,2%0a%3c (:title Forward-time population genetics simulator:)%0a%3c %0a---%0a> (:title A forward-time population genetics simulation environment:)%0a> %0a
host:1232256648=127.0.0.1
author:1232254763=
diff:1232254763:1232231692:=1,2c1,2%0a%3c (:title A forward-time population genetics simulation environment:)%0a%3c %0a---%0a> (:title a forward-time population genetics simulation environment:)%0a> %0a
host:1232254763=127.0.0.1
author:1232231692=
diff:1232231692:1232231591:=9a10,72%0a> !!An overview of simuPOP concepts%0a> %0a> A simuPOP '''population''' consists of individuals of the same '''genotype structure''', which include properties such as number of homologous sets of chromosomes (ploidy), number of chromosomes, and names and locations of markers on each chromosome. Individuals can be divided into subpopulations that can be further divided into virtual subpopulations according to individual properties such as sex, affection status, or arbitrary auxiliary information such as age.%0a> %0a> %0a> %0a> Operators are Python objects that act on a population. They can be applied to a population before or after mating during a life cycle of an evolutionary process (Figure [fig:life-cycle]), or to one or two parents during the production of each offspring. Arbitrary numbers of operators can be applied to an evolving population.%0a> %0a> A simuPOP mating scheme is responsible for choosing parent or parents from a parental (virtual) subpopulation and for populating an offspring subpopulation. simuPOP provides a number of pre-defined mating schemes, such as random, consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid mating in hymenoptera. More complicated nonrandom mating schemes such as mating in age-structured populations can be constructed using heterogeneous mating schemes. %0a> %0a> simuPOP evolves a population generation by generation, following the evolutionary cycle depicted in Figure [fig:life-cycle]. Briefly speaking, a number of pre-mating operators such as a mutator are applied to a population before a mating scheme repeatedly chooses a parent or parents to produce offspring. During-mating operators such as recombinator can be used to adjust how offspring genotypes are formed from parental genotypes. After an offspring population is populated, post-mating operators can be applied, for example, to calculate population statistics. The offspring population will then become the parental population of the next evolutionary cycle.%0a> %0a> %0a> %0a> These concepts are demonstrated in Example [simple-example], where a standard diploid Wright-Fisher model with recombination is simulated. The first line imports the standard simuPOP module. The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci. The third line creates a simulator with three replicates of this population. Random mating will be used to generate offspring. The last statement uses the evolve() function to evolve the populations for 100 generations, subject to five operators.%0a> %0a> The first operator initByValue is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. recombinator is a during-mating operator that recombines parental chromosomes with the given recombination rate 0.01 during the generation of offspring; stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators pyEval and pyOutput are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate. The result is a table of three columns, representing the decay of linkage disequilibrium of each replicate at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a> %0a> Example: simple_example%0a> %0a> =python [=%0a> >>> from simuPOP import *%0a> >>> pop = population(size=1000, loci=[2])%0a> >>> simu = simulator(pop, randomMating(), rep=3)%0a> >>> simu.evolve(%0a> ...     preOps = [initByValue([1, 2, 2, 1])],  %0a> ...     ops = [%0a> ...         recombinator(rate=0.01)%25newwin%25 ,%0a> ...         stat(LD=[0, 1]),%0a> ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a> ...         pyOutput('\n', rep=-1, step=10)%0a> ...     ],%0a> ...     gen=100%0a> ... )%0a> 0.24	0.25	0.24	%0a> 0.21	0.23	0.22	%0a> 0.17	0.21	0.20	%0a> 0.13	0.17	0.18	%0a> 0.10	0.15	0.18	%0a> 0.11	0.14	0.16	%0a> 0.12	0.10	0.16	%0a> 0.11	0.11	0.15	%0a> 0.09	0.10	0.14	%0a> 0.07	0.10	0.11	%0a> (100, 100, 100)%0a> >>>%0a> =]%0a> %0a> This example demonstrates the change of haplotype number when recombination is in effect.%0a> %0a> * The import line import simuPOP module (output suppressed).%0a> * simulator creates a simulator from a population created by population function. The population is diploid (ploidy=2), has 1000 individuals (size=1000) each has two loci on the first chromosome (loci=[2]). The simulator has three copies of this population (rep=3) and will evolve through random mating (randomMating()).%0a> * simu.evolve evolves these populations subject to the following operators.%0a> %0a> ** preop=[initByValue]: operators in parameter preop (accept a list of operators) will be applied to the populations at the beginning of evolution. initByValue is an initializer that set the same genotype to all individuals. In this case, everyone will have genotype 12/21 (1 2 on the first chromosome and 2 1 on the second copy of the chromosome) so linkage disequilibrium is 0.25 (maximum possible value).%0a> ** operators in ops parameter will be applied to all populations at each generation. (Not exactly, operators can be inactive at certain generations.)%0a> ** recombinator is a during-mating operator that recombine chromosomes with probability 0.1 (an unrealistically high value) during mating.%0a> ** alleleCounter is a post-mating operator that count haplotype 12 and 21 at locus 0 and locus 1 respectively. The result will be saved in the local namespace of each replicate. (_vars[0], _vars[1], _vars[2] if you are curious.)%0a> ** pyEval accepts any python expression, evaluate it in each replicates' local namespace and return the result. In this example, pyEval get the value of a haplotype '0-1|1-2', print it with a trailing tab.%0a> ** output is a simple operator that output any string it is given. Here, it output a new line at the last replicate. Without this, all output will be in one line.%0a> ** end=5 means evolve 5 generations.%0a> %0a> The output is a table of haplotype number for each replicate at each generation. All simuPOP scripts will have similar steps. You can add more operators to the ops list to build more complicated simulations. Obvious choices are mutator, migrator, or some proper visualizer (another pyEval operator to call Python's plotting functions) to plot the dynamics of variables.%0a\ No newline at end of file%0a
host:1232231692=127.0.0.1
author:1232231591=
diff:1232231591:1232206410:=5,27c5,14%0a%3c simuPOP is a forward-time population genetics simulation environment. Unlike coalescent-based programs, simuPOP evolves populations forward in time, subject to arbitrary number of genetic and environmental forces such as mutation, recombination, migration and population/subpopulation size changes. Statistics of populations can be calculated and visualized dynamically which makes simuPOP an ideal tool to demonstrate population genetics models; generate datasets under various evolutionary settings, and more importantly, study complex evolutionary processes and evaluate gene mapping methods.%0a%3c %0a%3c simuPOP is provided as a number of Python modules, which provide of a large number of Python objects and functions, including population, mating schemes, operators (objects that manipulate populations) and simulators to coordinate the evolutionary processes. It is the users’ responsibility to write a Python script to glue these pieces together and form a simulation. At a more user-friendly level, simuPOP provides an increasing number of bundled scripts that perform simulations ranging from implementation of basic population genetics models to generating datasets under complex evolutionary scenarios. No knowledge about Python or simuPOP would be needed to run these simulations, if they happen to fit your need.%0a%3c %0a%3c %0a%3c !!An overview of simuPOP concepts%0a%3c %0a%3c A simuPOP '''population''' consists of individuals of the same '''genotype structure''', which include properties such as number of homologous sets of chromosomes (ploidy), number of chromosomes, and names and locations of markers on each chromosome. Individuals can be divided into subpopulations that can be further divided into virtual subpopulations according to individual properties such as sex, affection status, or arbitrary auxiliary information such as age.%0a%3c %0a%3c %0a%3c %0a%3c Operators are Python objects that act on a population. They can be applied to a population before or after mating during a life cycle of an evolutionary process (Figure [fig:life-cycle]), or to one or two parents during the production of each offspring. Arbitrary numbers of operators can be applied to an evolving population.%0a%3c %0a%3c A simuPOP mating scheme is responsible for choosing parent or parents from a parental (virtual) subpopulation and for populating an offspring subpopulation. simuPOP provides a number of pre-defined mating schemes, such as random, consanguineous, monogamous, or polygamous mating, selfing, and haplodiploid mating in hymenoptera. More complicated nonrandom mating schemes such as mating in age-structured populations can be constructed using heterogeneous mating schemes. %0a%3c %0a%3c simuPOP evolves a population generation by generation, following the evolutionary cycle depicted in Figure [fig:life-cycle]. Briefly speaking, a number of pre-mating operators such as a mutator are applied to a population before a mating scheme repeatedly chooses a parent or parents to produce offspring. During-mating operators such as recombinator can be used to adjust how offspring genotypes are formed from parental genotypes. After an offspring population is populated, post-mating operators can be applied, for example, to calculate population statistics. The offspring population will then become the parental population of the next evolutionary cycle.%0a%3c %0a%3c %0a%3c %0a%3c These concepts are demonstrated in Example [simple-example], where a standard diploid Wright-Fisher model with recombination is simulated. The first line imports the standard simuPOP module. The second line creates a diploid population with 1000 individuals, each having one chromosome with two loci. The third line creates a simulator with three replicates of this population. Random mating will be used to generate offspring. The last statement uses the evolve() function to evolve the populations for 100 generations, subject to five operators.%0a%3c %0a%3c The first operator initByValue is applied to all populations before evolution. This operator initializes all individuals with the same genotype 12/21. The other operators can be applied at every generation. recombinator is a during-mating operator that recombines parental chromosomes with the given recombination rate 0.01 during the generation of offspring; stat calculates linkage disequilibrium between the first and second loci. The results of this operator are stored in a local variable space of each population. The last two operators pyEval and pyOutput are applied at the end of every 10 generations. pyEval is applied to all replicates to output calculated linkage disequilibrium values with a trailing tab, and the last operator outputs a newline after the last replicate. The result is a table of three columns, representing the decay of linkage disequilibrium of each replicate at 10 generation intervals. The return value of the evolve function, which is the number of evolved generations for each replicate, is also printed.%0a%3c %0a---%0a> simuPOP is a forward-based population genetics simulation program. Unlike coalescence-based simulation programs, simuPOP evolves population(s) forward in time -- subject to arbitrary number of gentic and environmental forces (mutation, recombination, migration, population size change etc.). Easy simulations like most models in standard population genetics books can be setup easily, whereas very complicated simulations such as spreading of complex diseases, ancient out-of-africa migrations can be built step by step by adding appropriate operators (objects that work on populations).%0a> %0a> simuPOP can be used at two levels: a normal user can grab one of the pre-defined simulation templates and run it with appropriate parameters; and an advanced user can work interactively or write simuPOP/Python scripts to construct arbitrarily complex evoluationary processes. For example, you can run%0a> %0a>   > simuComplexDisease.py %0a> %0a> from a command line and starting a simulation of the evolution of a complex disease.%0a> %0a> On the other hand. simuPOP is a R or matlab programming environment in which users can create, manipulate and evolve populations, calculate and visualize population statistics, and test mapping methods. The full power of simuPOP (and Python) can be used to simulate arbitrarily complex evolutionary scenarios. For example, you can write the following script:%0a> %0a
host:1232231591=127.0.0.1
author:1232206410=
diff:1232206410:1232206390:=1,2c1,2%0a%3c (:title a forward-time population genetics simulation environment:)%0a%3c %0a---%0a> (:title a forward-time population genetics simulation environment")%0a> %0a
host:1232206410=127.0.0.1
author:1232206390=
diff:1232206390:1232206364:=1,2c1,2%0a%3c (:title a forward-time population genetics simulation environment")%0a%3c %0a---%0a> (:Title a forward-time population genetics simulation environment")%0a> %0a
host:1232206390=127.0.0.1
author:1232206364=
diff:1232206364:1232173619:=1,2d0%0a%3c (:Title a forward-time population genetics simulation environment")%0a%3c %0a
host:1232206364=127.0.0.1
author:1232173619=
diff:1232173619:1232173443:=16,40c16,40%0a%3c >>> from simuPOP import *%0a%3c >>> pop = population(size=1000, loci=[2])%0a%3c >>> simu = simulator(pop, randomMating(), rep=3)%0a%3c >>> simu.evolve(%0a%3c ...     preOps = [initByValue([1, 2, 2, 1])],  %0a%3c ...     ops = [%0a%3c ...         recombinator(rate=0.01)%25newwin%25 ,%0a%3c ...         stat(LD=[0, 1]),%0a%3c ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a%3c ...         pyOutput('\n', rep=-1, step=10)%0a%3c ...     ],%0a%3c ...     gen=100%0a%3c ... )%0a%3c 0.24	0.25	0.24	%0a%3c 0.21	0.23	0.22	%0a%3c 0.17	0.21	0.20	%0a%3c 0.13	0.17	0.18	%0a%3c 0.10	0.15	0.18	%0a%3c 0.11	0.14	0.16	%0a%3c 0.12	0.10	0.16	%0a%3c 0.11	0.11	0.15	%0a%3c 0.09	0.10	0.14	%0a%3c 0.07	0.10	0.11	%0a%3c (100, 100, 100)%0a%3c >>>%0a---%0a>     >>> from simuPOP import *%0a>     >>> pop = population(size=1000, loci=[2])%0a>     >>> simu = simulator(pop, randomMating(), rep=3)%0a>     >>> simu.evolve(%0a>     ...     preOps = [initByValue([1, 2, 2, 1])],  %0a>     ...     ops = [%0a>     ...         recombinator(rate=0.01)%25newwin%25 ,%0a>     ...         stat(LD=[0, 1]),%0a>     ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a>     ...         pyOutput('\n', rep=-1, step=10)%0a>     ...     ],%0a>     ...     gen=100%0a>     ... )%0a>     0.24	0.25	0.24	%0a>     0.21	0.23	0.22	%0a>     0.17	0.21	0.20	%0a>     0.13	0.17	0.18	%0a>     0.10	0.15	0.18	%0a>     0.11	0.14	0.16	%0a>     0.12	0.10	0.16	%0a>     0.11	0.11	0.15	%0a>     0.09	0.10	0.14	%0a>     0.07	0.10	0.11	%0a>     (100, 100, 100)%0a>     >>>%0a
host:1232173619=127.0.0.1
author:1232173443=
diff:1232173443:1232173135:=15d14%0a%3c =python [=%0a41,42c40,41%0a%3c =]%0a%3c %0a---%0a> %0a> %0a
host:1232173443=127.0.0.1
author:1232173135=
diff:1232173135:1232170129:=15,41c15,39%0a%3c     >>> from simuPOP import *%0a%3c     >>> pop = population(size=1000, loci=[2])%0a%3c     >>> simu = simulator(pop, randomMating(), rep=3)%0a%3c     >>> simu.evolve(%0a%3c     ...     preOps = [initByValue([1, 2, 2, 1])],  %0a%3c     ...     ops = [%0a%3c     ...         recombinator(rate=0.01)%25newwin%25 ,%0a%3c     ...         stat(LD=[0, 1]),%0a%3c     ...         pyEval(r"'%25.2f\t' %25 LD[0][1]", step=10),%0a%3c     ...         pyOutput('\n', rep=-1, step=10)%0a%3c     ...     ],%0a%3c     ...     gen=100%0a%3c     ... )%0a%3c     0.24	0.25	0.24	%0a%3c     0.21	0.23	0.22	%0a%3c     0.17	0.21	0.20	%0a%3c     0.13	0.17	0.18	%0a%3c     0.10	0.15	0.18	%0a%3c     0.11	0.14	0.16	%0a%3c     0.12	0.10	0.16	%0a%3c     0.11	0.11	0.15	%0a%3c     0.09	0.10	0.14	%0a%3c     0.07	0.10	0.11	%0a%3c     (100, 100, 100)%0a%3c     >>>%0a%3c %0a%3c %0a---%0a>  >>> from simuPOP import *%0a>  >>> simu = simulator(%0a>  ...     population(size=1000, ploidy=2, loci=[2]),%0a>  ...     randomMating(),%0a>  ...     rep = 3)%0a>  >>> simu.evolve(%0a>  ...     preOp = [initByValue([1,2,2,1]) ],  %0a>  ...     ops = [%0a>  ...         recombinator( rate=0.1),%0a>  ...         alleleCounter( haplotypes=[[0,1]]),%0a>  ...         pyEval(expr = r"str(haploNum['0-1']['1-2'])+'t'",%0a>  ...             headers=["hapt"]),%0a>  ...         output("n", rep=REP_LAST)%0a>  ...         ],%0a>  ...     end=5%0a>  ... )%0a>  0_hap	1_hap	2_hap	%0a>  888.0	874.0	892.0	%0a>  835.0	780.0	819.0	%0a>  784.0	724.0	783.0	%0a>  762.0	688.0	757.0	%0a>  769.0	654.0	723.0	%0a>  >>>  %0a> %0a> %0a
host:1232173135=127.0.0.1
author:1232170129=
diff:1232170129:1232170129:=1,54d0%0a%3c !!Introduction%0a%3c %0a%3c simuPOP is a forward-based population genetics simulation program. Unlike coalescence-based simulation programs, simuPOP evolves population(s) forward in time -- subject to arbitrary number of gentic and environmental forces (mutation, recombination, migration, population size change etc.). Easy simulations like most models in standard population genetics books can be setup easily, whereas very complicated simulations such as spreading of complex diseases, ancient out-of-africa migrations can be built step by step by adding appropriate operators (objects that work on populations).%0a%3c %0a%3c simuPOP can be used at two levels: a normal user can grab one of the pre-defined simulation templates and run it with appropriate parameters; and an advanced user can work interactively or write simuPOP/Python scripts to construct arbitrarily complex evoluationary processes. For example, you can run%0a%3c %0a%3c   > simuComplexDisease.py %0a%3c %0a%3c from a command line and starting a simulation of the evolution of a complex disease.%0a%3c %0a%3c On the other hand. simuPOP is a R or matlab programming environment in which users can create, manipulate and evolve populations, calculate and visualize population statistics, and test mapping methods. The full power of simuPOP (and Python) can be used to simulate arbitrarily complex evolutionary scenarios. For example, you can write the following script:%0a%3c %0a%3c Example: simple_example%0a%3c %0a%3c  >>> from simuPOP import *%0a%3c  >>> simu = simulator(%0a%3c  ...     population(size=1000, ploidy=2, loci=[2]),%0a%3c  ...     randomMating(),%0a%3c  ...     rep = 3)%0a%3c  >>> simu.evolve(%0a%3c  ...     preOp = [initByValue([1,2,2,1]) ],  %0a%3c  ...     ops = [%0a%3c  ...         recombinator( rate=0.1),%0a%3c  ...         alleleCounter( haplotypes=[[0,1]]),%0a%3c  ...         pyEval(expr = r"str(haploNum['0-1']['1-2'])+'t'",%0a%3c  ...             headers=["hapt"]),%0a%3c  ...         output("n", rep=REP_LAST)%0a%3c  ...         ],%0a%3c  ...     end=5%0a%3c  ... )%0a%3c  0_hap	1_hap	2_hap	%0a%3c  888.0	874.0	892.0	%0a%3c  835.0	780.0	819.0	%0a%3c  784.0	724.0	783.0	%0a%3c  762.0	688.0	757.0	%0a%3c  769.0	654.0	723.0	%0a%3c  >>>  %0a%3c %0a%3c %0a%3c This example demonstrates the change of haplotype number when recombination is in effect.%0a%3c %0a%3c * The import line import simuPOP module (output suppressed).%0a%3c * simulator creates a simulator from a population created by population function. The population is diploid (ploidy=2), has 1000 individuals (size=1000) each has two loci on the first chromosome (loci=[2]). The simulator has three copies of this population (rep=3) and will evolve through random mating (randomMating()).%0a%3c * simu.evolve evolves these populations subject to the following operators.%0a%3c %0a%3c ** preop=[initByValue]: operators in parameter preop (accept a list of operators) will be applied to the populations at the beginning of evolution. initByValue is an initializer that set the same genotype to all individuals. In this case, everyone will have genotype 12/21 (1 2 on the first chromosome and 2 1 on the second copy of the chromosome) so linkage disequilibrium is 0.25 (maximum possible value).%0a%3c ** operators in ops parameter will be applied to all populations at each generation. (Not exactly, operators can be inactive at certain generations.)%0a%3c ** recombinator is a during-mating operator that recombine chromosomes with probability 0.1 (an unrealistically high value) during mating.%0a%3c ** alleleCounter is a post-mating operator that count haplotype 12 and 21 at locus 0 and locus 1 respectively. The result will be saved in the local namespace of each replicate. (_vars[0], _vars[1], _vars[2] if you are curious.)%0a%3c ** pyEval accepts any python expression, evaluate it in each replicates' local namespace and return the result. In this example, pyEval get the value of a haplotype '0-1|1-2', print it with a trailing tab.%0a%3c ** output is a simple operator that output any string it is given. Here, it output a new line at the last replicate. Without this, all output will be in one line.%0a%3c ** end=5 means evolve 5 generations.%0a%3c %0a%3c The output is a table of haplotype number for each replicate at each generation. All simuPOP scripts will have similar steps. You can add more operators to the ops list to build more complicated simulations. Obvious choices are mutator, migrator, or some proper visualizer (another pyEval operator to call Python's plotting functions) to plot the dynamics of variables.%0a\ No newline at end of file%0a
host:1232170129=127.0.0.1
