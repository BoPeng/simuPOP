version=pmwiki-2.1.27 ordered=1 urlencoded=1
agent=Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.7) Gecko/2009032606 Red Hat/3.0.7-1.el5 Firefox/3.0.7
author=
csum=
ctime=1232172730
host=127.0.0.1
name=Main.RoadMap
rev=22
targets=Main.MailingList
text=(:title RoadMap of simuPOP:)%0a%25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 http://simupop.sourceforge.net/images/roadmap.jpg%0a%0a!!Towards simuPOP 1.0%0a%0asimuPOP is preparing for a 1.0 release. No major feature is planned but if you feel that something is desparately missing, please feel free to suggest the feature in the simuPOP [[Main/mailing list]]. %0a%0aTo provide a clean and well documented interface, great efforts have been devoted to%0a%0a* Polish user's guide to describe all features, including those advanced features that were poorly documented.%0a%0a* Go through classes and member functions and add support for virtual subpopulations if the addition improves simuPOP's usability.%0a%0a* Finish the pedigree class. Move the logic of samplers out of sampler.cpp. Add pedigreeSample and subclass all pedigree related samplers to this class.These classes only need to define a probePedigree function to find a valid pedigree from a proband.%0a%0a* Examine functions in simuUtil.py. Most functions will be moved to the simuPOP online cookbook.%0a%0a* Implement a demography class that return a demographic function by adding ''events'' to a demographic model.%0a%0aTODO:%0a* Add a debugging feature to output all mutation events.%0a%0a* Improve opName() to output more detailed information in dryrun mode.%0a%0aDEBUG:%0a%0a* Check the initialization process of each operator and use proper flags for correct initialization. For example, an operator may need to be re-initialized if population size change, another one may work as long as GenoStruIdx() is the same.%0a%0a* Test the use of [] and AllAvail in simuPOP.%0a%0a!! After simuPOP 1.0,%0a%0a* A bundled installer that includes R, rpy, wxPython etc.%0a%0a* Efficiency improvement and possible use of openMP.%0a%0a* Use better in-memory storage of a large number of variables. (e.g. use carray or numpy array to store allele frequency.). Use better on-disk storage of a large number of variables.%0a%0a* Better ways to profile simuPOP?%0a%0a* Complete VSP support for all operators.%0a%0a* Investigator the potential of a compact mode (corresponding to each module, making a total of 12 modules) that stores genotype in a more compact mode. For example, monozygous loci would not be saved. This need to separated from the standard modules because these modules will be slow.%0a%0a* A few simulation techniques for the simulation of a large number of markers for genome-wide association studies and population genomic simulations.%0a%0a* Investigate the potential of python image module. See if it is easy to install and support%0a%0a* and, the simuPOP designer!%0a%0a!! The simuPOP designer%0a%0a%25lfloat width=700%25 http://simupop.sourceforge.net/images/designer.png%0a%0a[-- A prototype of a simuPOP designer that allows users to create an evolutionary scenario interactively. The top right panel represents an evolutionary scenario including a demographic model (green trapezoid) and various operators. The left panel lists all simuPOP objects and their properties. Selection of an object (recombinator in this example) would highlight it and allow users to modify its properties. The right bottom panel displays various outputs.--]%0a%0a%0aBecause the full power of simuPOP can only be utilized through scripts, it is a not a good idea to remove simuPOP’s scripting interface and replace it with a comprehensive GUI. However, '''for a large number of potential users the scripting interface of simuPOP is the biggest obstacle for the use of this program'''. Even for computer-savvy users, writing a complex evolutionary scenario could be time-consuming. The next big thing for the development of simuPOP will be '''a simuPOP designer that allows users to create an evolutionary scenario interactively''', using a friendly graphical user interface.%0a%0aThe core of this designer will be a collection of objects that represents an evolutionary scenario, which includes parameters, demographic models, populations, simulators and operators. A GUI will be provided to create and modify this scenario. This GUI works more or less like a GUI builder (Boa of wxPython or Qt Designer) where an evolutionary scenario could be created interactively by adding various components from a toolbox. All components are listed and are displayed visually. Selection of a component would highlight it so that users could view and modify its properties.%0a%0aEvolutionary scenarios created by this designer will be saved and loaded in an XML format. A simuPOP script will be generated for each scenario although different versions of simuPOP may produce different scripts to make use of new simuPOP features. This script could be executed directly within this designer, with visual feedback for applied operators and population changes. It could also be exported to be executed separately, and be modified to implement more complex logics or develop its own user interface. This simuPOP designer is likely to be implemented in wxPython although I will investigate the possibility of using pyQt4 because Qt provides more functions (such as XML support) and has recently been released under a GPL license.%0a%0aA prototype has been created to demonstrate the ideas. Because the development of this tool will be a long and complex process, any help from the user community will be greatly appreciated. Please feel free to send your ideas to [[mailto:bpeng@mdanderson.org|me]] or to the [[Main/Mailing List]].%0a
time=1253799589
title=RoadMap of simuPOP
author:1253799589=
diff:1253799589:1252786599:=23,24d22%0a%3c * Improve opName() to output more detailed information in dryrun mode.%0a%3c %0a
host:1253799589=127.0.0.1
author:1252786599=
diff:1252786599:1252114253:=20,22d19%0a%3c TODO:%0a%3c * Add a debugging feature to output all mutation events.%0a%3c %0a
host:1252786599=127.0.0.1
author:1252114253=
diff:1252114253:1246415978:=20,25d19%0a%3c DEBUG:%0a%3c %0a%3c * Check the initialization process of each operator and use proper flags for correct initialization. For example, an operator may need to be re-initialized if population size change, another one may work as long as GenoStruIdx() is the same.%0a%3c %0a%3c * Test the use of [] and AllAvail in simuPOP.%0a%3c %0a
host:1252114253=127.0.0.1
author:1246415978=
diff:1246415978:1244593140:=26,27d25%0a%3c * Use better in-memory storage of a large number of variables. (e.g. use carray or numpy array to store allele frequency.). Use better on-disk storage of a large number of variables.%0a%3c %0a
host:1246415978=127.0.0.1
author:1244593140=
diff:1244593140:1244593060:=23d22%0a%3c %0a25d23%0a%3c %0a27d24%0a%3c %0a29d25%0a%3c %0a31,33d26%0a%3c %0a%3c * A few simulation techniques for the simulation of a large number of markers for genome-wide association studies and population genomic simulations.%0a%3c %0a35d27%0a%3c %0a
host:1244593140=127.0.0.1
author:1244593060=
diff:1244593060:1243907895:=14,17c14,29%0a%3c * Finish the pedigree class. Move the logic of samplers out of sampler.cpp. Add pedigreeSample and subclass all pedigree related samplers to this class.These classes only need to define a probePedigree function to find a valid pedigree from a proband.%0a%3c %0a%3c * Examine functions in simuUtil.py. Most functions will be moved to the simuPOP online cookbook.%0a%3c %0a---%0a> * For each operator,%0a> ** Check applicability (haploid, diploid, etc), and implement the applicability rules in @@isCompatible()@@ and document them.%0a> ** Check the implementation of initialize() which should reinitialize an operator if it is applied to another population.%0a> ** Check the support for subPop parameter. Add support if not too troublesome. Document it clearly.%0a> ** Test the operator thoroughly.%0a> ** Remove operators that are not used widely.%0a> %0a> * For each mating scheme,%0a> ** Check applicability and implement it in isCompatible().%0a> ** Test each feature of mating scheme thoroughly.%0a> %0a> * Finish the pedigree class. Move the logic of samplers out of sampler.cpp.%0a> ** Add pedigreeSample and subclass all pedigree related samplers to this class.These classes only need to define a probePedigree function to find a valid pedigree from a proband.%0a> %0a> * Remove most functions from simuUtil.py and remove hapMapUtil.py. Remove simuViewPop.py. Carefully document others.%0a> %0a22d33%0a%3c * A bundled installer that includes R, rpy, wxPython etc.%0a
host:1244593060=127.0.0.1
author:1243907895=
diff:1243907895:1243786503:=37c37%0a%3c * Investigator the potential of a compact mode (corresponding to each module, making a total of 12 modules) that stores genotype in a more compact mode. For example, monozygous loci would not be saved. This need to separated from the standard modules because these modules will be slow.%0a---%0a> * Investigator the potential of 'virtual markers' (transparent to users) in the sense that markers are not allocated by default, but are only created when needed. This should help the simulation of large populations, but this approach has its own problems, especially in terms of performance. The population interface would better stay unchanged.%0a
host:1243907895=127.0.0.1
author:1243786503=
diff:1243786503:1243786423:=37c37%0a%3c * Investigator the potential of 'virtual markers' (transparent to users) in the sense that markers are not allocated by default, but are only created when needed. This should help the simulation of large populations, but this approach has its own problems, especially in terms of performance. The population interface would better stay unchanged.%0a---%0a> * Investigator the potential of 'virtual markers' (transparent to users) in the sense that markers are not allocated by default, but are only created when needed. This should help the simulation of large populations, but this approach has its own problems, especially in terms of performance. The population interface would better not changed.%0a
host:1243786503=127.0.0.1
author:1243786423=
diff:1243786423:1242698267:=37d36%0a%3c * Investigator the potential of 'virtual markers' (transparent to users) in the sense that markers are not allocated by default, but are only created when needed. This should help the simulation of large populations, but this approach has its own problems, especially in terms of performance. The population interface would better not changed.%0a
host:1243786423=127.0.0.1
author:1242698267=
diff:1242698267:1242698214:=53c53%0a%3c A prototype has been created to demonstrate the ideas. Because the development of this tool will be a long and complex process, any help from the user community will be greatly appreciated. Please feel free to send your ideas to [[mailto:bpeng@mdanderson.org|me]] or to the [[Main/Mailing List]].%0a---%0a> A prototype has been created to demonstrate the ideas. Because the development of this tool will be a long and complex process, any help from the user community will be greatly appreciated. Please feel free to send your ideas to [[bpeng@mdanderson.org|me]] or to the [[Main/Mailing List]].%0a
host:1242698267=127.0.0.1
author:1242698214=
diff:1242698214:1242697749:=42,46c42,43%0a%3c %25lfloat width=700%25 http://simupop.sourceforge.net/images/designer.png%0a%3c %0a%3c [-- A prototype of a simuPOP designer that allows users to create an evolutionary scenario interactively. The top right panel represents an evolutionary scenario including a demographic model (green trapezoid) and various operators. The left panel lists all simuPOP objects and their properties. Selection of an object (recombinator in this example) would highlight it and allow users to modify its properties. The right bottom panel displays various outputs.--]%0a%3c %0a%3c %0a---%0a> %25lfloat width=680%25 http://simupop.sourceforge.net/images/designer.png%0a> %0a
host:1242698214=127.0.0.1
author:1242697749=
diff:1242697749:1242697732:=42,43c42,43%0a%3c %25lfloat width=680%25 http://simupop.sourceforge.net/images/designer.png%0a%3c %0a---%0a> %25lfloat width=720%25 http://simupop.sourceforge.net/images/designer.png%0a> %0a
host:1242697749=127.0.0.1
author:1242697732=
diff:1242697732:1242697577:=42,43d41%0a%3c %25lfloat width=720%25 http://simupop.sourceforge.net/images/designer.png%0a%3c %0a50c48%0a%3c A prototype has been created to demonstrate the ideas. Because the development of this tool will be a long and complex process, any help from the user community will be greatly appreciated. Please feel free to send your ideas to [[bpeng@mdanderson.org|me]] or to the [[Main/Mailing List]].%0a---%0a> %0a
host:1242697732=127.0.0.1
author:1242697577=
diff:1242697577:1232858633:=38,48c38,39%0a%3c * and, the simuPOP designer!%0a%3c %0a%3c !! The simuPOP designer%0a%3c %0a%3c Because the full power of simuPOP can only be utilized through scripts, it is a not a good idea to remove simuPOP’s scripting interface and replace it with a comprehensive GUI. However, '''for a large number of potential users the scripting interface of simuPOP is the biggest obstacle for the use of this program'''. Even for computer-savvy users, writing a complex evolutionary scenario could be time-consuming. The next big thing for the development of simuPOP will be '''a simuPOP designer that allows users to create an evolutionary scenario interactively''', using a friendly graphical user interface.%0a%3c %0a%3c The core of this designer will be a collection of objects that represents an evolutionary scenario, which includes parameters, demographic models, populations, simulators and operators. A GUI will be provided to create and modify this scenario. This GUI works more or less like a GUI builder (Boa of wxPython or Qt Designer) where an evolutionary scenario could be created interactively by adding various components from a toolbox. All components are listed and are displayed visually. Selection of a component would highlight it so that users could view and modify its properties.%0a%3c %0a%3c Evolutionary scenarios created by this designer will be saved and loaded in an XML format. A simuPOP script will be generated for each scenario although different versions of simuPOP may produce different scripts to make use of new simuPOP features. This script could be executed directly within this designer, with visual feedback for applied operators and population changes. It could also be exported to be executed separately, and be modified to implement more complex logics or develop its own user interface. This simuPOP designer is likely to be implemented in wxPython although I will investigate the possibility of using pyQt4 because Qt provides more functions (such as XML support) and has recently been released under a GPL license.%0a%3c %0a%3c %0a---%0a> * A real GUI.%0a> %0a
host:1242697577=127.0.0.1
author:1232858633=
diff:1232858633:1232858611:=2,3c2%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 http://simupop.sourceforge.net/images/roadmap.jpg%0a%3c %0a---%0a> %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://simupop.sourceforge.net/images/roadmap.jpg]]%0a
host:1232858633=127.0.0.1
author:1232858611=
diff:1232858611:1232428569:=2c2%0a%3c %25rfloat newwin right text-align=right margin-top=0px margin-right=25px margin-bottom=0px margin-left=25px%25 [[http://simupop.sourceforge.net/images/roadmap.jpg]]%0a---%0a> %0a
host:1232858611=127.0.0.1
author:1232428569=
diff:1232428569:1232319445:=1,2c1,2%0a%3c (:title RoadMap of simuPOP:)%0a%3c %0a---%0a> (Ititle RoadMap of simuPOP:)%0a> %0a
host:1232428569=127.0.0.1
author:1232319445=
diff:1232319445:1232319432:=12d11%0a%3c %0a
host:1232319445=127.0.0.1
author:1232319432=
diff:1232319432:1232319406:=8d7%0a%3c %0a10d8%0a%3c %0a18d15%0a%3c %0a22d18%0a%3c %0a25d20%0a%3c %0a27d21%0a%3c %0a
host:1232319432=127.0.0.1
author:1232319406=
diff:1232319406:1232318814:=3,9c3,11%0a%3c !!Towards simuPOP 1.0%0a%3c %0a%3c simuPOP is preparing for a 1.0 release. No major feature is planned but if you feel that something is desparately missing, please feel free to suggest the feature in the simuPOP [[Main/mailing list]]. %0a%3c %0a%3c To provide a clean and well documented interface, great efforts have been devoted to%0a%3c * Polish user's guide to describe all features, including those advanced features that were poorly documented.%0a%3c * Go through classes and member functions and add support for virtual subpopulations if the addition improves simuPOP's usability.%0a---%0a> Towards simuPOP 1.0%0a> %0a> simuPOP 1.0 should have a consistently defined and well documented interface.%0a> %0a> * Continue to polish user's guide. (Add bibtex reference to programs cited%0a>   on page 3).%0a> %0a> * Go through each function and add support for subpopulation names.%0a> %0a11,15c13,21%0a%3c ** Check applicability (haploid, diploid, etc), and implement the applicability rules in @@isCompatible()@@ and document them.%0a%3c ** Check the implementation of initialize() which should reinitialize an operator if it is applied to another population.%0a%3c ** Check the support for subPop parameter. Add support if not too troublesome. Document it clearly.%0a%3c ** Test the operator thoroughly.%0a%3c ** Remove operators that are not used widely.%0a---%0a>   - Check applicability (haploid, diploid, etc), and implement it in%0a> 	isCompatible().%0a>   - Check the implementation of initialize() which should reinitialize%0a> 	an operator if it is applied to another population.%0a>   - Check the support for subPop parameter. Add support if not too%0a> 	troublesome. Document it clearly.%0a>   - Test the operator thoroughly.%0a>   - Remove operators that are not used widely.%0a> %0a17,18c23,25%0a%3c ** Check applicability and implement it in isCompatible().%0a%3c ** Test each feature of mating scheme thoroughly.%0a---%0a>   - Check applicability and implement it in isCompatible().%0a>   - Test each feature of mating scheme thoroughly.%0a> %0a20,25c27,49%0a%3c ** Add pedigreeSample and subclass all pedigree related samplers to this class.These classes only need to define a probePedigree function to find a valid pedigree from a proband.%0a%3c * Remove most functions from simuUtil.py and remove hapMapUtil.py. Remove simuViewPop.py. Carefully document others.%0a%3c * Implement a demography class that return a demographic function by adding ''events'' to a demographic model.%0a%3c %0a%3c !! After simuPOP 1.0,%0a%3c %0a---%0a>   Add pedigreeSample and subclass all pedigree related samplers to this class.%0a>   These classes only need to define a probePedigree function to find a valid%0a>   pedigree from a proband.%0a> %0a> * Remove most functions from simuUtil.py and remove hapMapUtil.py. Remove%0a>   simuViewPop.py. Carefully document others.%0a> %0a> * Remove the examples directory.%0a> %0a> * Implement a demography class that return a demographic function by adding%0a>   'events' to a demographic model.%0a> %0a> * Move genotype producing code to another during mating operator.%0a> %0a> * Add ops option to mating schemes so that each mating scheme can use%0a>   its own during-mating operators.%0a> %0a> * Redefine selfing, making it randomMating + selfing operator.%0a> %0a> * Define an operator to handle customized operators.%0a> %0a> After 1.0,%0a> %0a27c51,52%0a%3c * Better ways to profile simuPOP?%0a---%0a>   Better ways to profile simuPOP?%0a> %0a29,31c54,60%0a%3c * Investigate the potential of python image module. See if it is easy to install and support%0a%3c * A real GUI.%0a%3c %0a---%0a> %0a> * add models from population genetics book (for the book).%0a> %0a> * investigate the potential of python image module. See if it is easy to install and support%0a> %0a> * A real GUI other than the tk-based simple parameter dialog%0a> %0a
host:1232319406=127.0.0.1
author:1232318814=
diff:1232318814:1232172730:=1,60c1%0a%3c (Ititle RoadMap of simuPOP:)%0a%3c %0a%3c Towards simuPOP 1.0%0a%3c %0a%3c simuPOP 1.0 should have a consistently defined and well documented interface.%0a%3c %0a%3c * Continue to polish user's guide. (Add bibtex reference to programs cited%0a%3c   on page 3).%0a%3c %0a%3c * Go through each function and add support for subpopulation names.%0a%3c %0a%3c * For each operator,%0a%3c   - Check applicability (haploid, diploid, etc), and implement it in%0a%3c 	isCompatible().%0a%3c   - Check the implementation of initialize() which should reinitialize%0a%3c 	an operator if it is applied to another population.%0a%3c   - Check the support for subPop parameter. Add support if not too%0a%3c 	troublesome. Document it clearly.%0a%3c   - Test the operator thoroughly.%0a%3c   - Remove operators that are not used widely.%0a%3c %0a%3c * For each mating scheme,%0a%3c   - Check applicability and implement it in isCompatible().%0a%3c   - Test each feature of mating scheme thoroughly.%0a%3c %0a%3c * Finish the pedigree class. Move the logic of samplers out of sampler.cpp.%0a%3c   Add pedigreeSample and subclass all pedigree related samplers to this class.%0a%3c   These classes only need to define a probePedigree function to find a valid%0a%3c   pedigree from a proband.%0a%3c %0a%3c * Remove most functions from simuUtil.py and remove hapMapUtil.py. Remove%0a%3c   simuViewPop.py. Carefully document others.%0a%3c %0a%3c * Remove the examples directory.%0a%3c %0a%3c * Implement a demography class that return a demographic function by adding%0a%3c   'events' to a demographic model.%0a%3c %0a%3c * Move genotype producing code to another during mating operator.%0a%3c %0a%3c * Add ops option to mating schemes so that each mating scheme can use%0a%3c   its own during-mating operators.%0a%3c %0a%3c * Redefine selfing, making it randomMating + selfing operator.%0a%3c %0a%3c * Define an operator to handle customized operators.%0a%3c %0a%3c After 1.0,%0a%3c %0a%3c * Efficiency improvement and possible use of openMP.%0a%3c   Better ways to profile simuPOP?%0a%3c %0a%3c * Complete VSP support for all operators.%0a%3c %0a%3c * add models from population genetics book (for the book).%0a%3c %0a%3c * investigate the potential of python image module. See if it is easy to install and support%0a%3c %0a%3c * A real GUI other than the tk-based simple parameter dialog%0a%3c %0a---%0a> (:includeSite http://simupop.svn.sourceforge.net/viewvc/simupop/trunk/TODO border=0 scroll=no width=100%25 height=600:)%0a\ No newline at end of file%0a
host:1232318814=127.0.0.1
author:1232172730=
diff:1232172730:1232172730:=1d0%0a%3c (:includeSite http://simupop.svn.sourceforge.net/viewvc/simupop/trunk/TODO border=0 scroll=no width=100%25 height=600:)%0a\ No newline at end of file%0a
host:1232172730=127.0.0.1
